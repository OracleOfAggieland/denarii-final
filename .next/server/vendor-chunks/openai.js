"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/openai";
exports.ids = ["vendor-chunks/openai"];
exports.modules = {

/***/ "(rsc)/./node_modules/openai/_vendor/partial-json-parser/parser.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/openai/_vendor/partial-json-parser/parser.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MalformedJSON: () => (/* binding */ MalformedJSON),\n/* harmony export */   PartialJSON: () => (/* binding */ PartialJSON),\n/* harmony export */   partialParse: () => (/* binding */ partialParse)\n/* harmony export */ });\nconst STR = 1;\nconst NUM = 2;\nconst ARR = 4;\nconst OBJ = 8;\nconst NULL = 16;\nconst BOOL = 32;\nconst NAN = 64;\nconst INFINITY = 128;\nconst MINUS_INFINITY = 256;\nconst INF = INFINITY | MINUS_INFINITY;\nconst SPECIAL = NULL | BOOL | INF | NAN;\nconst ATOM = STR | NUM | SPECIAL;\nconst COLLECTION = ARR | OBJ;\nconst ALL = ATOM | COLLECTION;\nconst Allow = {\n    STR,\n    NUM,\n    ARR,\n    OBJ,\n    NULL,\n    BOOL,\n    NAN,\n    INFINITY,\n    MINUS_INFINITY,\n    INF,\n    SPECIAL,\n    ATOM,\n    COLLECTION,\n    ALL\n};\n// The JSON string segment was unable to be parsed completely\nclass PartialJSON extends Error {\n}\nclass MalformedJSON extends Error {\n}\n/**\n * Parse incomplete JSON\n * @param {string} jsonString Partial JSON to be parsed\n * @param {number} allowPartial Specify what types are allowed to be partial, see {@link Allow} for details\n * @returns The parsed JSON\n * @throws {PartialJSON} If the JSON is incomplete (related to the `allow` parameter)\n * @throws {MalformedJSON} If the JSON is malformed\n */ function parseJSON(jsonString, allowPartial = Allow.ALL) {\n    if (typeof jsonString !== \"string\") {\n        throw new TypeError(`expecting str, got ${typeof jsonString}`);\n    }\n    if (!jsonString.trim()) {\n        throw new Error(`${jsonString} is empty`);\n    }\n    return _parseJSON(jsonString.trim(), allowPartial);\n}\nconst _parseJSON = (jsonString, allow)=>{\n    const length = jsonString.length;\n    let index = 0;\n    const markPartialJSON = (msg)=>{\n        throw new PartialJSON(`${msg} at position ${index}`);\n    };\n    const throwMalformedError = (msg)=>{\n        throw new MalformedJSON(`${msg} at position ${index}`);\n    };\n    const parseAny = ()=>{\n        skipBlank();\n        if (index >= length) markPartialJSON(\"Unexpected end of input\");\n        if (jsonString[index] === '\"') return parseStr();\n        if (jsonString[index] === \"{\") return parseObj();\n        if (jsonString[index] === \"[\") return parseArr();\n        if (jsonString.substring(index, index + 4) === \"null\" || Allow.NULL & allow && length - index < 4 && \"null\".startsWith(jsonString.substring(index))) {\n            index += 4;\n            return null;\n        }\n        if (jsonString.substring(index, index + 4) === \"true\" || Allow.BOOL & allow && length - index < 4 && \"true\".startsWith(jsonString.substring(index))) {\n            index += 4;\n            return true;\n        }\n        if (jsonString.substring(index, index + 5) === \"false\" || Allow.BOOL & allow && length - index < 5 && \"false\".startsWith(jsonString.substring(index))) {\n            index += 5;\n            return false;\n        }\n        if (jsonString.substring(index, index + 8) === \"Infinity\" || Allow.INFINITY & allow && length - index < 8 && \"Infinity\".startsWith(jsonString.substring(index))) {\n            index += 8;\n            return Infinity;\n        }\n        if (jsonString.substring(index, index + 9) === \"-Infinity\" || Allow.MINUS_INFINITY & allow && 1 < length - index && length - index < 9 && \"-Infinity\".startsWith(jsonString.substring(index))) {\n            index += 9;\n            return -Infinity;\n        }\n        if (jsonString.substring(index, index + 3) === \"NaN\" || Allow.NAN & allow && length - index < 3 && \"NaN\".startsWith(jsonString.substring(index))) {\n            index += 3;\n            return NaN;\n        }\n        return parseNum();\n    };\n    const parseStr = ()=>{\n        const start = index;\n        let escape = false;\n        index++; // skip initial quote\n        while(index < length && (jsonString[index] !== '\"' || escape && jsonString[index - 1] === \"\\\\\")){\n            escape = jsonString[index] === \"\\\\\" ? !escape : false;\n            index++;\n        }\n        if (jsonString.charAt(index) == '\"') {\n            try {\n                return JSON.parse(jsonString.substring(start, ++index - Number(escape)));\n            } catch (e) {\n                throwMalformedError(String(e));\n            }\n        } else if (Allow.STR & allow) {\n            try {\n                return JSON.parse(jsonString.substring(start, index - Number(escape)) + '\"');\n            } catch (e) {\n                // SyntaxError: Invalid escape sequence\n                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf(\"\\\\\")) + '\"');\n            }\n        }\n        markPartialJSON(\"Unterminated string literal\");\n    };\n    const parseObj = ()=>{\n        index++; // skip initial brace\n        skipBlank();\n        const obj = {};\n        try {\n            while(jsonString[index] !== \"}\"){\n                skipBlank();\n                if (index >= length && Allow.OBJ & allow) return obj;\n                const key = parseStr();\n                skipBlank();\n                index++; // skip colon\n                try {\n                    const value = parseAny();\n                    Object.defineProperty(obj, key, {\n                        value,\n                        writable: true,\n                        enumerable: true,\n                        configurable: true\n                    });\n                } catch (e) {\n                    if (Allow.OBJ & allow) return obj;\n                    else throw e;\n                }\n                skipBlank();\n                if (jsonString[index] === \",\") index++; // skip comma\n            }\n        } catch (e) {\n            if (Allow.OBJ & allow) return obj;\n            else markPartialJSON(\"Expected '}' at end of object\");\n        }\n        index++; // skip final brace\n        return obj;\n    };\n    const parseArr = ()=>{\n        index++; // skip initial bracket\n        const arr = [];\n        try {\n            while(jsonString[index] !== \"]\"){\n                arr.push(parseAny());\n                skipBlank();\n                if (jsonString[index] === \",\") {\n                    index++; // skip comma\n                }\n            }\n        } catch (e) {\n            if (Allow.ARR & allow) {\n                return arr;\n            }\n            markPartialJSON(\"Expected ']' at end of array\");\n        }\n        index++; // skip final bracket\n        return arr;\n    };\n    const parseNum = ()=>{\n        if (index === 0) {\n            if (jsonString === \"-\" && Allow.NUM & allow) markPartialJSON(\"Not sure what '-' is\");\n            try {\n                return JSON.parse(jsonString);\n            } catch (e) {\n                if (Allow.NUM & allow) {\n                    try {\n                        if (\".\" === jsonString[jsonString.length - 1]) return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf(\".\")));\n                        return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf(\"e\")));\n                    } catch (e) {}\n                }\n                throwMalformedError(String(e));\n            }\n        }\n        const start = index;\n        if (jsonString[index] === \"-\") index++;\n        while(jsonString[index] && !\",]}\".includes(jsonString[index]))index++;\n        if (index == length && !(Allow.NUM & allow)) markPartialJSON(\"Unterminated number literal\");\n        try {\n            return JSON.parse(jsonString.substring(start, index));\n        } catch (e) {\n            if (jsonString.substring(start, index) === \"-\" && Allow.NUM & allow) markPartialJSON(\"Not sure what '-' is\");\n            try {\n                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf(\"e\")));\n            } catch (e) {\n                throwMalformedError(String(e));\n            }\n        }\n    };\n    const skipBlank = ()=>{\n        while(index < length && \" \\n\\r\t\".includes(jsonString[index])){\n            index++;\n        }\n    };\n    return parseAny();\n};\n// using this function with malformed JSON is undefined behavior\nconst partialParse = (input)=>parseJSON(input, Allow.ALL ^ Allow.NUM);\n //# sourceMappingURL=parser.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/_vendor/partial-json-parser/parser.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/azure.mjs":
/*!***************************************!*\
  !*** ./node_modules/openai/azure.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureOpenAI: () => (/* binding */ AzureOpenAI)\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _internal_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/utils.mjs */ \"(rsc)/./node_modules/openai/internal/utils.mjs\");\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./client.mjs */ \"(rsc)/./node_modules/openai/client.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n\n\n\n\n/** API Client for interfacing with the Azure OpenAI API. */ class AzureOpenAI extends _client_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAI {\n    /**\n     * API Client for interfacing with the Azure OpenAI API.\n     *\n     * @param {string | undefined} [opts.apiVersion=process.env['OPENAI_API_VERSION'] ?? undefined]\n     * @param {string | undefined} [opts.endpoint=process.env['AZURE_OPENAI_ENDPOINT'] ?? undefined] - Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`\n     * @param {string | undefined} [opts.apiKey=process.env['AZURE_OPENAI_API_KEY'] ?? undefined]\n     * @param {string | undefined} opts.deployment - A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.\n     * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\n     * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL']] - Sets the base URL for the API, e.g. `https://example-resource.azure.openai.com/openai/`.\n     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n     * @param {Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n     * @param {Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n     * @param {DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n     */ constructor({ baseURL = (0,_internal_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.readEnv)(\"OPENAI_BASE_URL\"), apiKey = (0,_internal_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.readEnv)(\"AZURE_OPENAI_API_KEY\"), apiVersion = (0,_internal_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.readEnv)(\"OPENAI_API_VERSION\"), endpoint, deployment, azureADTokenProvider, dangerouslyAllowBrowser, ...opts } = {}){\n        if (!apiVersion) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"The OPENAI_API_VERSION environment variable is missing or empty; either provide it, or instantiate the AzureOpenAI client with an apiVersion option, like new AzureOpenAI({ apiVersion: 'My API Version' }).\");\n        }\n        if (typeof azureADTokenProvider === \"function\") {\n            dangerouslyAllowBrowser = true;\n        }\n        if (!azureADTokenProvider && !apiKey) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"Missing credentials. Please pass one of `apiKey` and `azureADTokenProvider`, or set the `AZURE_OPENAI_API_KEY` environment variable.\");\n        }\n        if (azureADTokenProvider && apiKey) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"The `apiKey` and `azureADTokenProvider` arguments are mutually exclusive; only one can be passed at a time.\");\n        }\n        // define a sentinel value to avoid any typing issues\n        apiKey ?? (apiKey = API_KEY_SENTINEL);\n        opts.defaultQuery = {\n            ...opts.defaultQuery,\n            \"api-version\": apiVersion\n        };\n        if (!baseURL) {\n            if (!endpoint) {\n                endpoint = process.env[\"AZURE_OPENAI_ENDPOINT\"];\n            }\n            if (!endpoint) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"Must provide one of the `baseURL` or `endpoint` arguments, or the `AZURE_OPENAI_ENDPOINT` environment variable\");\n            }\n            baseURL = `${endpoint}/openai`;\n        } else {\n            if (endpoint) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"baseURL and endpoint are mutually exclusive\");\n            }\n        }\n        super({\n            apiKey,\n            baseURL,\n            ...opts,\n            ...dangerouslyAllowBrowser !== undefined ? {\n                dangerouslyAllowBrowser\n            } : {}\n        });\n        this.apiVersion = \"\";\n        this._azureADTokenProvider = azureADTokenProvider;\n        this.apiVersion = apiVersion;\n        this.deploymentName = deployment;\n    }\n    async buildRequest(options, props = {}) {\n        if (_deployments_endpoints.has(options.path) && options.method === \"post\" && options.body !== undefined) {\n            if (!(0,_internal_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isObj)(options.body)) {\n                throw new Error(\"Expected request body to be an object\");\n            }\n            const model = this.deploymentName || options.body[\"model\"] || options.__metadata?.[\"model\"];\n            if (model !== undefined && !this.baseURL.includes(\"/deployments\")) {\n                options.path = `/deployments/${model}${options.path}`;\n            }\n        }\n        return super.buildRequest(options, props);\n    }\n    async _getAzureADToken() {\n        if (typeof this._azureADTokenProvider === \"function\") {\n            const token = await this._azureADTokenProvider();\n            if (!token || typeof token !== \"string\") {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`Expected 'azureADTokenProvider' argument to return a string but it returned ${token}`);\n            }\n            return token;\n        }\n        return undefined;\n    }\n    async authHeaders(opts) {\n        return;\n    }\n    async prepareOptions(opts) {\n        opts.headers = (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n            opts.headers\n        ]);\n        /**\n         * The user should provide a bearer token provider if they want\n         * to use Azure AD authentication. The user shouldn't set the\n         * Authorization header manually because the header is overwritten\n         * with the Azure AD token if a bearer token provider is provided.\n         */ if (opts.headers.values.get(\"Authorization\") || opts.headers.values.get(\"api-key\")) {\n            return super.prepareOptions(opts);\n        }\n        const token = await this._getAzureADToken();\n        if (token) {\n            opts.headers.values.set(\"Authorization\", `Bearer ${token}`);\n        } else if (this.apiKey !== API_KEY_SENTINEL) {\n            opts.headers.values.set(\"api-key\", this.apiKey);\n        } else {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"Unable to handle auth\");\n        }\n        return super.prepareOptions(opts);\n    }\n}\nconst _deployments_endpoints = new Set([\n    \"/completions\",\n    \"/chat/completions\",\n    \"/embeddings\",\n    \"/audio/transcriptions\",\n    \"/audio/translations\",\n    \"/audio/speech\",\n    \"/images/generations\",\n    \"/batches\",\n    \"/images/edits\"\n]);\nconst API_KEY_SENTINEL = \"<Missing Key>\"; //# sourceMappingURL=azure.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/azure.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/client.mjs":
/*!****************************************!*\
  !*** ./node_modules/openai/client.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAI: () => (/* binding */ OpenAI)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/tslib.mjs */ \"(rsc)/./node_modules/openai/internal/tslib.mjs\");\n/* harmony import */ var _internal_utils_uuid_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/utils/uuid.mjs */ \"(rsc)/./node_modules/openai/internal/utils/uuid.mjs\");\n/* harmony import */ var _internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/utils/values.mjs */ \"(rsc)/./node_modules/openai/internal/utils/values.mjs\");\n/* harmony import */ var _internal_utils_sleep_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/utils/sleep.mjs */ \"(rsc)/./node_modules/openai/internal/utils/sleep.mjs\");\n/* harmony import */ var _internal_errors_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/errors.mjs */ \"(rsc)/./node_modules/openai/internal/errors.mjs\");\n/* harmony import */ var _internal_detect_platform_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/detect-platform.mjs */ \"(rsc)/./node_modules/openai/internal/detect-platform.mjs\");\n/* harmony import */ var _internal_shims_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/shims.mjs */ \"(rsc)/./node_modules/openai/internal/shims.mjs\");\n/* harmony import */ var _internal_request_options_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internal/request-options.mjs */ \"(rsc)/./node_modules/openai/internal/request-options.mjs\");\n/* harmony import */ var _internal_qs_index_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./internal/qs/index.mjs */ \"(rsc)/./node_modules/openai/internal/qs/index.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./version.mjs */ \"(rsc)/./node_modules/openai/version.mjs\");\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./core/error.mjs */ \"(rsc)/./node_modules/openai/core/error.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _core_uploads_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./core/uploads.mjs */ \"(rsc)/./node_modules/openai/core/uploads.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/./node_modules/openai/resources/index.mjs\");\n/* harmony import */ var _core_api_promise_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./core/api-promise.mjs */ \"(rsc)/./node_modules/openai/core/api-promise.mjs\");\n/* harmony import */ var _resources_batches_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./resources/batches.mjs */ \"(rsc)/./node_modules/openai/resources/batches.mjs\");\n/* harmony import */ var _resources_completions_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./resources/completions.mjs */ \"(rsc)/./node_modules/openai/resources/completions.mjs\");\n/* harmony import */ var _resources_embeddings_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./resources/embeddings.mjs */ \"(rsc)/./node_modules/openai/resources/embeddings.mjs\");\n/* harmony import */ var _resources_files_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./resources/files.mjs */ \"(rsc)/./node_modules/openai/resources/files.mjs\");\n/* harmony import */ var _resources_images_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./resources/images.mjs */ \"(rsc)/./node_modules/openai/resources/images.mjs\");\n/* harmony import */ var _resources_models_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./resources/models.mjs */ \"(rsc)/./node_modules/openai/resources/models.mjs\");\n/* harmony import */ var _resources_moderations_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./resources/moderations.mjs */ \"(rsc)/./node_modules/openai/resources/moderations.mjs\");\n/* harmony import */ var _resources_webhooks_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./resources/webhooks.mjs */ \"(rsc)/./node_modules/openai/resources/webhooks.mjs\");\n/* harmony import */ var _resources_audio_audio_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./resources/audio/audio.mjs */ \"(rsc)/./node_modules/openai/resources/audio/audio.mjs\");\n/* harmony import */ var _resources_beta_beta_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./resources/beta/beta.mjs */ \"(rsc)/./node_modules/openai/resources/beta/beta.mjs\");\n/* harmony import */ var _resources_chat_chat_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./resources/chat/chat.mjs */ \"(rsc)/./node_modules/openai/resources/chat/chat.mjs\");\n/* harmony import */ var _resources_containers_containers_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./resources/containers/containers.mjs */ \"(rsc)/./node_modules/openai/resources/containers/containers.mjs\");\n/* harmony import */ var _resources_evals_evals_mjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./resources/evals/evals.mjs */ \"(rsc)/./node_modules/openai/resources/evals/evals.mjs\");\n/* harmony import */ var _resources_fine_tuning_fine_tuning_mjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./resources/fine-tuning/fine-tuning.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs\");\n/* harmony import */ var _resources_graders_graders_mjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./resources/graders/graders.mjs */ \"(rsc)/./node_modules/openai/resources/graders/graders.mjs\");\n/* harmony import */ var _resources_responses_responses_mjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./resources/responses/responses.mjs */ \"(rsc)/./node_modules/openai/resources/responses/responses.mjs\");\n/* harmony import */ var _resources_uploads_uploads_mjs__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./resources/uploads/uploads.mjs */ \"(rsc)/./node_modules/openai/resources/uploads/uploads.mjs\");\n/* harmony import */ var _resources_vector_stores_vector_stores_mjs__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./resources/vector-stores/vector-stores.mjs */ \"(rsc)/./node_modules/openai/resources/vector-stores/vector-stores.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./internal/utils/env.mjs */ \"(rsc)/./node_modules/openai/internal/utils/env.mjs\");\n/* harmony import */ var _internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./internal/utils/log.mjs */ \"(rsc)/./node_modules/openai/internal/utils/log.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _OpenAI_instances, _a, _OpenAI_encoder, _OpenAI_baseURLOverridden;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * API Client for interfacing with the OpenAI API.\n */ class OpenAI {\n    /**\n     * API Client for interfacing with the OpenAI API.\n     *\n     * @param {string | undefined} [opts.apiKey=process.env['OPENAI_API_KEY'] ?? undefined]\n     * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\n     * @param {string | null | undefined} [opts.project=process.env['OPENAI_PROJECT_ID'] ?? null]\n     * @param {string | null | undefined} [opts.webhookSecret=process.env['OPENAI_WEBHOOK_SECRET'] ?? null]\n     * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL'] ?? https://api.openai.com/v1] - Override the default base URL for the API.\n     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n     * @param {MergedRequestInit} [opts.fetchOptions] - Additional `RequestInit` options to be passed to `fetch` calls.\n     * @param {Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n     * @param {HeadersLike} opts.defaultHeaders - Default headers to include with every request to the API.\n     * @param {Record<string, string | undefined>} opts.defaultQuery - Default query parameters to include with every request to the API.\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n     */ constructor({ baseURL = (0,_internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_34__.readEnv)(\"OPENAI_BASE_URL\"), apiKey = (0,_internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_34__.readEnv)(\"OPENAI_API_KEY\"), organization = (0,_internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_34__.readEnv)(\"OPENAI_ORG_ID\") ?? null, project = (0,_internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_34__.readEnv)(\"OPENAI_PROJECT_ID\") ?? null, webhookSecret = (0,_internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_34__.readEnv)(\"OPENAI_WEBHOOK_SECRET\") ?? null, ...opts } = {}){\n        _OpenAI_instances.add(this);\n        _OpenAI_encoder.set(this, void 0);\n        this.completions = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Completions(this);\n        this.chat = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Chat(this);\n        this.embeddings = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Embeddings(this);\n        this.files = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Files(this);\n        this.images = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Images(this);\n        this.audio = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Audio(this);\n        this.moderations = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Moderations(this);\n        this.models = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Models(this);\n        this.fineTuning = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.FineTuning(this);\n        this.graders = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Graders(this);\n        this.vectorStores = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.VectorStores(this);\n        this.webhooks = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Webhooks(this);\n        this.beta = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Beta(this);\n        this.batches = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Batches(this);\n        this.uploads = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Uploads(this);\n        this.responses = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Responses(this);\n        this.evals = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Evals(this);\n        this.containers = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Containers(this);\n        if (apiKey === undefined) {\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.OpenAIError(\"The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).\");\n        }\n        const options = {\n            apiKey,\n            organization,\n            project,\n            webhookSecret,\n            ...opts,\n            baseURL: baseURL || `https://api.openai.com/v1`\n        };\n        if (!options.dangerouslyAllowBrowser && (0,_internal_detect_platform_mjs__WEBPACK_IMPORTED_MODULE_5__.isRunningInBrowser)()) {\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.OpenAIError(\"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\\n\\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\\n\");\n        }\n        this.baseURL = options.baseURL;\n        this.timeout = options.timeout ?? _a.DEFAULT_TIMEOUT /* 10 minutes */ ;\n        this.logger = options.logger ?? console;\n        const defaultLogLevel = \"warn\";\n        // Set default logLevel early so that we can log a warning in parseLogLevel.\n        this.logLevel = defaultLogLevel;\n        this.logLevel = (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.parseLogLevel)(options.logLevel, \"ClientOptions.logLevel\", this) ?? (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.parseLogLevel)((0,_internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_34__.readEnv)(\"OPENAI_LOG\"), \"process.env['OPENAI_LOG']\", this) ?? defaultLogLevel;\n        this.fetchOptions = options.fetchOptions;\n        this.maxRetries = options.maxRetries ?? 2;\n        this.fetch = options.fetch ?? _internal_shims_mjs__WEBPACK_IMPORTED_MODULE_6__.getDefaultFetch();\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _OpenAI_encoder, _internal_request_options_mjs__WEBPACK_IMPORTED_MODULE_7__.FallbackEncoder, \"f\");\n        this._options = options;\n        this.apiKey = apiKey;\n        this.organization = organization;\n        this.project = project;\n        this.webhookSecret = webhookSecret;\n    }\n    /**\n     * Create a new client instance re-using the same options given to the current client with optional overriding.\n     */ withOptions(options) {\n        const client = new this.constructor({\n            ...this._options,\n            baseURL: this.baseURL,\n            maxRetries: this.maxRetries,\n            timeout: this.timeout,\n            logger: this.logger,\n            logLevel: this.logLevel,\n            fetch: this.fetch,\n            fetchOptions: this.fetchOptions,\n            apiKey: this.apiKey,\n            organization: this.organization,\n            project: this.project,\n            webhookSecret: this.webhookSecret,\n            ...options\n        });\n        return client;\n    }\n    defaultQuery() {\n        return this._options.defaultQuery;\n    }\n    validateHeaders({ values, nulls }) {\n        return;\n    }\n    async authHeaders(opts) {\n        return (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_33__.buildHeaders)([\n            {\n                Authorization: `Bearer ${this.apiKey}`\n            }\n        ]);\n    }\n    stringifyQuery(query) {\n        return _internal_qs_index_mjs__WEBPACK_IMPORTED_MODULE_8__.stringify(query, {\n            arrayFormat: \"brackets\"\n        });\n    }\n    getUserAgent() {\n        return `${this.constructor.name}/JS ${_version_mjs__WEBPACK_IMPORTED_MODULE_9__.VERSION}`;\n    }\n    defaultIdempotencyKey() {\n        return `stainless-node-retry-${(0,_internal_utils_uuid_mjs__WEBPACK_IMPORTED_MODULE_1__.uuid4)()}`;\n    }\n    makeStatusError(status, error, message, headers) {\n        return _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIError.generate(status, error, message, headers);\n    }\n    buildURL(path, query, defaultBaseURL) {\n        const baseURL = !(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _OpenAI_instances, \"m\", _OpenAI_baseURLOverridden).call(this) && defaultBaseURL || this.baseURL;\n        const url = (0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isAbsoluteURL)(path) ? new URL(path) : new URL(baseURL + (baseURL.endsWith(\"/\") && path.startsWith(\"/\") ? path.slice(1) : path));\n        const defaultQuery = this.defaultQuery();\n        if (!(0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isEmptyObj)(defaultQuery)) {\n            query = {\n                ...defaultQuery,\n                ...query\n            };\n        }\n        if (typeof query === \"object\" && query && !Array.isArray(query)) {\n            url.search = this.stringifyQuery(query);\n        }\n        return url.toString();\n    }\n    /**\n     * Used as a callback for mutating the given `FinalRequestOptions` object.\n     */ async prepareOptions(options) {}\n    /**\n     * Used as a callback for mutating the given `RequestInit` object.\n     *\n     * This is useful for cases where you want to add certain headers based off of\n     * the request properties, e.g. `method` or `url`.\n     */ async prepareRequest(request, { url, options }) {}\n    get(path, opts) {\n        return this.methodRequest(\"get\", path, opts);\n    }\n    post(path, opts) {\n        return this.methodRequest(\"post\", path, opts);\n    }\n    patch(path, opts) {\n        return this.methodRequest(\"patch\", path, opts);\n    }\n    put(path, opts) {\n        return this.methodRequest(\"put\", path, opts);\n    }\n    delete(path, opts) {\n        return this.methodRequest(\"delete\", path, opts);\n    }\n    methodRequest(method, path, opts) {\n        return this.request(Promise.resolve(opts).then((opts)=>{\n            return {\n                method,\n                path,\n                ...opts\n            };\n        }));\n    }\n    request(options, remainingRetries = null) {\n        return new _core_api_promise_mjs__WEBPACK_IMPORTED_MODULE_14__.APIPromise(this, this.makeRequest(options, remainingRetries, undefined));\n    }\n    async makeRequest(optionsInput, retriesRemaining, retryOfRequestLogID) {\n        const options = await optionsInput;\n        const maxRetries = options.maxRetries ?? this.maxRetries;\n        if (retriesRemaining == null) {\n            retriesRemaining = maxRetries;\n        }\n        await this.prepareOptions(options);\n        const { req, url, timeout } = await this.buildRequest(options, {\n            retryCount: maxRetries - retriesRemaining\n        });\n        await this.prepareRequest(req, {\n            url,\n            options\n        });\n        /** Not an API request ID, just for correlating local log entries. */ const requestLogID = \"log_\" + (Math.random() * (1 << 24) | 0).toString(16).padStart(6, \"0\");\n        const retryLogStr = retryOfRequestLogID === undefined ? \"\" : `, retryOf: ${retryOfRequestLogID}`;\n        const startTime = Date.now();\n        (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.loggerFor)(this).debug(`[${requestLogID}] sending request`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.formatRequestDetails)({\n            retryOfRequestLogID,\n            method: options.method,\n            url,\n            options,\n            headers: req.headers\n        }));\n        if (options.signal?.aborted) {\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIUserAbortError();\n        }\n        const controller = new AbortController();\n        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_4__.castToError);\n        const headersTime = Date.now();\n        if (response instanceof Error) {\n            const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n            if (options.signal?.aborted) {\n                throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIUserAbortError();\n            }\n            // detect native connection timeout errors\n            // deno throws \"TypeError: error sending request for url (https://example/): client error (Connect): tcp connect error: Operation timed out (os error 60): Operation timed out (os error 60)\"\n            // undici throws \"TypeError: fetch failed\" with cause \"ConnectTimeoutError: Connect Timeout Error (attempted address: example:443, timeout: 1ms)\"\n            // others do not provide enough information to distinguish timeouts from other connection errors\n            const isTimeout = (0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_4__.isAbortError)(response) || /timed? ?out/i.test(String(response) + (\"cause\" in response ? String(response.cause) : \"\"));\n            if (retriesRemaining) {\n                (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.loggerFor)(this).info(`[${requestLogID}] connection ${isTimeout ? \"timed out\" : \"failed\"} - ${retryMessage}`);\n                (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.loggerFor)(this).debug(`[${requestLogID}] connection ${isTimeout ? \"timed out\" : \"failed\"} (${retryMessage})`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.formatRequestDetails)({\n                    retryOfRequestLogID,\n                    url,\n                    durationMs: headersTime - startTime,\n                    message: response.message\n                }));\n                return this.retryRequest(options, retriesRemaining, retryOfRequestLogID ?? requestLogID);\n            }\n            (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.loggerFor)(this).info(`[${requestLogID}] connection ${isTimeout ? \"timed out\" : \"failed\"} - error; no more retries left`);\n            (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.loggerFor)(this).debug(`[${requestLogID}] connection ${isTimeout ? \"timed out\" : \"failed\"} (error; no more retries left)`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.formatRequestDetails)({\n                retryOfRequestLogID,\n                url,\n                durationMs: headersTime - startTime,\n                message: response.message\n            }));\n            if (isTimeout) {\n                throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIConnectionTimeoutError();\n            }\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIConnectionError({\n                cause: response\n            });\n        }\n        const specialHeaders = [\n            ...response.headers.entries()\n        ].filter(([name])=>name === \"x-request-id\").map(([name, value])=>\", \" + name + \": \" + JSON.stringify(value)).join(\"\");\n        const responseInfo = `[${requestLogID}${retryLogStr}${specialHeaders}] ${req.method} ${url} ${response.ok ? \"succeeded\" : \"failed\"} with status ${response.status} in ${headersTime - startTime}ms`;\n        if (!response.ok) {\n            const shouldRetry = await this.shouldRetry(response);\n            if (retriesRemaining && shouldRetry) {\n                const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n                // We don't need the body of this response.\n                await _internal_shims_mjs__WEBPACK_IMPORTED_MODULE_6__.CancelReadableStream(response.body);\n                (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.loggerFor)(this).info(`${responseInfo} - ${retryMessage}`);\n                (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.loggerFor)(this).debug(`[${requestLogID}] response error (${retryMessage})`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.formatRequestDetails)({\n                    retryOfRequestLogID,\n                    url: response.url,\n                    status: response.status,\n                    headers: response.headers,\n                    durationMs: headersTime - startTime\n                }));\n                return this.retryRequest(options, retriesRemaining, retryOfRequestLogID ?? requestLogID, response.headers);\n            }\n            const retryMessage = shouldRetry ? `error; no more retries left` : `error; not retryable`;\n            (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.loggerFor)(this).info(`${responseInfo} - ${retryMessage}`);\n            const errText = await response.text().catch((err)=>(0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_4__.castToError)(err).message);\n            const errJSON = (0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.safeJSON)(errText);\n            const errMessage = errJSON ? undefined : errText;\n            (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.loggerFor)(this).debug(`[${requestLogID}] response error (${retryMessage})`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.formatRequestDetails)({\n                retryOfRequestLogID,\n                url: response.url,\n                status: response.status,\n                headers: response.headers,\n                message: errMessage,\n                durationMs: Date.now() - startTime\n            }));\n            const err = this.makeStatusError(response.status, errJSON, errMessage, response.headers);\n            throw err;\n        }\n        (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.loggerFor)(this).info(responseInfo);\n        (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.loggerFor)(this).debug(`[${requestLogID}] response start`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_35__.formatRequestDetails)({\n            retryOfRequestLogID,\n            url: response.url,\n            status: response.status,\n            headers: response.headers,\n            durationMs: headersTime - startTime\n        }));\n        return {\n            response,\n            options,\n            controller,\n            requestLogID,\n            retryOfRequestLogID,\n            startTime\n        };\n    }\n    getAPIList(path, Page, opts) {\n        return this.requestAPIList(Page, {\n            method: \"get\",\n            path,\n            ...opts\n        });\n    }\n    requestAPIList(Page, options) {\n        const request = this.makeRequest(options, null, undefined);\n        return new _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_11__.PagePromise(this, request, Page);\n    }\n    async fetchWithTimeout(url, init, ms, controller) {\n        const { signal, method, ...options } = init || {};\n        if (signal) signal.addEventListener(\"abort\", ()=>controller.abort());\n        const timeout = setTimeout(()=>controller.abort(), ms);\n        const isReadableBody = globalThis.ReadableStream && options.body instanceof globalThis.ReadableStream || typeof options.body === \"object\" && options.body !== null && Symbol.asyncIterator in options.body;\n        const fetchOptions = {\n            signal: controller.signal,\n            ...isReadableBody ? {\n                duplex: \"half\"\n            } : {},\n            method: \"GET\",\n            ...options\n        };\n        if (method) {\n            // Custom methods like 'patch' need to be uppercased\n            // See https://github.com/nodejs/undici/issues/2294\n            fetchOptions.method = method.toUpperCase();\n        }\n        try {\n            // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n            return await this.fetch.call(undefined, url, fetchOptions);\n        } finally{\n            clearTimeout(timeout);\n        }\n    }\n    async shouldRetry(response) {\n        // Note this is not a standard header.\n        const shouldRetryHeader = response.headers.get(\"x-should-retry\");\n        // If the server explicitly says whether or not to retry, obey.\n        if (shouldRetryHeader === \"true\") return true;\n        if (shouldRetryHeader === \"false\") return false;\n        // Retry on request timeouts.\n        if (response.status === 408) return true;\n        // Retry on lock timeouts.\n        if (response.status === 409) return true;\n        // Retry on rate limits.\n        if (response.status === 429) return true;\n        // Retry internal errors.\n        if (response.status >= 500) return true;\n        return false;\n    }\n    async retryRequest(options, retriesRemaining, requestLogID, responseHeaders) {\n        let timeoutMillis;\n        // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n        const retryAfterMillisHeader = responseHeaders?.get(\"retry-after-ms\");\n        if (retryAfterMillisHeader) {\n            const timeoutMs = parseFloat(retryAfterMillisHeader);\n            if (!Number.isNaN(timeoutMs)) {\n                timeoutMillis = timeoutMs;\n            }\n        }\n        // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        const retryAfterHeader = responseHeaders?.get(\"retry-after\");\n        if (retryAfterHeader && !timeoutMillis) {\n            const timeoutSeconds = parseFloat(retryAfterHeader);\n            if (!Number.isNaN(timeoutSeconds)) {\n                timeoutMillis = timeoutSeconds * 1000;\n            } else {\n                timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n            }\n        }\n        // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n        // just do what it says, but otherwise calculate a default\n        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n            const maxRetries = options.maxRetries ?? this.maxRetries;\n            timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n        }\n        await (0,_internal_utils_sleep_mjs__WEBPACK_IMPORTED_MODULE_3__.sleep)(timeoutMillis);\n        return this.makeRequest(options, retriesRemaining - 1, requestLogID);\n    }\n    calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {\n        const initialRetryDelay = 0.5;\n        const maxRetryDelay = 8.0;\n        const numRetries = maxRetries - retriesRemaining;\n        // Apply exponential backoff, but not more than the max.\n        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n        // Apply some jitter, take up to at most 25 percent of the retry time.\n        const jitter = 1 - Math.random() * 0.25;\n        return sleepSeconds * jitter * 1000;\n    }\n    async buildRequest(inputOptions, { retryCount = 0 } = {}) {\n        const options = {\n            ...inputOptions\n        };\n        const { method, path, query, defaultBaseURL } = options;\n        const url = this.buildURL(path, query, defaultBaseURL);\n        if (\"timeout\" in options) (0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.validatePositiveInteger)(\"timeout\", options.timeout);\n        options.timeout = options.timeout ?? this.timeout;\n        const { bodyHeaders, body } = this.buildBody({\n            options\n        });\n        const reqHeaders = await this.buildHeaders({\n            options: inputOptions,\n            method,\n            bodyHeaders,\n            retryCount\n        });\n        const req = {\n            method,\n            headers: reqHeaders,\n            ...options.signal && {\n                signal: options.signal\n            },\n            ...globalThis.ReadableStream && body instanceof globalThis.ReadableStream && {\n                duplex: \"half\"\n            },\n            ...body && {\n                body\n            },\n            ...this.fetchOptions ?? {},\n            ...options.fetchOptions ?? {}\n        };\n        return {\n            req,\n            url,\n            timeout: options.timeout\n        };\n    }\n    async buildHeaders({ options, method, bodyHeaders, retryCount }) {\n        let idempotencyHeaders = {};\n        if (this.idempotencyHeader && method !== \"get\") {\n            if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n            idempotencyHeaders[this.idempotencyHeader] = options.idempotencyKey;\n        }\n        const headers = (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_33__.buildHeaders)([\n            idempotencyHeaders,\n            {\n                Accept: \"application/json\",\n                \"User-Agent\": this.getUserAgent(),\n                \"X-Stainless-Retry-Count\": String(retryCount),\n                ...options.timeout ? {\n                    \"X-Stainless-Timeout\": String(Math.trunc(options.timeout / 1000))\n                } : {},\n                ...(0,_internal_detect_platform_mjs__WEBPACK_IMPORTED_MODULE_5__.getPlatformHeaders)(),\n                \"OpenAI-Organization\": this.organization,\n                \"OpenAI-Project\": this.project\n            },\n            await this.authHeaders(options),\n            this._options.defaultHeaders,\n            bodyHeaders,\n            options.headers\n        ]);\n        this.validateHeaders(headers);\n        return headers.values;\n    }\n    buildBody({ options: { body, headers: rawHeaders } }) {\n        if (!body) {\n            return {\n                bodyHeaders: undefined,\n                body: undefined\n            };\n        }\n        const headers = (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_33__.buildHeaders)([\n            rawHeaders\n        ]);\n        if (// Pass raw type verbatim\n        ArrayBuffer.isView(body) || body instanceof ArrayBuffer || body instanceof DataView || typeof body === \"string\" && // Preserve legacy string encoding behavior for now\n        headers.values.has(\"content-type\") || // `Blob` is superset of `File`\n        body instanceof Blob || // `FormData` -> `multipart/form-data`\n        body instanceof FormData || // `URLSearchParams` -> `application/x-www-form-urlencoded`\n        body instanceof URLSearchParams || // Send chunked stream (each chunk has own `length`)\n        globalThis.ReadableStream && body instanceof globalThis.ReadableStream) {\n            return {\n                bodyHeaders: undefined,\n                body: body\n            };\n        } else if (typeof body === \"object\" && (Symbol.asyncIterator in body || Symbol.iterator in body && \"next\" in body && typeof body.next === \"function\")) {\n            return {\n                bodyHeaders: undefined,\n                body: _internal_shims_mjs__WEBPACK_IMPORTED_MODULE_6__.ReadableStreamFrom(body)\n            };\n        } else {\n            return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _OpenAI_encoder, \"f\").call(this, {\n                body,\n                headers\n            });\n        }\n    }\n}\n_a = OpenAI, _OpenAI_encoder = new WeakMap(), _OpenAI_instances = new WeakSet(), _OpenAI_baseURLOverridden = function _OpenAI_baseURLOverridden() {\n    return this.baseURL !== \"https://api.openai.com/v1\";\n};\nOpenAI.OpenAI = _a;\nOpenAI.DEFAULT_TIMEOUT = 600000; // 10 minutes\nOpenAI.OpenAIError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.OpenAIError;\nOpenAI.APIError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIError;\nOpenAI.APIConnectionError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIConnectionError;\nOpenAI.APIConnectionTimeoutError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIConnectionTimeoutError;\nOpenAI.APIUserAbortError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIUserAbortError;\nOpenAI.NotFoundError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.NotFoundError;\nOpenAI.ConflictError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.ConflictError;\nOpenAI.RateLimitError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.RateLimitError;\nOpenAI.BadRequestError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.BadRequestError;\nOpenAI.AuthenticationError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.AuthenticationError;\nOpenAI.InternalServerError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.InternalServerError;\nOpenAI.PermissionDeniedError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.PermissionDeniedError;\nOpenAI.UnprocessableEntityError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.UnprocessableEntityError;\nOpenAI.InvalidWebhookSignatureError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidWebhookSignatureError;\nOpenAI.toFile = _core_uploads_mjs__WEBPACK_IMPORTED_MODULE_12__.toFile;\nOpenAI.Completions = _resources_completions_mjs__WEBPACK_IMPORTED_MODULE_16__.Completions;\nOpenAI.Chat = _resources_chat_chat_mjs__WEBPACK_IMPORTED_MODULE_25__.Chat;\nOpenAI.Embeddings = _resources_embeddings_mjs__WEBPACK_IMPORTED_MODULE_17__.Embeddings;\nOpenAI.Files = _resources_files_mjs__WEBPACK_IMPORTED_MODULE_18__.Files;\nOpenAI.Images = _resources_images_mjs__WEBPACK_IMPORTED_MODULE_19__.Images;\nOpenAI.Audio = _resources_audio_audio_mjs__WEBPACK_IMPORTED_MODULE_23__.Audio;\nOpenAI.Moderations = _resources_moderations_mjs__WEBPACK_IMPORTED_MODULE_21__.Moderations;\nOpenAI.Models = _resources_models_mjs__WEBPACK_IMPORTED_MODULE_20__.Models;\nOpenAI.FineTuning = _resources_fine_tuning_fine_tuning_mjs__WEBPACK_IMPORTED_MODULE_28__.FineTuning;\nOpenAI.Graders = _resources_graders_graders_mjs__WEBPACK_IMPORTED_MODULE_29__.Graders;\nOpenAI.VectorStores = _resources_vector_stores_vector_stores_mjs__WEBPACK_IMPORTED_MODULE_32__.VectorStores;\nOpenAI.Webhooks = _resources_webhooks_mjs__WEBPACK_IMPORTED_MODULE_22__.Webhooks;\nOpenAI.Beta = _resources_beta_beta_mjs__WEBPACK_IMPORTED_MODULE_24__.Beta;\nOpenAI.Batches = _resources_batches_mjs__WEBPACK_IMPORTED_MODULE_15__.Batches;\nOpenAI.Uploads = _resources_uploads_uploads_mjs__WEBPACK_IMPORTED_MODULE_31__.Uploads;\nOpenAI.Responses = _resources_responses_responses_mjs__WEBPACK_IMPORTED_MODULE_30__.Responses;\nOpenAI.Evals = _resources_evals_evals_mjs__WEBPACK_IMPORTED_MODULE_27__.Evals;\nOpenAI.Containers = _resources_containers_containers_mjs__WEBPACK_IMPORTED_MODULE_26__.Containers; //# sourceMappingURL=client.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/client.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/core/api-promise.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/core/api-promise.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIPromise: () => (/* binding */ APIPromise)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/./node_modules/openai/internal/tslib.mjs\");\n/* harmony import */ var _internal_parse_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/parse.mjs */ \"(rsc)/./node_modules/openai/internal/parse.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _APIPromise_client;\n\n\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */ class APIPromise extends Promise {\n    constructor(client, responsePromise, parseResponse = _internal_parse_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultParseResponse){\n        super((resolve)=>{\n            // this is maybe a bit weird but this has to be a no-op to not implicitly\n            // parse the response body; instead .then, .catch, .finally are overridden\n            // to parse the response\n            resolve(null);\n        });\n        this.responsePromise = responsePromise;\n        this.parseResponse = parseResponse;\n        _APIPromise_client.set(this, void 0);\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _APIPromise_client, client, \"f\");\n    }\n    _thenUnwrap(transform) {\n        return new APIPromise((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _APIPromise_client, \"f\"), this.responsePromise, async (client, props)=>(0,_internal_parse_mjs__WEBPACK_IMPORTED_MODULE_1__.addRequestID)(transform(await this.parseResponse(client, props), props), props.response));\n    }\n    /**\n     * Gets the raw `Response` instance instead of parsing the response\n     * data.\n     *\n     * If you want to parse the response body but still get the `Response`\n     * instance, you can use {@link withResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n     * to your `tsconfig.json`.\n     */ asResponse() {\n        return this.responsePromise.then((p)=>p.response);\n    }\n    /**\n     * Gets the parsed response data, the raw `Response` instance and the ID of the request,\n     * returned via the X-Request-ID header which is useful for debugging requests and reporting\n     * issues to OpenAI.\n     *\n     * If you just want to get the raw `Response` instance without parsing it,\n     * you can use {@link asResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n     * to your `tsconfig.json`.\n     */ async withResponse() {\n        const [data, response] = await Promise.all([\n            this.parse(),\n            this.asResponse()\n        ]);\n        return {\n            data,\n            response,\n            request_id: response.headers.get(\"x-request-id\")\n        };\n    }\n    parse() {\n        if (!this.parsedPromise) {\n            this.parsedPromise = this.responsePromise.then((data)=>this.parseResponse((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _APIPromise_client, \"f\"), data));\n        }\n        return this.parsedPromise;\n    }\n    then(onfulfilled, onrejected) {\n        return this.parse().then(onfulfilled, onrejected);\n    }\n    catch(onrejected) {\n        return this.parse().catch(onrejected);\n    }\n    finally(onfinally) {\n        return this.parse().finally(onfinally);\n    }\n}\n_APIPromise_client = new WeakMap(); //# sourceMappingURL=api-promise.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2NvcmUvYXBpLXByb21pc2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNGQUFzRjtBQUN0RixJQUFJQTtBQUNtRjtBQUNYO0FBQzVFOzs7Q0FHQyxHQUNNLE1BQU1LLG1CQUFtQkM7SUFDNUJDLFlBQVlDLE1BQU0sRUFBRUMsZUFBZSxFQUFFQyxnQkFBZ0JQLHFFQUFvQixDQUFFO1FBQ3ZFLEtBQUssQ0FBQyxDQUFDUTtZQUNILHlFQUF5RTtZQUN6RSwwRUFBMEU7WUFDMUUsd0JBQXdCO1lBQ3hCQSxRQUFRO1FBQ1o7UUFDQSxJQUFJLENBQUNGLGVBQWUsR0FBR0E7UUFDdkIsSUFBSSxDQUFDQyxhQUFhLEdBQUdBO1FBQ3JCVixtQkFBbUJZLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSztRQUNsQ1YsMkVBQXNCQSxDQUFDLElBQUksRUFBRUYsb0JBQW9CUSxRQUFRO0lBQzdEO0lBQ0FLLFlBQVlDLFNBQVMsRUFBRTtRQUNuQixPQUFPLElBQUlULFdBQVdKLDJFQUFzQkEsQ0FBQyxJQUFJLEVBQUVELG9CQUFvQixNQUFNLElBQUksQ0FBQ1MsZUFBZSxFQUFFLE9BQU9ELFFBQVFPLFFBQVVYLGlFQUFZQSxDQUFDVSxVQUFVLE1BQU0sSUFBSSxDQUFDSixhQUFhLENBQUNGLFFBQVFPLFFBQVFBLFFBQVFBLE1BQU1DLFFBQVE7SUFDdE47SUFDQTs7Ozs7Ozs7OztLQVVDLEdBQ0RDLGFBQWE7UUFDVCxPQUFPLElBQUksQ0FBQ1IsZUFBZSxDQUFDUyxJQUFJLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRUgsUUFBUTtJQUN0RDtJQUNBOzs7Ozs7Ozs7OztLQVdDLEdBQ0QsTUFBTUksZUFBZTtRQUNqQixNQUFNLENBQUNDLE1BQU1MLFNBQVMsR0FBRyxNQUFNVixRQUFRZ0IsR0FBRyxDQUFDO1lBQUMsSUFBSSxDQUFDQyxLQUFLO1lBQUksSUFBSSxDQUFDTixVQUFVO1NBQUc7UUFDNUUsT0FBTztZQUFFSTtZQUFNTDtZQUFVUSxZQUFZUixTQUFTUyxPQUFPLENBQUNDLEdBQUcsQ0FBQztRQUFnQjtJQUM5RTtJQUNBSCxRQUFRO1FBQ0osSUFBSSxDQUFDLElBQUksQ0FBQ0ksYUFBYSxFQUFFO1lBQ3JCLElBQUksQ0FBQ0EsYUFBYSxHQUFHLElBQUksQ0FBQ2xCLGVBQWUsQ0FBQ1MsSUFBSSxDQUFDLENBQUNHLE9BQVMsSUFBSSxDQUFDWCxhQUFhLENBQUNULDJFQUFzQkEsQ0FBQyxJQUFJLEVBQUVELG9CQUFvQixNQUFNcUI7UUFDdkk7UUFDQSxPQUFPLElBQUksQ0FBQ00sYUFBYTtJQUM3QjtJQUNBVCxLQUFLVSxXQUFXLEVBQUVDLFVBQVUsRUFBRTtRQUMxQixPQUFPLElBQUksQ0FBQ04sS0FBSyxHQUFHTCxJQUFJLENBQUNVLGFBQWFDO0lBQzFDO0lBQ0FDLE1BQU1ELFVBQVUsRUFBRTtRQUNkLE9BQU8sSUFBSSxDQUFDTixLQUFLLEdBQUdPLEtBQUssQ0FBQ0Q7SUFDOUI7SUFDQUUsUUFBUUMsU0FBUyxFQUFFO1FBQ2YsT0FBTyxJQUFJLENBQUNULEtBQUssR0FBR1EsT0FBTyxDQUFDQztJQUNoQztBQUNKO0FBQ0FoQyxxQkFBcUIsSUFBSWlDLFdBQ3pCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9jb3JlL2FwaS1wcm9taXNlLm1qcz82N2VjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG52YXIgX0FQSVByb21pc2VfY2xpZW50O1xuaW1wb3J0IHsgX19jbGFzc1ByaXZhdGVGaWVsZEdldCwgX19jbGFzc1ByaXZhdGVGaWVsZFNldCB9IGZyb20gXCIuLi9pbnRlcm5hbC90c2xpYi5tanNcIjtcbmltcG9ydCB7IGRlZmF1bHRQYXJzZVJlc3BvbnNlLCBhZGRSZXF1ZXN0SUQsIH0gZnJvbSBcIi4uL2ludGVybmFsL3BhcnNlLm1qc1wiO1xuLyoqXG4gKiBBIHN1YmNsYXNzIG9mIGBQcm9taXNlYCBwcm92aWRpbmcgYWRkaXRpb25hbCBoZWxwZXIgbWV0aG9kc1xuICogZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIFNESy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFQSVByb21pc2UgZXh0ZW5kcyBQcm9taXNlIHtcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQsIHJlc3BvbnNlUHJvbWlzZSwgcGFyc2VSZXNwb25zZSA9IGRlZmF1bHRQYXJzZVJlc3BvbnNlKSB7XG4gICAgICAgIHN1cGVyKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG1heWJlIGEgYml0IHdlaXJkIGJ1dCB0aGlzIGhhcyB0byBiZSBhIG5vLW9wIHRvIG5vdCBpbXBsaWNpdGx5XG4gICAgICAgICAgICAvLyBwYXJzZSB0aGUgcmVzcG9uc2UgYm9keTsgaW5zdGVhZCAudGhlbiwgLmNhdGNoLCAuZmluYWxseSBhcmUgb3ZlcnJpZGRlblxuICAgICAgICAgICAgLy8gdG8gcGFyc2UgdGhlIHJlc3BvbnNlXG4gICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZXNwb25zZVByb21pc2UgPSByZXNwb25zZVByb21pc2U7XG4gICAgICAgIHRoaXMucGFyc2VSZXNwb25zZSA9IHBhcnNlUmVzcG9uc2U7XG4gICAgICAgIF9BUElQcm9taXNlX2NsaWVudC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQVBJUHJvbWlzZV9jbGllbnQsIGNsaWVudCwgXCJmXCIpO1xuICAgIH1cbiAgICBfdGhlblVud3JhcCh0cmFuc2Zvcm0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBUElQcm9taXNlKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FQSVByb21pc2VfY2xpZW50LCBcImZcIiksIHRoaXMucmVzcG9uc2VQcm9taXNlLCBhc3luYyAoY2xpZW50LCBwcm9wcykgPT4gYWRkUmVxdWVzdElEKHRyYW5zZm9ybShhd2FpdCB0aGlzLnBhcnNlUmVzcG9uc2UoY2xpZW50LCBwcm9wcyksIHByb3BzKSwgcHJvcHMucmVzcG9uc2UpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcmF3IGBSZXNwb25zZWAgaW5zdGFuY2UgaW5zdGVhZCBvZiBwYXJzaW5nIHRoZSByZXNwb25zZVxuICAgICAqIGRhdGEuXG4gICAgICpcbiAgICAgKiBJZiB5b3Ugd2FudCB0byBwYXJzZSB0aGUgcmVzcG9uc2UgYm9keSBidXQgc3RpbGwgZ2V0IHRoZSBgUmVzcG9uc2VgXG4gICAgICogaW5zdGFuY2UsIHlvdSBjYW4gdXNlIHtAbGluayB3aXRoUmVzcG9uc2UoKX0uXG4gICAgICpcbiAgICAgKiDwn5GLIEdldHRpbmcgdGhlIHdyb25nIFR5cGVTY3JpcHQgdHlwZSBmb3IgYFJlc3BvbnNlYD9cbiAgICAgKiBUcnkgc2V0dGluZyBgXCJtb2R1bGVSZXNvbHV0aW9uXCI6IFwiTm9kZU5leHRcImAgb3IgYWRkIGBcImxpYlwiOiBbXCJET01cIl1gXG4gICAgICogdG8geW91ciBgdHNjb25maWcuanNvbmAuXG4gICAgICovXG4gICAgYXNSZXNwb25zZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uc2VQcm9taXNlLnRoZW4oKHApID0+IHAucmVzcG9uc2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwYXJzZWQgcmVzcG9uc2UgZGF0YSwgdGhlIHJhdyBgUmVzcG9uc2VgIGluc3RhbmNlIGFuZCB0aGUgSUQgb2YgdGhlIHJlcXVlc3QsXG4gICAgICogcmV0dXJuZWQgdmlhIHRoZSBYLVJlcXVlc3QtSUQgaGVhZGVyIHdoaWNoIGlzIHVzZWZ1bCBmb3IgZGVidWdnaW5nIHJlcXVlc3RzIGFuZCByZXBvcnRpbmdcbiAgICAgKiBpc3N1ZXMgdG8gT3BlbkFJLlxuICAgICAqXG4gICAgICogSWYgeW91IGp1c3Qgd2FudCB0byBnZXQgdGhlIHJhdyBgUmVzcG9uc2VgIGluc3RhbmNlIHdpdGhvdXQgcGFyc2luZyBpdCxcbiAgICAgKiB5b3UgY2FuIHVzZSB7QGxpbmsgYXNSZXNwb25zZSgpfS5cbiAgICAgKlxuICAgICAqIPCfkYsgR2V0dGluZyB0aGUgd3JvbmcgVHlwZVNjcmlwdCB0eXBlIGZvciBgUmVzcG9uc2VgP1xuICAgICAqIFRyeSBzZXR0aW5nIGBcIm1vZHVsZVJlc29sdXRpb25cIjogXCJOb2RlTmV4dFwiYCBvciBhZGQgYFwibGliXCI6IFtcIkRPTVwiXWBcbiAgICAgKiB0byB5b3VyIGB0c2NvbmZpZy5qc29uYC5cbiAgICAgKi9cbiAgICBhc3luYyB3aXRoUmVzcG9uc2UoKSB7XG4gICAgICAgIGNvbnN0IFtkYXRhLCByZXNwb25zZV0gPSBhd2FpdCBQcm9taXNlLmFsbChbdGhpcy5wYXJzZSgpLCB0aGlzLmFzUmVzcG9uc2UoKV0pO1xuICAgICAgICByZXR1cm4geyBkYXRhLCByZXNwb25zZSwgcmVxdWVzdF9pZDogcmVzcG9uc2UuaGVhZGVycy5nZXQoJ3gtcmVxdWVzdC1pZCcpIH07XG4gICAgfVxuICAgIHBhcnNlKCkge1xuICAgICAgICBpZiAoIXRoaXMucGFyc2VkUHJvbWlzZSkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZWRQcm9taXNlID0gdGhpcy5yZXNwb25zZVByb21pc2UudGhlbigoZGF0YSkgPT4gdGhpcy5wYXJzZVJlc3BvbnNlKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FQSVByb21pc2VfY2xpZW50LCBcImZcIiksIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZWRQcm9taXNlO1xuICAgIH1cbiAgICB0aGVuKG9uZnVsZmlsbGVkLCBvbnJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlKCkudGhlbihvbmZ1bGZpbGxlZCwgb25yZWplY3RlZCk7XG4gICAgfVxuICAgIGNhdGNoKG9ucmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2UoKS5jYXRjaChvbnJlamVjdGVkKTtcbiAgICB9XG4gICAgZmluYWxseShvbmZpbmFsbHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2UoKS5maW5hbGx5KG9uZmluYWxseSk7XG4gICAgfVxufVxuX0FQSVByb21pc2VfY2xpZW50ID0gbmV3IFdlYWtNYXAoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwaS1wcm9taXNlLm1qcy5tYXAiXSwibmFtZXMiOlsiX0FQSVByb21pc2VfY2xpZW50IiwiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJkZWZhdWx0UGFyc2VSZXNwb25zZSIsImFkZFJlcXVlc3RJRCIsIkFQSVByb21pc2UiLCJQcm9taXNlIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJyZXNwb25zZVByb21pc2UiLCJwYXJzZVJlc3BvbnNlIiwicmVzb2x2ZSIsInNldCIsIl90aGVuVW53cmFwIiwidHJhbnNmb3JtIiwicHJvcHMiLCJyZXNwb25zZSIsImFzUmVzcG9uc2UiLCJ0aGVuIiwicCIsIndpdGhSZXNwb25zZSIsImRhdGEiLCJhbGwiLCJwYXJzZSIsInJlcXVlc3RfaWQiLCJoZWFkZXJzIiwiZ2V0IiwicGFyc2VkUHJvbWlzZSIsIm9uZnVsZmlsbGVkIiwib25yZWplY3RlZCIsImNhdGNoIiwiZmluYWxseSIsIm9uZmluYWxseSIsIldlYWtNYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/core/api-promise.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/core/error.mjs":
/*!********************************************!*\
  !*** ./node_modules/openai/core/error.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* binding */ APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* binding */ APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   APIUserAbortError: () => (/* binding */ APIUserAbortError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   ContentFilterFinishReasonError: () => (/* binding */ ContentFilterFinishReasonError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   InvalidWebhookSignatureError: () => (/* binding */ InvalidWebhookSignatureError),\n/* harmony export */   LengthFinishReasonError: () => (/* binding */ LengthFinishReasonError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   OpenAIError: () => (/* binding */ OpenAIError),\n/* harmony export */   PermissionDeniedError: () => (/* binding */ PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* binding */ UnprocessableEntityError)\n/* harmony export */ });\n/* harmony import */ var _internal_errors_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/errors.mjs */ \"(rsc)/./node_modules/openai/internal/errors.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass OpenAIError extends Error {\n}\nclass APIError extends OpenAIError {\n    constructor(status, error, message, headers){\n        super(`${APIError.makeMessage(status, error, message)}`);\n        this.status = status;\n        this.headers = headers;\n        this.requestID = headers?.get(\"x-request-id\");\n        this.error = error;\n        const data = error;\n        this.code = data?.[\"code\"];\n        this.param = data?.[\"param\"];\n        this.type = data?.[\"type\"];\n    }\n    static makeMessage(status, error, message) {\n        const msg = error?.message ? typeof error.message === \"string\" ? error.message : JSON.stringify(error.message) : error ? JSON.stringify(error) : message;\n        if (status && msg) {\n            return `${status} ${msg}`;\n        }\n        if (status) {\n            return `${status} status code (no body)`;\n        }\n        if (msg) {\n            return msg;\n        }\n        return \"(no status code or body)\";\n    }\n    static generate(status, errorResponse, message, headers) {\n        if (!status || !headers) {\n            return new APIConnectionError({\n                message,\n                cause: (0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_0__.castToError)(errorResponse)\n            });\n        }\n        const error = errorResponse?.[\"error\"];\n        if (status === 400) {\n            return new BadRequestError(status, error, message, headers);\n        }\n        if (status === 401) {\n            return new AuthenticationError(status, error, message, headers);\n        }\n        if (status === 403) {\n            return new PermissionDeniedError(status, error, message, headers);\n        }\n        if (status === 404) {\n            return new NotFoundError(status, error, message, headers);\n        }\n        if (status === 409) {\n            return new ConflictError(status, error, message, headers);\n        }\n        if (status === 422) {\n            return new UnprocessableEntityError(status, error, message, headers);\n        }\n        if (status === 429) {\n            return new RateLimitError(status, error, message, headers);\n        }\n        if (status >= 500) {\n            return new InternalServerError(status, error, message, headers);\n        }\n        return new APIError(status, error, message, headers);\n    }\n}\nclass APIUserAbortError extends APIError {\n    constructor({ message } = {}){\n        super(undefined, undefined, message || \"Request was aborted.\", undefined);\n    }\n}\nclass APIConnectionError extends APIError {\n    constructor({ message, cause }){\n        super(undefined, undefined, message || \"Connection error.\", undefined);\n        // in some environments the 'cause' property is already declared\n        // @ts-ignore\n        if (cause) this.cause = cause;\n    }\n}\nclass APIConnectionTimeoutError extends APIConnectionError {\n    constructor({ message } = {}){\n        super({\n            message: message ?? \"Request timed out.\"\n        });\n    }\n}\nclass BadRequestError extends APIError {\n}\nclass AuthenticationError extends APIError {\n}\nclass PermissionDeniedError extends APIError {\n}\nclass NotFoundError extends APIError {\n}\nclass ConflictError extends APIError {\n}\nclass UnprocessableEntityError extends APIError {\n}\nclass RateLimitError extends APIError {\n}\nclass InternalServerError extends APIError {\n}\nclass LengthFinishReasonError extends OpenAIError {\n    constructor(){\n        super(`Could not parse response content as the length limit was reached`);\n    }\n}\nclass ContentFilterFinishReasonError extends OpenAIError {\n    constructor(){\n        super(`Could not parse response content as the request was rejected by the content filter`);\n    }\n}\nclass InvalidWebhookSignatureError extends Error {\n    constructor(message){\n        super(message);\n    }\n} //# sourceMappingURL=error.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/core/error.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/core/pagination.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/core/pagination.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractPage: () => (/* binding */ AbstractPage),\n/* harmony export */   CursorPage: () => (/* binding */ CursorPage),\n/* harmony export */   Page: () => (/* binding */ Page),\n/* harmony export */   PagePromise: () => (/* binding */ PagePromise)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/./node_modules/openai/internal/tslib.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/openai/core/error.mjs\");\n/* harmony import */ var _internal_parse_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/parse.mjs */ \"(rsc)/./node_modules/openai/internal/parse.mjs\");\n/* harmony import */ var _api_promise_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api-promise.mjs */ \"(rsc)/./node_modules/openai/core/api-promise.mjs\");\n/* harmony import */ var _internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../internal/utils/values.mjs */ \"(rsc)/./node_modules/openai/internal/utils/values.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _AbstractPage_client;\n\n\n\n\n\nclass AbstractPage {\n    constructor(client, response, body, options){\n        _AbstractPage_client.set(this, void 0);\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AbstractPage_client, client, \"f\");\n        this.options = options;\n        this.response = response;\n        this.body = body;\n    }\n    hasNextPage() {\n        const items = this.getPaginatedItems();\n        if (!items.length) return false;\n        return this.nextPageRequestOptions() != null;\n    }\n    async getNextPage() {\n        const nextOptions = this.nextPageRequestOptions();\n        if (!nextOptions) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.\");\n        }\n        return await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractPage_client, \"f\").requestAPIList(this.constructor, nextOptions);\n    }\n    async *iterPages() {\n        let page = this;\n        yield page;\n        while(page.hasNextPage()){\n            page = await page.getNextPage();\n            yield page;\n        }\n    }\n    async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n        for await (const page of this.iterPages()){\n            for (const item of page.getPaginatedItems()){\n                yield item;\n            }\n        }\n    }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */ class PagePromise extends _api_promise_mjs__WEBPACK_IMPORTED_MODULE_3__.APIPromise {\n    constructor(client, request, Page){\n        super(client, request, async (client, props)=>new Page(client, props.response, await (0,_internal_parse_mjs__WEBPACK_IMPORTED_MODULE_2__.defaultParseResponse)(client, props), props.options));\n    }\n    /**\n     * Allow auto-paginating iteration on an unawaited list call, eg:\n     *\n     *    for await (const item of client.items.list()) {\n     *      console.log(item)\n     *    }\n     */ async *[Symbol.asyncIterator]() {\n        const page = await this;\n        for await (const item of page){\n            yield item;\n        }\n    }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */ class Page extends AbstractPage {\n    constructor(client, response, body, options){\n        super(client, response, body, options);\n        this.data = body.data || [];\n        this.object = body.object;\n    }\n    getPaginatedItems() {\n        return this.data ?? [];\n    }\n    nextPageRequestOptions() {\n        return null;\n    }\n}\nclass CursorPage extends AbstractPage {\n    constructor(client, response, body, options){\n        super(client, response, body, options);\n        this.data = body.data || [];\n        this.has_more = body.has_more || false;\n    }\n    getPaginatedItems() {\n        return this.data ?? [];\n    }\n    hasNextPage() {\n        if (this.has_more === false) {\n            return false;\n        }\n        return super.hasNextPage();\n    }\n    nextPageRequestOptions() {\n        const data = this.getPaginatedItems();\n        const id = data[data.length - 1]?.id;\n        if (!id) {\n            return null;\n        }\n        return {\n            ...this.options,\n            query: {\n                ...(0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_4__.maybeObj)(this.options.query),\n                after: id\n            }\n        };\n    }\n} //# sourceMappingURL=pagination.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/core/pagination.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/core/resource.mjs":
/*!***********************************************!*\
  !*** ./node_modules/openai/core/resource.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIResource: () => (/* binding */ APIResource)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nclass APIResource {\n    constructor(client){\n        this._client = client;\n    }\n} //# sourceMappingURL=resource.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2NvcmUvcmVzb3VyY2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxzRkFBc0Y7QUFDL0UsTUFBTUE7SUFDVEMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHRDtJQUNuQjtBQUNKLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2NvcmUvcmVzb3VyY2UubWpzP2JmMjQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmV4cG9ydCBjbGFzcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgICAgIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvdXJjZS5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJfY2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/core/resource.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/core/streaming.mjs":
/*!************************************************!*\
  !*** ./node_modules/openai/core/streaming.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stream: () => (/* binding */ Stream),\n/* harmony export */   _iterSSEMessages: () => (/* binding */ _iterSSEMessages)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/./node_modules/openai/internal/tslib.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/openai/core/error.mjs\");\n/* harmony import */ var _internal_shims_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/shims.mjs */ \"(rsc)/./node_modules/openai/internal/shims.mjs\");\n/* harmony import */ var _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/decoders/line.mjs */ \"(rsc)/./node_modules/openai/internal/decoders/line.mjs\");\n/* harmony import */ var _internal_errors_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../internal/errors.mjs */ \"(rsc)/./node_modules/openai/internal/errors.mjs\");\n/* harmony import */ var _internal_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../internal/utils/bytes.mjs */ \"(rsc)/./node_modules/openai/internal/utils/bytes.mjs\");\n/* harmony import */ var _internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../internal/utils/log.mjs */ \"(rsc)/./node_modules/openai/internal/utils/log.mjs\");\nvar _Stream_client;\n\n\n\n\n\n\n\n\n\nclass Stream {\n    constructor(iterator, controller, client){\n        this.iterator = iterator;\n        _Stream_client.set(this, void 0);\n        this.controller = controller;\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Stream_client, client, \"f\");\n    }\n    static fromSSEResponse(response, controller, client) {\n        let consumed = false;\n        const logger = client ? (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_6__.loggerFor)(client) : console;\n        async function* iterator() {\n            if (consumed) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"Cannot iterate over a consumed stream, use `.tee()` to split the stream.\");\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const sse of _iterSSEMessages(response, controller)){\n                    if (done) continue;\n                    if (sse.data.startsWith(\"[DONE]\")) {\n                        done = true;\n                        continue;\n                    }\n                    if (sse.event === null || sse.event.startsWith(\"response.\") || sse.event.startsWith(\"image_edit.\") || sse.event.startsWith(\"image_generation.\") || sse.event.startsWith(\"transcript.\")) {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        } catch (e) {\n                            logger.error(`Could not parse message into JSON:`, sse.data);\n                            logger.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                        if (data && data.error) {\n                            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError(undefined, data.error, undefined, response.headers);\n                        }\n                        yield data;\n                    } else {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        } catch (e) {\n                            console.error(`Could not parse message into JSON:`, sse.data);\n                            console.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                        // TODO: Is this where the error should be thrown?\n                        if (sse.event == \"error\") {\n                            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError(undefined, data.error, data.message, undefined);\n                        }\n                        yield {\n                            event: sse.event,\n                            data: data\n                        };\n                    }\n                }\n                done = true;\n            } catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if ((0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_4__.isAbortError)(e)) return;\n                throw e;\n            } finally{\n                // If the user `break`s, abort the ongoing request.\n                if (!done) controller.abort();\n            }\n        }\n        return new Stream(iterator, controller, client);\n    }\n    /**\n     * Generates a Stream from a newline-separated ReadableStream\n     * where each item is a JSON value.\n     */ static fromReadableStream(readableStream, controller, client) {\n        let consumed = false;\n        async function* iterLines() {\n            const lineDecoder = new _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_3__.LineDecoder();\n            const iter = (0,_internal_shims_mjs__WEBPACK_IMPORTED_MODULE_2__.ReadableStreamToAsyncIterable)(readableStream);\n            for await (const chunk of iter){\n                for (const line of lineDecoder.decode(chunk)){\n                    yield line;\n                }\n            }\n            for (const line of lineDecoder.flush()){\n                yield line;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"Cannot iterate over a consumed stream, use `.tee()` to split the stream.\");\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const line of iterLines()){\n                    if (done) continue;\n                    if (line) yield JSON.parse(line);\n                }\n                done = true;\n            } catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if ((0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_4__.isAbortError)(e)) return;\n                throw e;\n            } finally{\n                // If the user `break`s, abort the ongoing request.\n                if (!done) controller.abort();\n            }\n        }\n        return new Stream(iterator, controller, client);\n    }\n    [(_Stream_client = new WeakMap(), Symbol.asyncIterator)]() {\n        return this.iterator();\n    }\n    /**\n     * Splits the stream into two streams which can be\n     * independently read from at different speeds.\n     */ tee() {\n        const left = [];\n        const right = [];\n        const iterator = this.iterator();\n        const teeIterator = (queue)=>{\n            return {\n                next: ()=>{\n                    if (queue.length === 0) {\n                        const result = iterator.next();\n                        left.push(result);\n                        right.push(result);\n                    }\n                    return queue.shift();\n                }\n            };\n        };\n        return [\n            new Stream(()=>teeIterator(left), this.controller, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Stream_client, \"f\")),\n            new Stream(()=>teeIterator(right), this.controller, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Stream_client, \"f\"))\n        ];\n    }\n    /**\n     * Converts this stream to a newline-separated ReadableStream of\n     * JSON stringified values in the stream\n     * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n     */ toReadableStream() {\n        const self = this;\n        let iter;\n        return (0,_internal_shims_mjs__WEBPACK_IMPORTED_MODULE_2__.makeReadableStream)({\n            async start () {\n                iter = self[Symbol.asyncIterator]();\n            },\n            async pull (ctrl) {\n                try {\n                    const { value, done } = await iter.next();\n                    if (done) return ctrl.close();\n                    const bytes = (0,_internal_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_5__.encodeUTF8)(JSON.stringify(value) + \"\\n\");\n                    ctrl.enqueue(bytes);\n                } catch (err) {\n                    ctrl.error(err);\n                }\n            },\n            async cancel () {\n                await iter.return?.();\n            }\n        });\n    }\n}\nasync function* _iterSSEMessages(response, controller) {\n    if (!response.body) {\n        controller.abort();\n        if (typeof globalThis.navigator !== \"undefined\" && globalThis.navigator.product === \"ReactNative\") {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`The default react-native fetch implementation does not support streaming. Please use expo/fetch: https://docs.expo.dev/versions/latest/sdk/expo/#expofetch-api`);\n        }\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Attempted to iterate over a response with no body`);\n    }\n    const sseDecoder = new SSEDecoder();\n    const lineDecoder = new _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_3__.LineDecoder();\n    const iter = (0,_internal_shims_mjs__WEBPACK_IMPORTED_MODULE_2__.ReadableStreamToAsyncIterable)(response.body);\n    for await (const sseChunk of iterSSEChunks(iter)){\n        for (const line of lineDecoder.decode(sseChunk)){\n            const sse = sseDecoder.decode(line);\n            if (sse) yield sse;\n        }\n    }\n    for (const line of lineDecoder.flush()){\n        const sse = sseDecoder.decode(line);\n        if (sse) yield sse;\n    }\n}\n/**\n * Given an async iterable iterator, iterates over it and yields full\n * SSE chunks, i.e. yields when a double new-line is encountered.\n */ async function* iterSSEChunks(iterator) {\n    let data = new Uint8Array();\n    for await (const chunk of iterator){\n        if (chunk == null) {\n            continue;\n        }\n        const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === \"string\" ? (0,_internal_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_5__.encodeUTF8)(chunk) : chunk;\n        let newData = new Uint8Array(data.length + binaryChunk.length);\n        newData.set(data);\n        newData.set(binaryChunk, data.length);\n        data = newData;\n        let patternIndex;\n        while((patternIndex = (0,_internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_3__.findDoubleNewlineIndex)(data)) !== -1){\n            yield data.slice(0, patternIndex);\n            data = data.slice(patternIndex);\n        }\n    }\n    if (data.length > 0) {\n        yield data;\n    }\n}\nclass SSEDecoder {\n    constructor(){\n        this.event = null;\n        this.data = [];\n        this.chunks = [];\n    }\n    decode(line) {\n        if (line.endsWith(\"\\r\")) {\n            line = line.substring(0, line.length - 1);\n        }\n        if (!line) {\n            // empty line and we didn't previously encounter any messages\n            if (!this.event && !this.data.length) return null;\n            const sse = {\n                event: this.event,\n                data: this.data.join(\"\\n\"),\n                raw: this.chunks\n            };\n            this.event = null;\n            this.data = [];\n            this.chunks = [];\n            return sse;\n        }\n        this.chunks.push(line);\n        if (line.startsWith(\":\")) {\n            return null;\n        }\n        let [fieldname, _, value] = partition(line, \":\");\n        if (value.startsWith(\" \")) {\n            value = value.substring(1);\n        }\n        if (fieldname === \"event\") {\n            this.event = value;\n        } else if (fieldname === \"data\") {\n            this.data.push(value);\n        }\n        return null;\n    }\n}\nfunction partition(str, delimiter) {\n    const index = str.indexOf(delimiter);\n    if (index !== -1) {\n        return [\n            str.substring(0, index),\n            delimiter,\n            str.substring(index + delimiter.length)\n        ];\n    }\n    return [\n        str,\n        \"\",\n        \"\"\n    ];\n} //# sourceMappingURL=streaming.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/core/streaming.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/core/uploads.mjs":
/*!**********************************************!*\
  !*** ./node_modules/openai/core/uploads.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toFile: () => (/* reexport safe */ _internal_to_file_mjs__WEBPACK_IMPORTED_MODULE_0__.toFile)\n/* harmony export */ });\n/* harmony import */ var _internal_to_file_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/to-file.mjs */ \"(rsc)/./node_modules/openai/internal/to-file.mjs\");\n //# sourceMappingURL=uploads.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2NvcmUvdXBsb2Fkcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUQsQ0FDakQsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2NvcmUvdXBsb2Fkcy5tanM/ODg3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyB0b0ZpbGUgfSBmcm9tIFwiLi4vaW50ZXJuYWwvdG8tZmlsZS5tanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVwbG9hZHMubWpzLm1hcCJdLCJuYW1lcyI6WyJ0b0ZpbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/core/uploads.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/error.mjs":
/*!***************************************!*\
  !*** ./node_modules/openai/error.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIError),\n/* harmony export */   APIUserAbortError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIUserAbortError),\n/* harmony export */   AuthenticationError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.BadRequestError),\n/* harmony export */   ConflictError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.ConflictError),\n/* harmony export */   ContentFilterFinishReasonError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.ContentFilterFinishReasonError),\n/* harmony export */   InternalServerError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.InternalServerError),\n/* harmony export */   InvalidWebhookSignatureError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.InvalidWebhookSignatureError),\n/* harmony export */   LengthFinishReasonError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.LengthFinishReasonError),\n/* harmony export */   NotFoundError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.NotFoundError),\n/* harmony export */   OpenAIError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError),\n/* harmony export */   PermissionDeniedError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.UnprocessableEntityError)\n/* harmony export */ });\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/error.mjs */ \"(rsc)/./node_modules/openai/core/error.mjs\");\n //# sourceMappingURL=error.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2Vycm9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFpQyxDQUNqQyxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvZXJyb3IubWpzPzg3YzkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vY29yZS9lcnJvci5tanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/error.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/index.mjs":
/*!***************************************!*\
  !*** ./node_modules/openai/index.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.APIError),\n/* harmony export */   APIPromise: () => (/* reexport safe */ _core_api_promise_mjs__WEBPACK_IMPORTED_MODULE_2__.APIPromise),\n/* harmony export */   APIUserAbortError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.APIUserAbortError),\n/* harmony export */   AuthenticationError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.AuthenticationError),\n/* harmony export */   AzureOpenAI: () => (/* reexport safe */ _azure_mjs__WEBPACK_IMPORTED_MODULE_5__.AzureOpenAI),\n/* harmony export */   BadRequestError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.BadRequestError),\n/* harmony export */   ConflictError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.ConflictError),\n/* harmony export */   InternalServerError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.InternalServerError),\n/* harmony export */   InvalidWebhookSignatureError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.InvalidWebhookSignatureError),\n/* harmony export */   NotFoundError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.NotFoundError),\n/* harmony export */   OpenAI: () => (/* reexport safe */ _client_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAI),\n/* harmony export */   OpenAIError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.OpenAIError),\n/* harmony export */   PagePromise: () => (/* reexport safe */ _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_3__.PagePromise),\n/* harmony export */   PermissionDeniedError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.UnprocessableEntityError),\n/* harmony export */   \"default\": () => (/* reexport safe */ _client_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAI),\n/* harmony export */   toFile: () => (/* reexport safe */ _core_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.toFile)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client.mjs */ \"(rsc)/./node_modules/openai/client.mjs\");\n/* harmony import */ var _core_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/uploads.mjs */ \"(rsc)/./node_modules/openai/core/uploads.mjs\");\n/* harmony import */ var _core_api_promise_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/api-promise.mjs */ \"(rsc)/./node_modules/openai/core/api-promise.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/error.mjs */ \"(rsc)/./node_modules/openai/core/error.mjs\");\n/* harmony import */ var _azure_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./azure.mjs */ \"(rsc)/./node_modules/openai/azure.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHNGQUFzRjtBQUNyQztBQUNMO0FBQ1E7QUFDZDtBQUNjO0FBQ2dRO0FBQzFRLENBQzFDLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9pbmRleC5tanM/YTUwYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuZXhwb3J0IHsgT3BlbkFJIGFzIGRlZmF1bHQgfSBmcm9tIFwiLi9jbGllbnQubWpzXCI7XG5leHBvcnQgeyB0b0ZpbGUgfSBmcm9tIFwiLi9jb3JlL3VwbG9hZHMubWpzXCI7XG5leHBvcnQgeyBBUElQcm9taXNlIH0gZnJvbSBcIi4vY29yZS9hcGktcHJvbWlzZS5tanNcIjtcbmV4cG9ydCB7IE9wZW5BSSB9IGZyb20gXCIuL2NsaWVudC5tanNcIjtcbmV4cG9ydCB7IFBhZ2VQcm9taXNlIH0gZnJvbSBcIi4vY29yZS9wYWdpbmF0aW9uLm1qc1wiO1xuZXhwb3J0IHsgT3BlbkFJRXJyb3IsIEFQSUVycm9yLCBBUElDb25uZWN0aW9uRXJyb3IsIEFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3IsIEFQSVVzZXJBYm9ydEVycm9yLCBOb3RGb3VuZEVycm9yLCBDb25mbGljdEVycm9yLCBSYXRlTGltaXRFcnJvciwgQmFkUmVxdWVzdEVycm9yLCBBdXRoZW50aWNhdGlvbkVycm9yLCBJbnRlcm5hbFNlcnZlckVycm9yLCBQZXJtaXNzaW9uRGVuaWVkRXJyb3IsIFVucHJvY2Vzc2FibGVFbnRpdHlFcnJvciwgSW52YWxpZFdlYmhvb2tTaWduYXR1cmVFcnJvciwgfSBmcm9tIFwiLi9jb3JlL2Vycm9yLm1qc1wiO1xuZXhwb3J0IHsgQXp1cmVPcGVuQUkgfSBmcm9tIFwiLi9henVyZS5tanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOlsiT3BlbkFJIiwiZGVmYXVsdCIsInRvRmlsZSIsIkFQSVByb21pc2UiLCJQYWdlUHJvbWlzZSIsIk9wZW5BSUVycm9yIiwiQVBJRXJyb3IiLCJBUElDb25uZWN0aW9uRXJyb3IiLCJBUElDb25uZWN0aW9uVGltZW91dEVycm9yIiwiQVBJVXNlckFib3J0RXJyb3IiLCJOb3RGb3VuZEVycm9yIiwiQ29uZmxpY3RFcnJvciIsIlJhdGVMaW1pdEVycm9yIiwiQmFkUmVxdWVzdEVycm9yIiwiQXV0aGVudGljYXRpb25FcnJvciIsIkludGVybmFsU2VydmVyRXJyb3IiLCJQZXJtaXNzaW9uRGVuaWVkRXJyb3IiLCJVbnByb2Nlc3NhYmxlRW50aXR5RXJyb3IiLCJJbnZhbGlkV2ViaG9va1NpZ25hdHVyZUVycm9yIiwiQXp1cmVPcGVuQUkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/decoders/line.mjs":
/*!********************************************************!*\
  !*** ./node_modules/openai/internal/decoders/line.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineDecoder: () => (/* binding */ LineDecoder),\n/* harmony export */   findDoubleNewlineIndex: () => (/* binding */ findDoubleNewlineIndex)\n/* harmony export */ });\n/* harmony import */ var _tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tslib.mjs */ \"(rsc)/./node_modules/openai/internal/tslib.mjs\");\n/* harmony import */ var _utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/bytes.mjs */ \"(rsc)/./node_modules/openai/internal/utils/bytes.mjs\");\nvar _LineDecoder_buffer, _LineDecoder_carriageReturnIndex;\n\n\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */ class LineDecoder {\n    constructor(){\n        _LineDecoder_buffer.set(this, void 0);\n        _LineDecoder_carriageReturnIndex.set(this, void 0);\n        (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_buffer, new Uint8Array(), \"f\");\n        (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n    }\n    decode(chunk) {\n        if (chunk == null) {\n            return [];\n        }\n        const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === \"string\" ? (0,_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__.encodeUTF8)(chunk) : chunk;\n        (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_buffer, (0,_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__.concatBytes)([\n            (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\"),\n            binaryChunk\n        ]), \"f\");\n        const lines = [];\n        let patternIndex;\n        while((patternIndex = findNewlineIndex((0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\"), (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\"))) != null){\n            if (patternIndex.carriage && (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\") == null) {\n                // skip until we either get a corresponding `\\n`, a new `\\r` or nothing\n                (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_carriageReturnIndex, patternIndex.index, \"f\");\n                continue;\n            }\n            // we got double \\r or \\rtext\\n\n            if ((0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\") != null && (patternIndex.index !== (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\") + 1 || patternIndex.carriage)) {\n                lines.push((0,_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__.decodeUTF8)((0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\").subarray(0, (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\") - 1)));\n                (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_buffer, (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\").subarray((0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\")), \"f\");\n                (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n                continue;\n            }\n            const endIndex = (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\") !== null ? patternIndex.preceding - 1 : patternIndex.preceding;\n            const line = (0,_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__.decodeUTF8)((0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\").subarray(0, endIndex));\n            lines.push(line);\n            (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_buffer, (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\").subarray(patternIndex.index), \"f\");\n            (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n        }\n        return lines;\n    }\n    flush() {\n        if (!(0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\").length) {\n            return [];\n        }\n        return this.decode(\"\\n\");\n    }\n}\n_LineDecoder_buffer = new WeakMap(), _LineDecoder_carriageReturnIndex = new WeakMap();\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set([\n    \"\\n\",\n    \"\\r\"\n]);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g;\n/**\n * This function searches the buffer for the end patterns, (\\r or \\n)\n * and returns an object with the index preceding the matched newline and the\n * index after the newline char. `null` is returned if no new line is found.\n *\n * ```ts\n * findNewLineIndex('abc\\ndef') -> { preceding: 2, index: 3 }\n * ```\n */ function findNewlineIndex(buffer, startIndex) {\n    const newline = 0x0a; // \\n\n    const carriage = 0x0d; // \\r\n    for(let i = startIndex ?? 0; i < buffer.length; i++){\n        if (buffer[i] === newline) {\n            return {\n                preceding: i,\n                index: i + 1,\n                carriage: false\n            };\n        }\n        if (buffer[i] === carriage) {\n            return {\n                preceding: i,\n                index: i + 1,\n                carriage: true\n            };\n        }\n    }\n    return null;\n}\nfunction findDoubleNewlineIndex(buffer) {\n    // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\n    // and returns the index right after the first occurrence of any pattern,\n    // or -1 if none of the patterns are found.\n    const newline = 0x0a; // \\n\n    const carriage = 0x0d; // \\r\n    for(let i = 0; i < buffer.length - 1; i++){\n        if (buffer[i] === newline && buffer[i + 1] === newline) {\n            // \\n\\n\n            return i + 2;\n        }\n        if (buffer[i] === carriage && buffer[i + 1] === carriage) {\n            // \\r\\r\n            return i + 2;\n        }\n        if (buffer[i] === carriage && buffer[i + 1] === newline && i + 3 < buffer.length && buffer[i + 2] === carriage && buffer[i + 3] === newline) {\n            // \\r\\n\\r\\n\n            return i + 4;\n        }\n    }\n    return -1;\n} //# sourceMappingURL=line.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL2RlY29kZXJzL2xpbmUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFJQSxxQkFBcUJDO0FBQ3FEO0FBQ0w7QUFDekU7Ozs7O0NBS0MsR0FDTSxNQUFNTTtJQUNUQyxhQUFjO1FBQ1ZSLG9CQUFvQlMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLO1FBQ25DUixpQ0FBaUNRLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSztRQUNoRE4sa0VBQXNCQSxDQUFDLElBQUksRUFBRUgscUJBQXFCLElBQUlVLGNBQWM7UUFDcEVQLGtFQUFzQkEsQ0FBQyxJQUFJLEVBQUVGLGtDQUFrQyxNQUFNO0lBQ3pFO0lBQ0FVLE9BQU9DLEtBQUssRUFBRTtRQUNWLElBQUlBLFNBQVMsTUFBTTtZQUNmLE9BQU8sRUFBRTtRQUNiO1FBQ0EsTUFBTUMsY0FBY0QsaUJBQWlCRSxjQUFjLElBQUlKLFdBQVdFLFNBQzVELE9BQU9BLFVBQVUsV0FBV04sNERBQVVBLENBQUNNLFNBQ25DQTtRQUNWVCxrRUFBc0JBLENBQUMsSUFBSSxFQUFFSCxxQkFBcUJJLDZEQUFXQSxDQUFDO1lBQUNGLGtFQUFzQkEsQ0FBQyxJQUFJLEVBQUVGLHFCQUFxQjtZQUFNYTtTQUFZLEdBQUc7UUFDdEksTUFBTUUsUUFBUSxFQUFFO1FBQ2hCLElBQUlDO1FBQ0osTUFBTyxDQUFDQSxlQUFlQyxpQkFBaUJmLGtFQUFzQkEsQ0FBQyxJQUFJLEVBQUVGLHFCQUFxQixNQUFNRSxrRUFBc0JBLENBQUMsSUFBSSxFQUFFRCxrQ0FBa0MsS0FBSSxLQUFNLEtBQU07WUFDM0ssSUFBSWUsYUFBYUUsUUFBUSxJQUFJaEIsa0VBQXNCQSxDQUFDLElBQUksRUFBRUQsa0NBQWtDLFFBQVEsTUFBTTtnQkFDdEcsdUVBQXVFO2dCQUN2RUUsa0VBQXNCQSxDQUFDLElBQUksRUFBRUYsa0NBQWtDZSxhQUFhRyxLQUFLLEVBQUU7Z0JBQ25GO1lBQ0o7WUFDQSwrQkFBK0I7WUFDL0IsSUFBSWpCLGtFQUFzQkEsQ0FBQyxJQUFJLEVBQUVELGtDQUFrQyxRQUFRLFFBQ3RFZSxDQUFBQSxhQUFhRyxLQUFLLEtBQUtqQixrRUFBc0JBLENBQUMsSUFBSSxFQUFFRCxrQ0FBa0MsT0FBTyxLQUFLZSxhQUFhRSxRQUFRLEdBQUc7Z0JBQzNISCxNQUFNSyxJQUFJLENBQUNmLDREQUFVQSxDQUFDSCxrRUFBc0JBLENBQUMsSUFBSSxFQUFFRixxQkFBcUIsS0FBS3FCLFFBQVEsQ0FBQyxHQUFHbkIsa0VBQXNCQSxDQUFDLElBQUksRUFBRUQsa0NBQWtDLE9BQU87Z0JBQy9KRSxrRUFBc0JBLENBQUMsSUFBSSxFQUFFSCxxQkFBcUJFLGtFQUFzQkEsQ0FBQyxJQUFJLEVBQUVGLHFCQUFxQixLQUFLcUIsUUFBUSxDQUFDbkIsa0VBQXNCQSxDQUFDLElBQUksRUFBRUQsa0NBQWtDLE9BQU87Z0JBQ3hMRSxrRUFBc0JBLENBQUMsSUFBSSxFQUFFRixrQ0FBa0MsTUFBTTtnQkFDckU7WUFDSjtZQUNBLE1BQU1xQixXQUFXcEIsa0VBQXNCQSxDQUFDLElBQUksRUFBRUQsa0NBQWtDLFNBQVMsT0FBT2UsYUFBYU8sU0FBUyxHQUFHLElBQUlQLGFBQWFPLFNBQVM7WUFDbkosTUFBTUMsT0FBT25CLDREQUFVQSxDQUFDSCxrRUFBc0JBLENBQUMsSUFBSSxFQUFFRixxQkFBcUIsS0FBS3FCLFFBQVEsQ0FBQyxHQUFHQztZQUMzRlAsTUFBTUssSUFBSSxDQUFDSTtZQUNYckIsa0VBQXNCQSxDQUFDLElBQUksRUFBRUgscUJBQXFCRSxrRUFBc0JBLENBQUMsSUFBSSxFQUFFRixxQkFBcUIsS0FBS3FCLFFBQVEsQ0FBQ0wsYUFBYUcsS0FBSyxHQUFHO1lBQ3ZJaEIsa0VBQXNCQSxDQUFDLElBQUksRUFBRUYsa0NBQWtDLE1BQU07UUFDekU7UUFDQSxPQUFPYztJQUNYO0lBQ0FVLFFBQVE7UUFDSixJQUFJLENBQUN2QixrRUFBc0JBLENBQUMsSUFBSSxFQUFFRixxQkFBcUIsS0FBSzBCLE1BQU0sRUFBRTtZQUNoRSxPQUFPLEVBQUU7UUFDYjtRQUNBLE9BQU8sSUFBSSxDQUFDZixNQUFNLENBQUM7SUFDdkI7QUFDSjtBQUNBWCxzQkFBc0IsSUFBSTJCLFdBQVcxQixtQ0FBbUMsSUFBSTBCO0FBQzVFLGtCQUFrQjtBQUNsQnBCLFlBQVlxQixhQUFhLEdBQUcsSUFBSUMsSUFBSTtJQUFDO0lBQU07Q0FBSztBQUNoRHRCLFlBQVl1QixjQUFjLEdBQUc7QUFDN0I7Ozs7Ozs7O0NBUUMsR0FDRCxTQUFTYixpQkFBaUJjLE1BQU0sRUFBRUMsVUFBVTtJQUN4QyxNQUFNQyxVQUFVLE1BQU0sS0FBSztJQUMzQixNQUFNZixXQUFXLE1BQU0sS0FBSztJQUM1QixJQUFLLElBQUlnQixJQUFJRixjQUFjLEdBQUdFLElBQUlILE9BQU9MLE1BQU0sRUFBRVEsSUFBSztRQUNsRCxJQUFJSCxNQUFNLENBQUNHLEVBQUUsS0FBS0QsU0FBUztZQUN2QixPQUFPO2dCQUFFVixXQUFXVztnQkFBR2YsT0FBT2UsSUFBSTtnQkFBR2hCLFVBQVU7WUFBTTtRQUN6RDtRQUNBLElBQUlhLE1BQU0sQ0FBQ0csRUFBRSxLQUFLaEIsVUFBVTtZQUN4QixPQUFPO2dCQUFFSyxXQUFXVztnQkFBR2YsT0FBT2UsSUFBSTtnQkFBR2hCLFVBQVU7WUFBSztRQUN4RDtJQUNKO0lBQ0EsT0FBTztBQUNYO0FBQ08sU0FBU2lCLHVCQUF1QkosTUFBTTtJQUN6QyxnRkFBZ0Y7SUFDaEYseUVBQXlFO0lBQ3pFLDJDQUEyQztJQUMzQyxNQUFNRSxVQUFVLE1BQU0sS0FBSztJQUMzQixNQUFNZixXQUFXLE1BQU0sS0FBSztJQUM1QixJQUFLLElBQUlnQixJQUFJLEdBQUdBLElBQUlILE9BQU9MLE1BQU0sR0FBRyxHQUFHUSxJQUFLO1FBQ3hDLElBQUlILE1BQU0sQ0FBQ0csRUFBRSxLQUFLRCxXQUFXRixNQUFNLENBQUNHLElBQUksRUFBRSxLQUFLRCxTQUFTO1lBQ3BELE9BQU87WUFDUCxPQUFPQyxJQUFJO1FBQ2Y7UUFDQSxJQUFJSCxNQUFNLENBQUNHLEVBQUUsS0FBS2hCLFlBQVlhLE1BQU0sQ0FBQ0csSUFBSSxFQUFFLEtBQUtoQixVQUFVO1lBQ3RELE9BQU87WUFDUCxPQUFPZ0IsSUFBSTtRQUNmO1FBQ0EsSUFBSUgsTUFBTSxDQUFDRyxFQUFFLEtBQUtoQixZQUNkYSxNQUFNLENBQUNHLElBQUksRUFBRSxLQUFLRCxXQUNsQkMsSUFBSSxJQUFJSCxPQUFPTCxNQUFNLElBQ3JCSyxNQUFNLENBQUNHLElBQUksRUFBRSxLQUFLaEIsWUFDbEJhLE1BQU0sQ0FBQ0csSUFBSSxFQUFFLEtBQUtELFNBQVM7WUFDM0IsV0FBVztZQUNYLE9BQU9DLElBQUk7UUFDZjtJQUNKO0lBQ0EsT0FBTyxDQUFDO0FBQ1osRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvaW50ZXJuYWwvZGVjb2RlcnMvbGluZS5tanM/MmNjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX0xpbmVEZWNvZGVyX2J1ZmZlciwgX0xpbmVEZWNvZGVyX2NhcnJpYWdlUmV0dXJuSW5kZXg7XG5pbXBvcnQgeyBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LCBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IH0gZnJvbSBcIi4uL3RzbGliLm1qc1wiO1xuaW1wb3J0IHsgY29uY2F0Qnl0ZXMsIGRlY29kZVVURjgsIGVuY29kZVVURjggfSBmcm9tIFwiLi4vdXRpbHMvYnl0ZXMubWpzXCI7XG4vKipcbiAqIEEgcmUtaW1wbGVtZW50YXRpb24gb2YgaHR0cHgncyBgTGluZURlY29kZXJgIGluIFB5dGhvbiB0aGF0IGhhbmRsZXMgaW5jcmVtZW50YWxseVxuICogcmVhZGluZyBsaW5lcyBmcm9tIHRleHQuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL2VuY29kZS9odHRweC9ibG9iLzkyMDMzM2VhOTgxMThlOWNmNjE3ZjI0NjkwNWQ3YjIwMjUxMDk0MWMvaHR0cHgvX2RlY29kZXJzLnB5I0wyNThcbiAqL1xuZXhwb3J0IGNsYXNzIExpbmVEZWNvZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgX0xpbmVEZWNvZGVyX2J1ZmZlci5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0xpbmVEZWNvZGVyX2NhcnJpYWdlUmV0dXJuSW5kZXguc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0xpbmVEZWNvZGVyX2J1ZmZlciwgbmV3IFVpbnQ4QXJyYXkoKSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9MaW5lRGVjb2Rlcl9jYXJyaWFnZVJldHVybkluZGV4LCBudWxsLCBcImZcIik7XG4gICAgfVxuICAgIGRlY29kZShjaHVuaykge1xuICAgICAgICBpZiAoY2h1bmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJpbmFyeUNodW5rID0gY2h1bmsgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IG5ldyBVaW50OEFycmF5KGNodW5rKVxuICAgICAgICAgICAgOiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnID8gZW5jb2RlVVRGOChjaHVuaylcbiAgICAgICAgICAgICAgICA6IGNodW5rO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9MaW5lRGVjb2Rlcl9idWZmZXIsIGNvbmNhdEJ5dGVzKFtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MaW5lRGVjb2Rlcl9idWZmZXIsIFwiZlwiKSwgYmluYXJ5Q2h1bmtdKSwgXCJmXCIpO1xuICAgICAgICBjb25zdCBsaW5lcyA9IFtdO1xuICAgICAgICBsZXQgcGF0dGVybkluZGV4O1xuICAgICAgICB3aGlsZSAoKHBhdHRlcm5JbmRleCA9IGZpbmROZXdsaW5lSW5kZXgoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTGluZURlY29kZXJfYnVmZmVyLCBcImZcIiksIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0xpbmVEZWNvZGVyX2NhcnJpYWdlUmV0dXJuSW5kZXgsIFwiZlwiKSkpICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChwYXR0ZXJuSW5kZXguY2FycmlhZ2UgJiYgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTGluZURlY29kZXJfY2FycmlhZ2VSZXR1cm5JbmRleCwgXCJmXCIpID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBza2lwIHVudGlsIHdlIGVpdGhlciBnZXQgYSBjb3JyZXNwb25kaW5nIGBcXG5gLCBhIG5ldyBgXFxyYCBvciBub3RoaW5nXG4gICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfTGluZURlY29kZXJfY2FycmlhZ2VSZXR1cm5JbmRleCwgcGF0dGVybkluZGV4LmluZGV4LCBcImZcIik7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB3ZSBnb3QgZG91YmxlIFxcciBvciBcXHJ0ZXh0XFxuXG4gICAgICAgICAgICBpZiAoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTGluZURlY29kZXJfY2FycmlhZ2VSZXR1cm5JbmRleCwgXCJmXCIpICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAocGF0dGVybkluZGV4LmluZGV4ICE9PSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MaW5lRGVjb2Rlcl9jYXJyaWFnZVJldHVybkluZGV4LCBcImZcIikgKyAxIHx8IHBhdHRlcm5JbmRleC5jYXJyaWFnZSkpIHtcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKGRlY29kZVVURjgoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTGluZURlY29kZXJfYnVmZmVyLCBcImZcIikuc3ViYXJyYXkoMCwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTGluZURlY29kZXJfY2FycmlhZ2VSZXR1cm5JbmRleCwgXCJmXCIpIC0gMSkpKTtcbiAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9MaW5lRGVjb2Rlcl9idWZmZXIsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0xpbmVEZWNvZGVyX2J1ZmZlciwgXCJmXCIpLnN1YmFycmF5KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0xpbmVEZWNvZGVyX2NhcnJpYWdlUmV0dXJuSW5kZXgsIFwiZlwiKSksIFwiZlwiKTtcbiAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9MaW5lRGVjb2Rlcl9jYXJyaWFnZVJldHVybkluZGV4LCBudWxsLCBcImZcIik7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBlbmRJbmRleCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0xpbmVEZWNvZGVyX2NhcnJpYWdlUmV0dXJuSW5kZXgsIFwiZlwiKSAhPT0gbnVsbCA/IHBhdHRlcm5JbmRleC5wcmVjZWRpbmcgLSAxIDogcGF0dGVybkluZGV4LnByZWNlZGluZztcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBkZWNvZGVVVEY4KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0xpbmVEZWNvZGVyX2J1ZmZlciwgXCJmXCIpLnN1YmFycmF5KDAsIGVuZEluZGV4KSk7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGxpbmUpO1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfTGluZURlY29kZXJfYnVmZmVyLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MaW5lRGVjb2Rlcl9idWZmZXIsIFwiZlwiKS5zdWJhcnJheShwYXR0ZXJuSW5kZXguaW5kZXgpLCBcImZcIik7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9MaW5lRGVjb2Rlcl9jYXJyaWFnZVJldHVybkluZGV4LCBudWxsLCBcImZcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpbmVzO1xuICAgIH1cbiAgICBmbHVzaCgpIHtcbiAgICAgICAgaWYgKCFfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MaW5lRGVjb2Rlcl9idWZmZXIsIFwiZlwiKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5kZWNvZGUoJ1xcbicpO1xuICAgIH1cbn1cbl9MaW5lRGVjb2Rlcl9idWZmZXIgPSBuZXcgV2Vha01hcCgpLCBfTGluZURlY29kZXJfY2FycmlhZ2VSZXR1cm5JbmRleCA9IG5ldyBXZWFrTWFwKCk7XG4vLyBwcmV0dGllci1pZ25vcmVcbkxpbmVEZWNvZGVyLk5FV0xJTkVfQ0hBUlMgPSBuZXcgU2V0KFsnXFxuJywgJ1xcciddKTtcbkxpbmVEZWNvZGVyLk5FV0xJTkVfUkVHRVhQID0gL1xcclxcbnxbXFxuXFxyXS9nO1xuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHNlYXJjaGVzIHRoZSBidWZmZXIgZm9yIHRoZSBlbmQgcGF0dGVybnMsIChcXHIgb3IgXFxuKVxuICogYW5kIHJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIGluZGV4IHByZWNlZGluZyB0aGUgbWF0Y2hlZCBuZXdsaW5lIGFuZCB0aGVcbiAqIGluZGV4IGFmdGVyIHRoZSBuZXdsaW5lIGNoYXIuIGBudWxsYCBpcyByZXR1cm5lZCBpZiBubyBuZXcgbGluZSBpcyBmb3VuZC5cbiAqXG4gKiBgYGB0c1xuICogZmluZE5ld0xpbmVJbmRleCgnYWJjXFxuZGVmJykgLT4geyBwcmVjZWRpbmc6IDIsIGluZGV4OiAzIH1cbiAqIGBgYFxuICovXG5mdW5jdGlvbiBmaW5kTmV3bGluZUluZGV4KGJ1ZmZlciwgc3RhcnRJbmRleCkge1xuICAgIGNvbnN0IG5ld2xpbmUgPSAweDBhOyAvLyBcXG5cbiAgICBjb25zdCBjYXJyaWFnZSA9IDB4MGQ7IC8vIFxcclxuICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4ID8/IDA7IGkgPCBidWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGJ1ZmZlcltpXSA9PT0gbmV3bGluZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgcHJlY2VkaW5nOiBpLCBpbmRleDogaSArIDEsIGNhcnJpYWdlOiBmYWxzZSB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChidWZmZXJbaV0gPT09IGNhcnJpYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4geyBwcmVjZWRpbmc6IGksIGluZGV4OiBpICsgMSwgY2FycmlhZ2U6IHRydWUgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaW5kRG91YmxlTmV3bGluZUluZGV4KGJ1ZmZlcikge1xuICAgIC8vIFRoaXMgZnVuY3Rpb24gc2VhcmNoZXMgdGhlIGJ1ZmZlciBmb3IgdGhlIGVuZCBwYXR0ZXJucyAoXFxyXFxyLCBcXG5cXG4sIFxcclxcblxcclxcbilcbiAgICAvLyBhbmQgcmV0dXJucyB0aGUgaW5kZXggcmlnaHQgYWZ0ZXIgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYW55IHBhdHRlcm4sXG4gICAgLy8gb3IgLTEgaWYgbm9uZSBvZiB0aGUgcGF0dGVybnMgYXJlIGZvdW5kLlxuICAgIGNvbnN0IG5ld2xpbmUgPSAweDBhOyAvLyBcXG5cbiAgICBjb25zdCBjYXJyaWFnZSA9IDB4MGQ7IC8vIFxcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICBpZiAoYnVmZmVyW2ldID09PSBuZXdsaW5lICYmIGJ1ZmZlcltpICsgMV0gPT09IG5ld2xpbmUpIHtcbiAgICAgICAgICAgIC8vIFxcblxcblxuICAgICAgICAgICAgcmV0dXJuIGkgKyAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChidWZmZXJbaV0gPT09IGNhcnJpYWdlICYmIGJ1ZmZlcltpICsgMV0gPT09IGNhcnJpYWdlKSB7XG4gICAgICAgICAgICAvLyBcXHJcXHJcbiAgICAgICAgICAgIHJldHVybiBpICsgMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnVmZmVyW2ldID09PSBjYXJyaWFnZSAmJlxuICAgICAgICAgICAgYnVmZmVyW2kgKyAxXSA9PT0gbmV3bGluZSAmJlxuICAgICAgICAgICAgaSArIDMgPCBidWZmZXIubGVuZ3RoICYmXG4gICAgICAgICAgICBidWZmZXJbaSArIDJdID09PSBjYXJyaWFnZSAmJlxuICAgICAgICAgICAgYnVmZmVyW2kgKyAzXSA9PT0gbmV3bGluZSkge1xuICAgICAgICAgICAgLy8gXFxyXFxuXFxyXFxuXG4gICAgICAgICAgICByZXR1cm4gaSArIDQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGluZS5tanMubWFwIl0sIm5hbWVzIjpbIl9MaW5lRGVjb2Rlcl9idWZmZXIiLCJfTGluZURlY29kZXJfY2FycmlhZ2VSZXR1cm5JbmRleCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwiY29uY2F0Qnl0ZXMiLCJkZWNvZGVVVEY4IiwiZW5jb2RlVVRGOCIsIkxpbmVEZWNvZGVyIiwiY29uc3RydWN0b3IiLCJzZXQiLCJVaW50OEFycmF5IiwiZGVjb2RlIiwiY2h1bmsiLCJiaW5hcnlDaHVuayIsIkFycmF5QnVmZmVyIiwibGluZXMiLCJwYXR0ZXJuSW5kZXgiLCJmaW5kTmV3bGluZUluZGV4IiwiY2FycmlhZ2UiLCJpbmRleCIsInB1c2giLCJzdWJhcnJheSIsImVuZEluZGV4IiwicHJlY2VkaW5nIiwibGluZSIsImZsdXNoIiwibGVuZ3RoIiwiV2Vha01hcCIsIk5FV0xJTkVfQ0hBUlMiLCJTZXQiLCJORVdMSU5FX1JFR0VYUCIsImJ1ZmZlciIsInN0YXJ0SW5kZXgiLCJuZXdsaW5lIiwiaSIsImZpbmREb3VibGVOZXdsaW5lSW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/decoders/line.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/detect-platform.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/internal/detect-platform.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPlatformHeaders: () => (/* binding */ getPlatformHeaders),\n/* harmony export */   isRunningInBrowser: () => (/* binding */ isRunningInBrowser)\n/* harmony export */ });\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version.mjs */ \"(rsc)/./node_modules/openai/version.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nconst isRunningInBrowser = ()=>{\n    return(// @ts-ignore\n     false && // @ts-ignore\n    0);\n};\n/**\n * Note this does not detect 'browser'; for that, use getBrowserInfo().\n */ function getDetectedPlatform() {\n    if (typeof Deno !== \"undefined\" && Deno.build != null) {\n        return \"deno\";\n    }\n    if (typeof EdgeRuntime !== \"undefined\") {\n        return \"edge\";\n    }\n    if (Object.prototype.toString.call(typeof globalThis.process !== \"undefined\" ? globalThis.process : 0) === \"[object process]\") {\n        return \"node\";\n    }\n    return \"unknown\";\n}\nconst getPlatformProperties = ()=>{\n    const detectedPlatform = getDetectedPlatform();\n    if (detectedPlatform === \"deno\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            \"X-Stainless-OS\": normalizePlatform(Deno.build.os),\n            \"X-Stainless-Arch\": normalizeArch(Deno.build.arch),\n            \"X-Stainless-Runtime\": \"deno\",\n            \"X-Stainless-Runtime-Version\": typeof Deno.version === \"string\" ? Deno.version : Deno.version?.deno ?? \"unknown\"\n        };\n    }\n    if (typeof EdgeRuntime !== \"undefined\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            \"X-Stainless-OS\": \"Unknown\",\n            \"X-Stainless-Arch\": `other:${EdgeRuntime}`,\n            \"X-Stainless-Runtime\": \"edge\",\n            \"X-Stainless-Runtime-Version\": globalThis.process.version\n        };\n    }\n    // Check if Node.js\n    if (detectedPlatform === \"node\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            \"X-Stainless-OS\": normalizePlatform(globalThis.process.platform ?? \"unknown\"),\n            \"X-Stainless-Arch\": normalizeArch(globalThis.process.arch ?? \"unknown\"),\n            \"X-Stainless-Runtime\": \"node\",\n            \"X-Stainless-Runtime-Version\": globalThis.process.version ?? \"unknown\"\n        };\n    }\n    const browserInfo = getBrowserInfo();\n    if (browserInfo) {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            \"X-Stainless-OS\": \"Unknown\",\n            \"X-Stainless-Arch\": \"unknown\",\n            \"X-Stainless-Runtime\": `browser:${browserInfo.browser}`,\n            \"X-Stainless-Runtime-Version\": browserInfo.version\n        };\n    }\n    // TODO add support for Cloudflare workers, etc.\n    return {\n        \"X-Stainless-Lang\": \"js\",\n        \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n        \"X-Stainless-OS\": \"Unknown\",\n        \"X-Stainless-Arch\": \"unknown\",\n        \"X-Stainless-Runtime\": \"unknown\",\n        \"X-Stainless-Runtime-Version\": \"unknown\"\n    };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n    if (typeof navigator === \"undefined\" || !navigator) {\n        return null;\n    }\n    // NOTE: The order matters here!\n    const browserPatterns = [\n        {\n            key: \"edge\",\n            pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"ie\",\n            pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"ie\",\n            pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"chrome\",\n            pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"firefox\",\n            pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"safari\",\n            pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/\n        }\n    ];\n    // Find the FIRST matching browser\n    for (const { key, pattern } of browserPatterns){\n        const match = pattern.exec(navigator.userAgent);\n        if (match) {\n            const major = match[1] || 0;\n            const minor = match[2] || 0;\n            const patch = match[3] || 0;\n            return {\n                browser: key,\n                version: `${major}.${minor}.${patch}`\n            };\n        }\n    }\n    return null;\n}\nconst normalizeArch = (arch)=>{\n    // Node docs:\n    // - https://nodejs.org/api/process.html#processarch\n    // Deno docs:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    if (arch === \"x32\") return \"x32\";\n    if (arch === \"x86_64\" || arch === \"x64\") return \"x64\";\n    if (arch === \"arm\") return \"arm\";\n    if (arch === \"aarch64\" || arch === \"arm64\") return \"arm64\";\n    if (arch) return `other:${arch}`;\n    return \"unknown\";\n};\nconst normalizePlatform = (platform)=>{\n    // Node platforms:\n    // - https://nodejs.org/api/process.html#processplatform\n    // Deno platforms:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    // - https://github.com/denoland/deno/issues/14799\n    platform = platform.toLowerCase();\n    // NOTE: this iOS check is untested and may not work\n    // Node does not work natively on IOS, there is a fork at\n    // https://github.com/nodejs-mobile/nodejs-mobile\n    // however it is unknown at the time of writing how to detect if it is running\n    if (platform.includes(\"ios\")) return \"iOS\";\n    if (platform === \"android\") return \"Android\";\n    if (platform === \"darwin\") return \"MacOS\";\n    if (platform === \"win32\") return \"Windows\";\n    if (platform === \"freebsd\") return \"FreeBSD\";\n    if (platform === \"openbsd\") return \"OpenBSD\";\n    if (platform === \"linux\") return \"Linux\";\n    if (platform) return `Other:${platform}`;\n    return \"Unknown\";\n};\nlet _platformHeaders;\nconst getPlatformHeaders = ()=>{\n    return _platformHeaders ?? (_platformHeaders = getPlatformProperties());\n}; //# sourceMappingURL=detect-platform.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/detect-platform.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/errors.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/internal/errors.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   castToError: () => (/* binding */ castToError),\n/* harmony export */   isAbortError: () => (/* binding */ isAbortError)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nfunction isAbortError(err) {\n    return typeof err === \"object\" && err !== null && // Spec-compliant fetch implementations\n    (\"name\" in err && err.name === \"AbortError\" || // Expo fetch\n    \"message\" in err && String(err.message).includes(\"FetchRequestCanceledException\"));\n}\nconst castToError = (err)=>{\n    if (err instanceof Error) return err;\n    if (typeof err === \"object\" && err !== null) {\n        try {\n            if (Object.prototype.toString.call(err) === \"[object Error]\") {\n                // @ts-ignore - not all envs have native support for cause yet\n                const error = new Error(err.message, err.cause ? {\n                    cause: err.cause\n                } : {});\n                if (err.stack) error.stack = err.stack;\n                // @ts-ignore - not all envs have native support for cause yet\n                if (err.cause && !error.cause) error.cause = err.cause;\n                if (err.name) error.name = err.name;\n                return error;\n            }\n        } catch  {}\n        try {\n            return new Error(JSON.stringify(err));\n        } catch  {}\n    }\n    return new Error(err);\n}; //# sourceMappingURL=errors.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL2Vycm9ycy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxzRkFBc0Y7QUFDL0UsU0FBU0EsYUFBYUMsR0FBRztJQUM1QixPQUFRLE9BQU9BLFFBQVEsWUFDbkJBLFFBQVEsUUFDUix1Q0FBdUM7SUFDdEMsV0FBV0EsT0FBT0EsSUFBSUMsSUFBSSxLQUFLLGdCQUM1QixhQUFhO0lBQ1osYUFBYUQsT0FBT0UsT0FBT0YsSUFBSUcsT0FBTyxFQUFFQyxRQUFRLENBQUMsZ0NBQWdDO0FBQzlGO0FBQ08sTUFBTUMsY0FBYyxDQUFDTDtJQUN4QixJQUFJQSxlQUFlTSxPQUNmLE9BQU9OO0lBQ1gsSUFBSSxPQUFPQSxRQUFRLFlBQVlBLFFBQVEsTUFBTTtRQUN6QyxJQUFJO1lBQ0EsSUFBSU8sT0FBT0MsU0FBUyxDQUFDQyxRQUFRLENBQUNDLElBQUksQ0FBQ1YsU0FBUyxrQkFBa0I7Z0JBQzFELDhEQUE4RDtnQkFDOUQsTUFBTVcsUUFBUSxJQUFJTCxNQUFNTixJQUFJRyxPQUFPLEVBQUVILElBQUlZLEtBQUssR0FBRztvQkFBRUEsT0FBT1osSUFBSVksS0FBSztnQkFBQyxJQUFJLENBQUM7Z0JBQ3pFLElBQUlaLElBQUlhLEtBQUssRUFDVEYsTUFBTUUsS0FBSyxHQUFHYixJQUFJYSxLQUFLO2dCQUMzQiw4REFBOEQ7Z0JBQzlELElBQUliLElBQUlZLEtBQUssSUFBSSxDQUFDRCxNQUFNQyxLQUFLLEVBQ3pCRCxNQUFNQyxLQUFLLEdBQUdaLElBQUlZLEtBQUs7Z0JBQzNCLElBQUlaLElBQUlDLElBQUksRUFDUlUsTUFBTVYsSUFBSSxHQUFHRCxJQUFJQyxJQUFJO2dCQUN6QixPQUFPVTtZQUNYO1FBQ0osRUFDQSxPQUFNLENBQUU7UUFDUixJQUFJO1lBQ0EsT0FBTyxJQUFJTCxNQUFNUSxLQUFLQyxTQUFTLENBQUNmO1FBQ3BDLEVBQ0EsT0FBTSxDQUFFO0lBQ1o7SUFDQSxPQUFPLElBQUlNLE1BQU1OO0FBQ3JCLEVBQUUsQ0FDRixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvaW50ZXJuYWwvZXJyb3JzLm1qcz9hYWVlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5leHBvcnQgZnVuY3Rpb24gaXNBYm9ydEVycm9yKGVycikge1xuICAgIHJldHVybiAodHlwZW9mIGVyciA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgZXJyICE9PSBudWxsICYmXG4gICAgICAgIC8vIFNwZWMtY29tcGxpYW50IGZldGNoIGltcGxlbWVudGF0aW9uc1xuICAgICAgICAoKCduYW1lJyBpbiBlcnIgJiYgZXJyLm5hbWUgPT09ICdBYm9ydEVycm9yJykgfHxcbiAgICAgICAgICAgIC8vIEV4cG8gZmV0Y2hcbiAgICAgICAgICAgICgnbWVzc2FnZScgaW4gZXJyICYmIFN0cmluZyhlcnIubWVzc2FnZSkuaW5jbHVkZXMoJ0ZldGNoUmVxdWVzdENhbmNlbGVkRXhjZXB0aW9uJykpKSk7XG59XG5leHBvcnQgY29uc3QgY2FzdFRvRXJyb3IgPSAoZXJyKSA9PiB7XG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKVxuICAgICAgICByZXR1cm4gZXJyO1xuICAgIGlmICh0eXBlb2YgZXJyID09PSAnb2JqZWN0JyAmJiBlcnIgIT09IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZXJyKSA9PT0gJ1tvYmplY3QgRXJyb3JdJykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgLSBub3QgYWxsIGVudnMgaGF2ZSBuYXRpdmUgc3VwcG9ydCBmb3IgY2F1c2UgeWV0XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoZXJyLm1lc3NhZ2UsIGVyci5jYXVzZSA/IHsgY2F1c2U6IGVyci5jYXVzZSB9IDoge30pO1xuICAgICAgICAgICAgICAgIGlmIChlcnIuc3RhY2spXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLnN0YWNrID0gZXJyLnN0YWNrO1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgLSBub3QgYWxsIGVudnMgaGF2ZSBuYXRpdmUgc3VwcG9ydCBmb3IgY2F1c2UgeWV0XG4gICAgICAgICAgICAgICAgaWYgKGVyci5jYXVzZSAmJiAhZXJyb3IuY2F1c2UpXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmNhdXNlID0gZXJyLmNhdXNlO1xuICAgICAgICAgICAgICAgIGlmIChlcnIubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IubmFtZSA9IGVyci5uYW1lO1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7IH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoZXJyKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggeyB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgRXJyb3IoZXJyKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMubWpzLm1hcCJdLCJuYW1lcyI6WyJpc0Fib3J0RXJyb3IiLCJlcnIiLCJuYW1lIiwiU3RyaW5nIiwibWVzc2FnZSIsImluY2x1ZGVzIiwiY2FzdFRvRXJyb3IiLCJFcnJvciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsImVycm9yIiwiY2F1c2UiLCJzdGFjayIsIkpTT04iLCJzdHJpbmdpZnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/errors.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/headers.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/internal/headers.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildHeaders: () => (/* binding */ buildHeaders),\n/* harmony export */   isEmptyHeaders: () => (/* binding */ isEmptyHeaders)\n/* harmony export */ });\n/* harmony import */ var _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/values.mjs */ \"(rsc)/./node_modules/openai/internal/utils/values.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nconst brand_privateNullableHeaders = /* @__PURE__ */ Symbol(\"brand.privateNullableHeaders\");\nfunction* iterateHeaders(headers) {\n    if (!headers) return;\n    if (brand_privateNullableHeaders in headers) {\n        const { values, nulls } = headers;\n        yield* values.entries();\n        for (const name of nulls){\n            yield [\n                name,\n                null\n            ];\n        }\n        return;\n    }\n    let shouldClear = false;\n    let iter;\n    if (headers instanceof Headers) {\n        iter = headers.entries();\n    } else if ((0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.isReadonlyArray)(headers)) {\n        iter = headers;\n    } else {\n        shouldClear = true;\n        iter = Object.entries(headers ?? {});\n    }\n    for (let row of iter){\n        const name = row[0];\n        if (typeof name !== \"string\") throw new TypeError(\"expected header name to be a string\");\n        const values = (0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.isReadonlyArray)(row[1]) ? row[1] : [\n            row[1]\n        ];\n        let didClear = false;\n        for (const value of values){\n            if (value === undefined) continue;\n            // Objects keys always overwrite older headers, they never append.\n            // Yield a null to clear the header before adding the new values.\n            if (shouldClear && !didClear) {\n                didClear = true;\n                yield [\n                    name,\n                    null\n                ];\n            }\n            yield [\n                name,\n                value\n            ];\n        }\n    }\n}\nconst buildHeaders = (newHeaders)=>{\n    const targetHeaders = new Headers();\n    const nullHeaders = new Set();\n    for (const headers of newHeaders){\n        const seenHeaders = new Set();\n        for (const [name, value] of iterateHeaders(headers)){\n            const lowerName = name.toLowerCase();\n            if (!seenHeaders.has(lowerName)) {\n                targetHeaders.delete(name);\n                seenHeaders.add(lowerName);\n            }\n            if (value === null) {\n                targetHeaders.delete(name);\n                nullHeaders.add(lowerName);\n            } else {\n                targetHeaders.append(name, value);\n                nullHeaders.delete(lowerName);\n            }\n        }\n    }\n    return {\n        [brand_privateNullableHeaders]: true,\n        values: targetHeaders,\n        nulls: nullHeaders\n    };\n};\nconst isEmptyHeaders = (headers)=>{\n    for (const _ of iterateHeaders(headers))return false;\n    return true;\n}; //# sourceMappingURL=headers.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL2hlYWRlcnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNGQUFzRjtBQUNqQztBQUNyRCxNQUFNQywrQkFBK0IsYUFBYSxHQUFHQyxPQUFPO0FBQzVELFVBQVVDLGVBQWVDLE9BQU87SUFDNUIsSUFBSSxDQUFDQSxTQUNEO0lBQ0osSUFBSUgsZ0NBQWdDRyxTQUFTO1FBQ3pDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxLQUFLLEVBQUUsR0FBR0Y7UUFDMUIsT0FBT0MsT0FBT0UsT0FBTztRQUNyQixLQUFLLE1BQU1DLFFBQVFGLE1BQU87WUFDdEIsTUFBTTtnQkFBQ0U7Z0JBQU07YUFBSztRQUN0QjtRQUNBO0lBQ0o7SUFDQSxJQUFJQyxjQUFjO0lBQ2xCLElBQUlDO0lBQ0osSUFBSU4sbUJBQW1CTyxTQUFTO1FBQzVCRCxPQUFPTixRQUFRRyxPQUFPO0lBQzFCLE9BQ0ssSUFBSVAsa0VBQWVBLENBQUNJLFVBQVU7UUFDL0JNLE9BQU9OO0lBQ1gsT0FDSztRQUNESyxjQUFjO1FBQ2RDLE9BQU9FLE9BQU9MLE9BQU8sQ0FBQ0gsV0FBVyxDQUFDO0lBQ3RDO0lBQ0EsS0FBSyxJQUFJUyxPQUFPSCxLQUFNO1FBQ2xCLE1BQU1GLE9BQU9LLEdBQUcsQ0FBQyxFQUFFO1FBQ25CLElBQUksT0FBT0wsU0FBUyxVQUNoQixNQUFNLElBQUlNLFVBQVU7UUFDeEIsTUFBTVQsU0FBU0wsa0VBQWVBLENBQUNhLEdBQUcsQ0FBQyxFQUFFLElBQUlBLEdBQUcsQ0FBQyxFQUFFLEdBQUc7WUFBQ0EsR0FBRyxDQUFDLEVBQUU7U0FBQztRQUMxRCxJQUFJRSxXQUFXO1FBQ2YsS0FBSyxNQUFNQyxTQUFTWCxPQUFRO1lBQ3hCLElBQUlXLFVBQVVDLFdBQ1Y7WUFDSixrRUFBa0U7WUFDbEUsaUVBQWlFO1lBQ2pFLElBQUlSLGVBQWUsQ0FBQ00sVUFBVTtnQkFDMUJBLFdBQVc7Z0JBQ1gsTUFBTTtvQkFBQ1A7b0JBQU07aUJBQUs7WUFDdEI7WUFDQSxNQUFNO2dCQUFDQTtnQkFBTVE7YUFBTTtRQUN2QjtJQUNKO0FBQ0o7QUFDTyxNQUFNRSxlQUFlLENBQUNDO0lBQ3pCLE1BQU1DLGdCQUFnQixJQUFJVDtJQUMxQixNQUFNVSxjQUFjLElBQUlDO0lBQ3hCLEtBQUssTUFBTWxCLFdBQVdlLFdBQVk7UUFDOUIsTUFBTUksY0FBYyxJQUFJRDtRQUN4QixLQUFLLE1BQU0sQ0FBQ2QsTUFBTVEsTUFBTSxJQUFJYixlQUFlQyxTQUFVO1lBQ2pELE1BQU1vQixZQUFZaEIsS0FBS2lCLFdBQVc7WUFDbEMsSUFBSSxDQUFDRixZQUFZRyxHQUFHLENBQUNGLFlBQVk7Z0JBQzdCSixjQUFjTyxNQUFNLENBQUNuQjtnQkFDckJlLFlBQVlLLEdBQUcsQ0FBQ0o7WUFDcEI7WUFDQSxJQUFJUixVQUFVLE1BQU07Z0JBQ2hCSSxjQUFjTyxNQUFNLENBQUNuQjtnQkFDckJhLFlBQVlPLEdBQUcsQ0FBQ0o7WUFDcEIsT0FDSztnQkFDREosY0FBY1MsTUFBTSxDQUFDckIsTUFBTVE7Z0JBQzNCSyxZQUFZTSxNQUFNLENBQUNIO1lBQ3ZCO1FBQ0o7SUFDSjtJQUNBLE9BQU87UUFBRSxDQUFDdkIsNkJBQTZCLEVBQUU7UUFBTUksUUFBUWU7UUFBZWQsT0FBT2U7SUFBWTtBQUM3RixFQUFFO0FBQ0ssTUFBTVMsaUJBQWlCLENBQUMxQjtJQUMzQixLQUFLLE1BQU0yQixLQUFLNUIsZUFBZUMsU0FDM0IsT0FBTztJQUNYLE9BQU87QUFDWCxFQUFFLENBQ0Ysb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL2hlYWRlcnMubWpzPzE4NDgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IGlzUmVhZG9ubHlBcnJheSB9IGZyb20gXCIuL3V0aWxzL3ZhbHVlcy5tanNcIjtcbmNvbnN0IGJyYW5kX3ByaXZhdGVOdWxsYWJsZUhlYWRlcnMgPSAvKiBAX19QVVJFX18gKi8gU3ltYm9sKCdicmFuZC5wcml2YXRlTnVsbGFibGVIZWFkZXJzJyk7XG5mdW5jdGlvbiogaXRlcmF0ZUhlYWRlcnMoaGVhZGVycykge1xuICAgIGlmICghaGVhZGVycylcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChicmFuZF9wcml2YXRlTnVsbGFibGVIZWFkZXJzIGluIGhlYWRlcnMpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZXMsIG51bGxzIH0gPSBoZWFkZXJzO1xuICAgICAgICB5aWVsZCogdmFsdWVzLmVudHJpZXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIG51bGxzKSB7XG4gICAgICAgICAgICB5aWVsZCBbbmFtZSwgbnVsbF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgc2hvdWxkQ2xlYXIgPSBmYWxzZTtcbiAgICBsZXQgaXRlcjtcbiAgICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgICAgaXRlciA9IGhlYWRlcnMuZW50cmllcygpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1JlYWRvbmx5QXJyYXkoaGVhZGVycykpIHtcbiAgICAgICAgaXRlciA9IGhlYWRlcnM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzaG91bGRDbGVhciA9IHRydWU7XG4gICAgICAgIGl0ZXIgPSBPYmplY3QuZW50cmllcyhoZWFkZXJzID8/IHt9KTtcbiAgICB9XG4gICAgZm9yIChsZXQgcm93IG9mIGl0ZXIpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHJvd1swXTtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4cGVjdGVkIGhlYWRlciBuYW1lIHRvIGJlIGEgc3RyaW5nJyk7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IGlzUmVhZG9ubHlBcnJheShyb3dbMV0pID8gcm93WzFdIDogW3Jvd1sxXV07XG4gICAgICAgIGxldCBkaWRDbGVhciA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAvLyBPYmplY3RzIGtleXMgYWx3YXlzIG92ZXJ3cml0ZSBvbGRlciBoZWFkZXJzLCB0aGV5IG5ldmVyIGFwcGVuZC5cbiAgICAgICAgICAgIC8vIFlpZWxkIGEgbnVsbCB0byBjbGVhciB0aGUgaGVhZGVyIGJlZm9yZSBhZGRpbmcgdGhlIG5ldyB2YWx1ZXMuXG4gICAgICAgICAgICBpZiAoc2hvdWxkQ2xlYXIgJiYgIWRpZENsZWFyKSB7XG4gICAgICAgICAgICAgICAgZGlkQ2xlYXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHlpZWxkIFtuYW1lLCBudWxsXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHlpZWxkIFtuYW1lLCB2YWx1ZV07XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY29uc3QgYnVpbGRIZWFkZXJzID0gKG5ld0hlYWRlcnMpID0+IHtcbiAgICBjb25zdCB0YXJnZXRIZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgICBjb25zdCBudWxsSGVhZGVycyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IGhlYWRlcnMgb2YgbmV3SGVhZGVycykge1xuICAgICAgICBjb25zdCBzZWVuSGVhZGVycyA9IG5ldyBTZXQoKTtcbiAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIGl0ZXJhdGVIZWFkZXJzKGhlYWRlcnMpKSB7XG4gICAgICAgICAgICBjb25zdCBsb3dlck5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAoIXNlZW5IZWFkZXJzLmhhcyhsb3dlck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0SGVhZGVycy5kZWxldGUobmFtZSk7XG4gICAgICAgICAgICAgICAgc2VlbkhlYWRlcnMuYWRkKGxvd2VyTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRIZWFkZXJzLmRlbGV0ZShuYW1lKTtcbiAgICAgICAgICAgICAgICBudWxsSGVhZGVycy5hZGQobG93ZXJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldEhlYWRlcnMuYXBwZW5kKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBudWxsSGVhZGVycy5kZWxldGUobG93ZXJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBbYnJhbmRfcHJpdmF0ZU51bGxhYmxlSGVhZGVyc106IHRydWUsIHZhbHVlczogdGFyZ2V0SGVhZGVycywgbnVsbHM6IG51bGxIZWFkZXJzIH07XG59O1xuZXhwb3J0IGNvbnN0IGlzRW1wdHlIZWFkZXJzID0gKGhlYWRlcnMpID0+IHtcbiAgICBmb3IgKGNvbnN0IF8gb2YgaXRlcmF0ZUhlYWRlcnMoaGVhZGVycykpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWFkZXJzLm1qcy5tYXAiXSwibmFtZXMiOlsiaXNSZWFkb25seUFycmF5IiwiYnJhbmRfcHJpdmF0ZU51bGxhYmxlSGVhZGVycyIsIlN5bWJvbCIsIml0ZXJhdGVIZWFkZXJzIiwiaGVhZGVycyIsInZhbHVlcyIsIm51bGxzIiwiZW50cmllcyIsIm5hbWUiLCJzaG91bGRDbGVhciIsIml0ZXIiLCJIZWFkZXJzIiwiT2JqZWN0Iiwicm93IiwiVHlwZUVycm9yIiwiZGlkQ2xlYXIiLCJ2YWx1ZSIsInVuZGVmaW5lZCIsImJ1aWxkSGVhZGVycyIsIm5ld0hlYWRlcnMiLCJ0YXJnZXRIZWFkZXJzIiwibnVsbEhlYWRlcnMiLCJTZXQiLCJzZWVuSGVhZGVycyIsImxvd2VyTmFtZSIsInRvTG93ZXJDYXNlIiwiaGFzIiwiZGVsZXRlIiwiYWRkIiwiYXBwZW5kIiwiaXNFbXB0eUhlYWRlcnMiLCJfIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/headers.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/parse.mjs":
/*!************************************************!*\
  !*** ./node_modules/openai/internal/parse.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addRequestID: () => (/* binding */ addRequestID),\n/* harmony export */   defaultParseResponse: () => (/* binding */ defaultParseResponse)\n/* harmony export */ });\n/* harmony import */ var _core_streaming_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/streaming.mjs */ \"(rsc)/./node_modules/openai/core/streaming.mjs\");\n/* harmony import */ var _utils_log_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/log.mjs */ \"(rsc)/./node_modules/openai/internal/utils/log.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nasync function defaultParseResponse(client, props) {\n    const { response, requestLogID, retryOfRequestLogID, startTime } = props;\n    const body = await (async ()=>{\n        if (props.options.stream) {\n            (0,_utils_log_mjs__WEBPACK_IMPORTED_MODULE_1__.loggerFor)(client).debug(\"response\", response.status, response.url, response.headers, response.body);\n            // Note: there is an invariant here that isn't represented in the type system\n            // that if you set `stream: true` the response type must also be `Stream<T>`\n            if (props.options.__streamClass) {\n                return props.options.__streamClass.fromSSEResponse(response, props.controller, client);\n            }\n            return _core_streaming_mjs__WEBPACK_IMPORTED_MODULE_0__.Stream.fromSSEResponse(response, props.controller, client);\n        }\n        // fetch refuses to read the body when the status code is 204.\n        if (response.status === 204) {\n            return null;\n        }\n        if (props.options.__binaryResponse) {\n            return response;\n        }\n        const contentType = response.headers.get(\"content-type\");\n        const mediaType = contentType?.split(\";\")[0]?.trim();\n        const isJSON = mediaType?.includes(\"application/json\") || mediaType?.endsWith(\"+json\");\n        if (isJSON) {\n            const json = await response.json();\n            return addRequestID(json, response);\n        }\n        const text = await response.text();\n        return text;\n    })();\n    (0,_utils_log_mjs__WEBPACK_IMPORTED_MODULE_1__.loggerFor)(client).debug(`[${requestLogID}] response parsed`, (0,_utils_log_mjs__WEBPACK_IMPORTED_MODULE_1__.formatRequestDetails)({\n        retryOfRequestLogID,\n        url: response.url,\n        status: response.status,\n        body,\n        durationMs: Date.now() - startTime\n    }));\n    return body;\n}\nfunction addRequestID(value, response) {\n    if (!value || typeof value !== \"object\" || Array.isArray(value)) {\n        return value;\n    }\n    return Object.defineProperty(value, \"_request_id\", {\n        value: response.headers.get(\"x-request-id\"),\n        enumerable: false\n    });\n} //# sourceMappingURL=parse.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3BhcnNlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ3ZDO0FBQ21CO0FBQzNELGVBQWVHLHFCQUFxQkMsTUFBTSxFQUFFQyxLQUFLO0lBQ3BELE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxZQUFZLEVBQUVDLG1CQUFtQixFQUFFQyxTQUFTLEVBQUUsR0FBR0o7SUFDbkUsTUFBTUssT0FBTyxNQUFNLENBQUM7UUFDaEIsSUFBSUwsTUFBTU0sT0FBTyxDQUFDQyxNQUFNLEVBQUU7WUFDdEJWLHlEQUFTQSxDQUFDRSxRQUFRUyxLQUFLLENBQUMsWUFBWVAsU0FBU1EsTUFBTSxFQUFFUixTQUFTUyxHQUFHLEVBQUVULFNBQVNVLE9BQU8sRUFBRVYsU0FBU0ksSUFBSTtZQUNsRyw2RUFBNkU7WUFDN0UsNEVBQTRFO1lBQzVFLElBQUlMLE1BQU1NLE9BQU8sQ0FBQ00sYUFBYSxFQUFFO2dCQUM3QixPQUFPWixNQUFNTSxPQUFPLENBQUNNLGFBQWEsQ0FBQ0MsZUFBZSxDQUFDWixVQUFVRCxNQUFNYyxVQUFVLEVBQUVmO1lBQ25GO1lBQ0EsT0FBT0osdURBQU1BLENBQUNrQixlQUFlLENBQUNaLFVBQVVELE1BQU1jLFVBQVUsRUFBRWY7UUFDOUQ7UUFDQSw4REFBOEQ7UUFDOUQsSUFBSUUsU0FBU1EsTUFBTSxLQUFLLEtBQUs7WUFDekIsT0FBTztRQUNYO1FBQ0EsSUFBSVQsTUFBTU0sT0FBTyxDQUFDUyxnQkFBZ0IsRUFBRTtZQUNoQyxPQUFPZDtRQUNYO1FBQ0EsTUFBTWUsY0FBY2YsU0FBU1UsT0FBTyxDQUFDTSxHQUFHLENBQUM7UUFDekMsTUFBTUMsWUFBWUYsYUFBYUcsTUFBTSxJQUFJLENBQUMsRUFBRSxFQUFFQztRQUM5QyxNQUFNQyxTQUFTSCxXQUFXSSxTQUFTLHVCQUF1QkosV0FBV0ssU0FBUztRQUM5RSxJQUFJRixRQUFRO1lBQ1IsTUFBTUcsT0FBTyxNQUFNdkIsU0FBU3VCLElBQUk7WUFDaEMsT0FBT0MsYUFBYUQsTUFBTXZCO1FBQzlCO1FBQ0EsTUFBTXlCLE9BQU8sTUFBTXpCLFNBQVN5QixJQUFJO1FBQ2hDLE9BQU9BO0lBQ1g7SUFDQTdCLHlEQUFTQSxDQUFDRSxRQUFRUyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUVOLGFBQWEsaUJBQWlCLENBQUMsRUFBRU4sb0VBQW9CQSxDQUFDO1FBQzlFTztRQUNBTyxLQUFLVCxTQUFTUyxHQUFHO1FBQ2pCRCxRQUFRUixTQUFTUSxNQUFNO1FBQ3ZCSjtRQUNBc0IsWUFBWUMsS0FBS0MsR0FBRyxLQUFLekI7SUFDN0I7SUFDQSxPQUFPQztBQUNYO0FBQ08sU0FBU29CLGFBQWFLLEtBQUssRUFBRTdCLFFBQVE7SUFDeEMsSUFBSSxDQUFDNkIsU0FBUyxPQUFPQSxVQUFVLFlBQVlDLE1BQU1DLE9BQU8sQ0FBQ0YsUUFBUTtRQUM3RCxPQUFPQTtJQUNYO0lBQ0EsT0FBT0csT0FBT0MsY0FBYyxDQUFDSixPQUFPLGVBQWU7UUFDL0NBLE9BQU83QixTQUFTVSxPQUFPLENBQUNNLEdBQUcsQ0FBQztRQUM1QmtCLFlBQVk7SUFDaEI7QUFDSixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9pbnRlcm5hbC9wYXJzZS5tanM/YzgxNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSBcIi4uL2NvcmUvc3RyZWFtaW5nLm1qc1wiO1xuaW1wb3J0IHsgZm9ybWF0UmVxdWVzdERldGFpbHMsIGxvZ2dlckZvciB9IGZyb20gXCIuL3V0aWxzL2xvZy5tanNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWZhdWx0UGFyc2VSZXNwb25zZShjbGllbnQsIHByb3BzKSB7XG4gICAgY29uc3QgeyByZXNwb25zZSwgcmVxdWVzdExvZ0lELCByZXRyeU9mUmVxdWVzdExvZ0lELCBzdGFydFRpbWUgfSA9IHByb3BzO1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCAoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAocHJvcHMub3B0aW9ucy5zdHJlYW0pIHtcbiAgICAgICAgICAgIGxvZ2dlckZvcihjbGllbnQpLmRlYnVnKCdyZXNwb25zZScsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UudXJsLCByZXNwb25zZS5oZWFkZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIC8vIE5vdGU6IHRoZXJlIGlzIGFuIGludmFyaWFudCBoZXJlIHRoYXQgaXNuJ3QgcmVwcmVzZW50ZWQgaW4gdGhlIHR5cGUgc3lzdGVtXG4gICAgICAgICAgICAvLyB0aGF0IGlmIHlvdSBzZXQgYHN0cmVhbTogdHJ1ZWAgdGhlIHJlc3BvbnNlIHR5cGUgbXVzdCBhbHNvIGJlIGBTdHJlYW08VD5gXG4gICAgICAgICAgICBpZiAocHJvcHMub3B0aW9ucy5fX3N0cmVhbUNsYXNzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzLm9wdGlvbnMuX19zdHJlYW1DbGFzcy5mcm9tU1NFUmVzcG9uc2UocmVzcG9uc2UsIHByb3BzLmNvbnRyb2xsZXIsIGNsaWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gU3RyZWFtLmZyb21TU0VSZXNwb25zZShyZXNwb25zZSwgcHJvcHMuY29udHJvbGxlciwgY2xpZW50KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBmZXRjaCByZWZ1c2VzIHRvIHJlYWQgdGhlIGJvZHkgd2hlbiB0aGUgc3RhdHVzIGNvZGUgaXMgMjA0LlxuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wcy5vcHRpb25zLl9fYmluYXJ5UmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTtcbiAgICAgICAgY29uc3QgbWVkaWFUeXBlID0gY29udGVudFR5cGU/LnNwbGl0KCc7JylbMF0/LnRyaW0oKTtcbiAgICAgICAgY29uc3QgaXNKU09OID0gbWVkaWFUeXBlPy5pbmNsdWRlcygnYXBwbGljYXRpb24vanNvbicpIHx8IG1lZGlhVHlwZT8uZW5kc1dpdGgoJytqc29uJyk7XG4gICAgICAgIGlmIChpc0pTT04pIHtcbiAgICAgICAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICByZXR1cm4gYWRkUmVxdWVzdElEKGpzb24sIHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9KSgpO1xuICAgIGxvZ2dlckZvcihjbGllbnQpLmRlYnVnKGBbJHtyZXF1ZXN0TG9nSUR9XSByZXNwb25zZSBwYXJzZWRgLCBmb3JtYXRSZXF1ZXN0RGV0YWlscyh7XG4gICAgICAgIHJldHJ5T2ZSZXF1ZXN0TG9nSUQsXG4gICAgICAgIHVybDogcmVzcG9uc2UudXJsLFxuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgYm9keSxcbiAgICAgICAgZHVyYXRpb25NczogRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSxcbiAgICB9KSk7XG4gICAgcmV0dXJuIGJvZHk7XG59XG5leHBvcnQgZnVuY3Rpb24gYWRkUmVxdWVzdElEKHZhbHVlLCByZXNwb25zZSkge1xuICAgIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsdWUsICdfcmVxdWVzdF9pZCcsIHtcbiAgICAgICAgdmFsdWU6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCd4LXJlcXVlc3QtaWQnKSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZS5tanMubWFwIl0sIm5hbWVzIjpbIlN0cmVhbSIsImZvcm1hdFJlcXVlc3REZXRhaWxzIiwibG9nZ2VyRm9yIiwiZGVmYXVsdFBhcnNlUmVzcG9uc2UiLCJjbGllbnQiLCJwcm9wcyIsInJlc3BvbnNlIiwicmVxdWVzdExvZ0lEIiwicmV0cnlPZlJlcXVlc3RMb2dJRCIsInN0YXJ0VGltZSIsImJvZHkiLCJvcHRpb25zIiwic3RyZWFtIiwiZGVidWciLCJzdGF0dXMiLCJ1cmwiLCJoZWFkZXJzIiwiX19zdHJlYW1DbGFzcyIsImZyb21TU0VSZXNwb25zZSIsImNvbnRyb2xsZXIiLCJfX2JpbmFyeVJlc3BvbnNlIiwiY29udGVudFR5cGUiLCJnZXQiLCJtZWRpYVR5cGUiLCJzcGxpdCIsInRyaW0iLCJpc0pTT04iLCJpbmNsdWRlcyIsImVuZHNXaXRoIiwianNvbiIsImFkZFJlcXVlc3RJRCIsInRleHQiLCJkdXJhdGlvbk1zIiwiRGF0ZSIsIm5vdyIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/parse.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/qs/formats.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/internal/qs/formats.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RFC1738: () => (/* binding */ RFC1738),\n/* harmony export */   RFC3986: () => (/* binding */ RFC3986),\n/* harmony export */   default_format: () => (/* binding */ default_format),\n/* harmony export */   default_formatter: () => (/* binding */ default_formatter),\n/* harmony export */   formatters: () => (/* binding */ formatters)\n/* harmony export */ });\nconst default_format = \"RFC3986\";\nconst default_formatter = (v)=>String(v);\nconst formatters = {\n    RFC1738: (v)=>String(v).replace(/%20/g, \"+\"),\n    RFC3986: default_formatter\n};\nconst RFC1738 = \"RFC1738\";\nconst RFC3986 = \"RFC3986\"; //# sourceMappingURL=formats.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3FzL2Zvcm1hdHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQU8sTUFBTUEsaUJBQWlCLFVBQVU7QUFDakMsTUFBTUMsb0JBQW9CLENBQUNDLElBQU1DLE9BQU9ELEdBQUc7QUFDM0MsTUFBTUUsYUFBYTtJQUN0QkMsU0FBUyxDQUFDSCxJQUFNQyxPQUFPRCxHQUFHSSxPQUFPLENBQUMsUUFBUTtJQUMxQ0MsU0FBU047QUFDYixFQUFFO0FBQ0ssTUFBTUksVUFBVSxVQUFVO0FBQzFCLE1BQU1FLFVBQVUsVUFBVSxDQUNqQyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvaW50ZXJuYWwvcXMvZm9ybWF0cy5tanM/YzMwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZGVmYXVsdF9mb3JtYXQgPSAnUkZDMzk4Nic7XG5leHBvcnQgY29uc3QgZGVmYXVsdF9mb3JtYXR0ZXIgPSAodikgPT4gU3RyaW5nKHYpO1xuZXhwb3J0IGNvbnN0IGZvcm1hdHRlcnMgPSB7XG4gICAgUkZDMTczODogKHYpID0+IFN0cmluZyh2KS5yZXBsYWNlKC8lMjAvZywgJysnKSxcbiAgICBSRkMzOTg2OiBkZWZhdWx0X2Zvcm1hdHRlcixcbn07XG5leHBvcnQgY29uc3QgUkZDMTczOCA9ICdSRkMxNzM4JztcbmV4cG9ydCBjb25zdCBSRkMzOTg2ID0gJ1JGQzM5ODYnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0cy5tanMubWFwIl0sIm5hbWVzIjpbImRlZmF1bHRfZm9ybWF0IiwiZGVmYXVsdF9mb3JtYXR0ZXIiLCJ2IiwiU3RyaW5nIiwiZm9ybWF0dGVycyIsIlJGQzE3MzgiLCJyZXBsYWNlIiwiUkZDMzk4NiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/qs/formats.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/qs/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/openai/internal/qs/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formats: () => (/* binding */ formats),\n/* harmony export */   stringify: () => (/* reexport safe */ _stringify_mjs__WEBPACK_IMPORTED_MODULE_1__.stringify)\n/* harmony export */ });\n/* harmony import */ var _formats_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formats.mjs */ \"(rsc)/./node_modules/openai/internal/qs/formats.mjs\");\n/* harmony import */ var _stringify_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.mjs */ \"(rsc)/./node_modules/openai/internal/qs/stringify.mjs\");\n\nconst formats = {\n    formatters: _formats_mjs__WEBPACK_IMPORTED_MODULE_0__.formatters,\n    RFC1738: _formats_mjs__WEBPACK_IMPORTED_MODULE_0__.RFC1738,\n    RFC3986: _formats_mjs__WEBPACK_IMPORTED_MODULE_0__.RFC3986,\n    default: _formats_mjs__WEBPACK_IMPORTED_MODULE_0__.default_format\n};\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3FzL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTZFO0FBQzdFLE1BQU1JLFVBQVU7SUFDWkgsVUFBVUEsc0RBQUFBO0lBQ1ZDLE9BQU9BLG1EQUFBQTtJQUNQQyxPQUFPQSxtREFBQUE7SUFDUEUsU0FBU0wsd0RBQWNBO0FBQzNCO0FBQzRDO0FBQ3pCLENBQ25CLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9pbnRlcm5hbC9xcy9pbmRleC5tanM/NDllMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZhdWx0X2Zvcm1hdCwgZm9ybWF0dGVycywgUkZDMTczOCwgUkZDMzk4NiB9IGZyb20gXCIuL2Zvcm1hdHMubWpzXCI7XG5jb25zdCBmb3JtYXRzID0ge1xuICAgIGZvcm1hdHRlcnMsXG4gICAgUkZDMTczOCxcbiAgICBSRkMzOTg2LFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRfZm9ybWF0LFxufTtcbmV4cG9ydCB7IHN0cmluZ2lmeSB9IGZyb20gXCIuL3N0cmluZ2lmeS5tanNcIjtcbmV4cG9ydCB7IGZvcm1hdHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOlsiZGVmYXVsdF9mb3JtYXQiLCJmb3JtYXR0ZXJzIiwiUkZDMTczOCIsIlJGQzM5ODYiLCJmb3JtYXRzIiwiZGVmYXVsdCIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/qs/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/qs/stringify.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/internal/qs/stringify.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringify: () => (/* binding */ stringify)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(rsc)/./node_modules/openai/internal/qs/utils.mjs\");\n/* harmony import */ var _formats_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formats.mjs */ \"(rsc)/./node_modules/openai/internal/qs/formats.mjs\");\n/* harmony import */ var _utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/values.mjs */ \"(rsc)/./node_modules/openai/internal/utils/values.mjs\");\n\n\n\nconst array_prefix_generators = {\n    brackets (prefix) {\n        return String(prefix) + \"[]\";\n    },\n    comma: \"comma\",\n    indices (prefix, key) {\n        return String(prefix) + \"[\" + key + \"]\";\n    },\n    repeat (prefix) {\n        return String(prefix);\n    }\n};\nconst push_to_array = function(arr, value_or_array) {\n    Array.prototype.push.apply(arr, (0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isArray)(value_or_array) ? value_or_array : [\n        value_or_array\n    ]);\n};\nlet toISOString;\nconst defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    allowEmptyArrays: false,\n    arrayFormat: \"indices\",\n    charset: \"utf-8\",\n    charsetSentinel: false,\n    delimiter: \"&\",\n    encode: true,\n    encodeDotInKeys: false,\n    encoder: _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.encode,\n    encodeValuesOnly: false,\n    format: _formats_mjs__WEBPACK_IMPORTED_MODULE_1__.default_format,\n    formatter: _formats_mjs__WEBPACK_IMPORTED_MODULE_1__.default_formatter,\n    /** @deprecated */ indices: false,\n    serializeDate (date) {\n        return (toISOString ?? (toISOString = Function.prototype.call.bind(Date.prototype.toISOString)))(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\nfunction is_non_nullish_primitive(v) {\n    return typeof v === \"string\" || typeof v === \"number\" || typeof v === \"boolean\" || typeof v === \"symbol\" || typeof v === \"bigint\";\n}\nconst sentinel = {};\nfunction inner_stringify(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {\n    let obj = object;\n    let tmp_sc = sideChannel;\n    let step = 0;\n    let find_flag = false;\n    while((tmp_sc = tmp_sc.get(sentinel)) !== void undefined && !find_flag){\n        // Where object last appeared in the ref tree\n        const pos = tmp_sc.get(object);\n        step += 1;\n        if (typeof pos !== \"undefined\") {\n            if (pos === step) {\n                throw new RangeError(\"Cyclic object value\");\n            } else {\n                find_flag = true; // Break while\n            }\n        }\n        if (typeof tmp_sc.get(sentinel) === \"undefined\") {\n            step = 0;\n        }\n    }\n    if (typeof filter === \"function\") {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate?.(obj);\n    } else if (generateArrayPrefix === \"comma\" && (0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isArray)(obj)) {\n        obj = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.maybe_map)(obj, function(value) {\n            if (value instanceof Date) {\n                return serializeDate?.(value);\n            }\n            return value;\n        });\n    }\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? // @ts-expect-error\n            encoder(prefix, defaults.encoder, charset, \"key\", format) : prefix;\n        }\n        obj = \"\";\n    }\n    if (is_non_nullish_primitive(obj) || (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.is_buffer)(obj)) {\n        if (encoder) {\n            const key_value = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, \"key\", format);\n            return [\n                formatter?.(key_value) + \"=\" + // @ts-expect-error\n                formatter?.(encoder(obj, defaults.encoder, charset, \"value\", format))\n            ];\n        }\n        return [\n            formatter?.(prefix) + \"=\" + formatter?.(String(obj))\n        ];\n    }\n    const values = [];\n    if (typeof obj === \"undefined\") {\n        return values;\n    }\n    let obj_keys;\n    if (generateArrayPrefix === \"comma\" && (0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isArray)(obj)) {\n        // we need to join elements in\n        if (encodeValuesOnly && encoder) {\n            // @ts-expect-error values only\n            obj = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.maybe_map)(obj, encoder);\n        }\n        obj_keys = [\n            {\n                value: obj.length > 0 ? obj.join(\",\") || null : void undefined\n            }\n        ];\n    } else if ((0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isArray)(filter)) {\n        obj_keys = filter;\n    } else {\n        const keys = Object.keys(obj);\n        obj_keys = sort ? keys.sort(sort) : keys;\n    }\n    const encoded_prefix = encodeDotInKeys ? String(prefix).replace(/\\./g, \"%2E\") : String(prefix);\n    const adjusted_prefix = commaRoundTrip && (0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isArray)(obj) && obj.length === 1 ? encoded_prefix + \"[]\" : encoded_prefix;\n    if (allowEmptyArrays && (0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isArray)(obj) && obj.length === 0) {\n        return adjusted_prefix + \"[]\";\n    }\n    for(let j = 0; j < obj_keys.length; ++j){\n        const key = obj_keys[j];\n        const value = // @ts-ignore\n        typeof key === \"object\" && typeof key.value !== \"undefined\" ? key.value : obj[key];\n        if (skipNulls && value === null) {\n            continue;\n        }\n        // @ts-ignore\n        const encoded_key = allowDots && encodeDotInKeys ? key.replace(/\\./g, \"%2E\") : key;\n        const key_prefix = (0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isArray)(obj) ? typeof generateArrayPrefix === \"function\" ? generateArrayPrefix(adjusted_prefix, encoded_key) : adjusted_prefix : adjusted_prefix + (allowDots ? \".\" + encoded_key : \"[\" + encoded_key + \"]\");\n        sideChannel.set(object, step);\n        const valueSideChannel = new WeakMap();\n        valueSideChannel.set(sentinel, sideChannel);\n        push_to_array(values, inner_stringify(value, key_prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, // @ts-ignore\n        generateArrayPrefix === \"comma\" && encodeValuesOnly && (0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isArray)(obj) ? null : encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));\n    }\n    return values;\n}\nfunction normalize_stringify_options(opts = defaults) {\n    if (typeof opts.allowEmptyArrays !== \"undefined\" && typeof opts.allowEmptyArrays !== \"boolean\") {\n        throw new TypeError(\"`allowEmptyArrays` option can only be `true` or `false`, when provided\");\n    }\n    if (typeof opts.encodeDotInKeys !== \"undefined\" && typeof opts.encodeDotInKeys !== \"boolean\") {\n        throw new TypeError(\"`encodeDotInKeys` option can only be `true` or `false`, when provided\");\n    }\n    if (opts.encoder !== null && typeof opts.encoder !== \"undefined\" && typeof opts.encoder !== \"function\") {\n        throw new TypeError(\"Encoder has to be a function.\");\n    }\n    const charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== \"undefined\" && opts.charset !== \"utf-8\" && opts.charset !== \"iso-8859-1\") {\n        throw new TypeError(\"The charset option must be either utf-8, iso-8859-1, or undefined\");\n    }\n    let format = _formats_mjs__WEBPACK_IMPORTED_MODULE_1__.default_format;\n    if (typeof opts.format !== \"undefined\") {\n        if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.has)(_formats_mjs__WEBPACK_IMPORTED_MODULE_1__.formatters, opts.format)) {\n            throw new TypeError(\"Unknown format option provided.\");\n        }\n        format = opts.format;\n    }\n    const formatter = _formats_mjs__WEBPACK_IMPORTED_MODULE_1__.formatters[format];\n    let filter = defaults.filter;\n    if (typeof opts.filter === \"function\" || (0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isArray)(opts.filter)) {\n        filter = opts.filter;\n    }\n    let arrayFormat;\n    if (opts.arrayFormat && opts.arrayFormat in array_prefix_generators) {\n        arrayFormat = opts.arrayFormat;\n    } else if (\"indices\" in opts) {\n        arrayFormat = opts.indices ? \"indices\" : \"repeat\";\n    } else {\n        arrayFormat = defaults.arrayFormat;\n    }\n    if (\"commaRoundTrip\" in opts && typeof opts.commaRoundTrip !== \"boolean\") {\n        throw new TypeError(\"`commaRoundTrip` must be a boolean, or absent\");\n    }\n    const allowDots = typeof opts.allowDots === \"undefined\" ? !!opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === \"boolean\" ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        // @ts-ignore\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === \"boolean\" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        arrayFormat: arrayFormat,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === \"boolean\" ? opts.charsetSentinel : defaults.charsetSentinel,\n        commaRoundTrip: !!opts.commaRoundTrip,\n        delimiter: typeof opts.delimiter === \"undefined\" ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === \"boolean\" ? opts.encode : defaults.encode,\n        encodeDotInKeys: typeof opts.encodeDotInKeys === \"boolean\" ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n        encoder: typeof opts.encoder === \"function\" ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === \"boolean\" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === \"function\" ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === \"boolean\" ? opts.skipNulls : defaults.skipNulls,\n        // @ts-ignore\n        sort: typeof opts.sort === \"function\" ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === \"boolean\" ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n}\nfunction stringify(object, opts = {}) {\n    let obj = object;\n    const options = normalize_stringify_options(opts);\n    let obj_keys;\n    let filter;\n    if (typeof options.filter === \"function\") {\n        filter = options.filter;\n        obj = filter(\"\", obj);\n    } else if ((0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isArray)(options.filter)) {\n        filter = options.filter;\n        obj_keys = filter;\n    }\n    const keys = [];\n    if (typeof obj !== \"object\" || obj === null) {\n        return \"\";\n    }\n    const generateArrayPrefix = array_prefix_generators[options.arrayFormat];\n    const commaRoundTrip = generateArrayPrefix === \"comma\" && options.commaRoundTrip;\n    if (!obj_keys) {\n        obj_keys = Object.keys(obj);\n    }\n    if (options.sort) {\n        obj_keys.sort(options.sort);\n    }\n    const sideChannel = new WeakMap();\n    for(let i = 0; i < obj_keys.length; ++i){\n        const key = obj_keys[i];\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        push_to_array(keys, inner_stringify(obj[key], key, // @ts-expect-error\n        generateArrayPrefix, commaRoundTrip, options.allowEmptyArrays, options.strictNullHandling, options.skipNulls, options.encodeDotInKeys, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));\n    }\n    const joined = keys.join(options.delimiter);\n    let prefix = options.addQueryPrefix === true ? \"?\" : \"\";\n    if (options.charsetSentinel) {\n        if (options.charset === \"iso-8859-1\") {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += \"utf8=%26%2310003%3B&\";\n        } else {\n            // encodeURIComponent('✓')\n            prefix += \"utf8=%E2%9C%93&\";\n        }\n    }\n    return joined.length > 0 ? prefix + joined : \"\";\n} //# sourceMappingURL=stringify.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/qs/stringify.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/qs/utils.mjs":
/*!***************************************************!*\
  !*** ./node_modules/openai/internal/qs/utils.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assign_single_source: () => (/* binding */ assign_single_source),\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   compact: () => (/* binding */ compact),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   has: () => (/* binding */ has),\n/* harmony export */   is_buffer: () => (/* binding */ is_buffer),\n/* harmony export */   is_regexp: () => (/* binding */ is_regexp),\n/* harmony export */   maybe_map: () => (/* binding */ maybe_map),\n/* harmony export */   merge: () => (/* binding */ merge)\n/* harmony export */ });\n/* harmony import */ var _formats_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formats.mjs */ \"(rsc)/./node_modules/openai/internal/qs/formats.mjs\");\n/* harmony import */ var _utils_values_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/values.mjs */ \"(rsc)/./node_modules/openai/internal/utils/values.mjs\");\n\n\nlet has = (obj, key)=>(has = Object.hasOwn ?? Function.prototype.call.bind(Object.prototype.hasOwnProperty), has(obj, key));\nconst hex_table = /* @__PURE__ */ (()=>{\n    const array = [];\n    for(let i = 0; i < 256; ++i){\n        array.push(\"%\" + ((i < 16 ? \"0\" : \"\") + i.toString(16)).toUpperCase());\n    }\n    return array;\n})();\nfunction compact_queue(queue) {\n    while(queue.length > 1){\n        const item = queue.pop();\n        if (!item) continue;\n        const obj = item.obj[item.prop];\n        if ((0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_1__.isArray)(obj)) {\n            const compacted = [];\n            for(let j = 0; j < obj.length; ++j){\n                if (typeof obj[j] !== \"undefined\") {\n                    compacted.push(obj[j]);\n                }\n            }\n            // @ts-ignore\n            item.obj[item.prop] = compacted;\n        }\n    }\n}\nfunction array_to_object(source, options) {\n    const obj = options && options.plainObjects ? Object.create(null) : {};\n    for(let i = 0; i < source.length; ++i){\n        if (typeof source[i] !== \"undefined\") {\n            obj[i] = source[i];\n        }\n    }\n    return obj;\n}\nfunction merge(target, source, options = {}) {\n    if (!source) {\n        return target;\n    }\n    if (typeof source !== \"object\") {\n        if ((0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_1__.isArray)(target)) {\n            target.push(source);\n        } else if (target && typeof target === \"object\") {\n            if (options && (options.plainObjects || options.allowPrototypes) || !has(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [\n                target,\n                source\n            ];\n        }\n        return target;\n    }\n    if (!target || typeof target !== \"object\") {\n        return [\n            target\n        ].concat(source);\n    }\n    let mergeTarget = target;\n    if ((0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_1__.isArray)(target) && !(0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_1__.isArray)(source)) {\n        // @ts-ignore\n        mergeTarget = array_to_object(target, options);\n    }\n    if ((0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_1__.isArray)(target) && (0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_1__.isArray)(source)) {\n        source.forEach(function(item, i) {\n            if (has(target, i)) {\n                const targetItem = target[i];\n                if (targetItem && typeof targetItem === \"object\" && item && typeof item === \"object\") {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n    return Object.keys(source).reduce(function(acc, key) {\n        const value = source[key];\n        if (has(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n}\nfunction assign_single_source(target, source) {\n    return Object.keys(source).reduce(function(acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n}\nfunction decode(str, _, charset) {\n    const strWithoutPlus = str.replace(/\\+/g, \" \");\n    if (charset === \"iso-8859-1\") {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n}\nconst limit = 1024;\nconst encode = (str, _defaultEncoder, charset, _kind, format)=>{\n    // This code was originally written by Brian White for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n    let string = str;\n    if (typeof str === \"symbol\") {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== \"string\") {\n        string = String(str);\n    }\n    if (charset === \"iso-8859-1\") {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {\n            return \"%26%23\" + parseInt($0.slice(2), 16) + \"%3B\";\n        });\n    }\n    let out = \"\";\n    for(let j = 0; j < string.length; j += limit){\n        const segment = string.length >= limit ? string.slice(j, j + limit) : string;\n        const arr = [];\n        for(let i = 0; i < segment.length; ++i){\n            let c = segment.charCodeAt(i);\n            if (c === 0x2d || // -\n            c === 0x2e || // .\n            c === 0x5f || // _\n            c === 0x7e || // ~\n            c >= 0x30 && c <= 0x39 || // 0-9\n            c >= 0x41 && c <= 0x5a || // a-z\n            c >= 0x61 && c <= 0x7a || // A-Z\n            format === _formats_mjs__WEBPACK_IMPORTED_MODULE_0__.RFC1738 && (c === 0x28 || c === 0x29) // ( )\n            ) {\n                arr[arr.length] = segment.charAt(i);\n                continue;\n            }\n            if (c < 0x80) {\n                arr[arr.length] = hex_table[c];\n                continue;\n            }\n            if (c < 0x800) {\n                arr[arr.length] = hex_table[0xc0 | c >> 6] + hex_table[0x80 | c & 0x3f];\n                continue;\n            }\n            if (c < 0xd800 || c >= 0xe000) {\n                arr[arr.length] = hex_table[0xe0 | c >> 12] + hex_table[0x80 | c >> 6 & 0x3f] + hex_table[0x80 | c & 0x3f];\n                continue;\n            }\n            i += 1;\n            c = 0x10000 + ((c & 0x3ff) << 10 | segment.charCodeAt(i) & 0x3ff);\n            arr[arr.length] = hex_table[0xf0 | c >> 18] + hex_table[0x80 | c >> 12 & 0x3f] + hex_table[0x80 | c >> 6 & 0x3f] + hex_table[0x80 | c & 0x3f];\n        }\n        out += arr.join(\"\");\n    }\n    return out;\n};\nfunction compact(value) {\n    const queue = [\n        {\n            obj: {\n                o: value\n            },\n            prop: \"o\"\n        }\n    ];\n    const refs = [];\n    for(let i = 0; i < queue.length; ++i){\n        const item = queue[i];\n        // @ts-ignore\n        const obj = item.obj[item.prop];\n        const keys = Object.keys(obj);\n        for(let j = 0; j < keys.length; ++j){\n            const key = keys[j];\n            const val = obj[key];\n            if (typeof val === \"object\" && val !== null && refs.indexOf(val) === -1) {\n                queue.push({\n                    obj: obj,\n                    prop: key\n                });\n                refs.push(val);\n            }\n        }\n    }\n    compact_queue(queue);\n    return value;\n}\nfunction is_regexp(obj) {\n    return Object.prototype.toString.call(obj) === \"[object RegExp]\";\n}\nfunction is_buffer(obj) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n}\nfunction combine(a, b) {\n    return [].concat(a, b);\n}\nfunction maybe_map(val, fn) {\n    if ((0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_1__.isArray)(val)) {\n        const mapped = [];\n        for(let i = 0; i < val.length; i += 1){\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n} //# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/qs/utils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/request-options.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/internal/request-options.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FallbackEncoder: () => (/* binding */ FallbackEncoder)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nconst FallbackEncoder = ({ headers, body })=>{\n    return {\n        bodyHeaders: {\n            \"content-type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    };\n}; //# sourceMappingURL=request-options.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3JlcXVlc3Qtb3B0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHNGQUFzRjtBQUMvRSxNQUFNQSxrQkFBa0IsQ0FBQyxFQUFFQyxPQUFPLEVBQUVDLElBQUksRUFBRTtJQUM3QyxPQUFPO1FBQ0hDLGFBQWE7WUFDVCxnQkFBZ0I7UUFDcEI7UUFDQUQsTUFBTUUsS0FBS0MsU0FBUyxDQUFDSDtJQUN6QjtBQUNKLEVBQUUsQ0FDRiw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvaW50ZXJuYWwvcmVxdWVzdC1vcHRpb25zLm1qcz9lMmZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5leHBvcnQgY29uc3QgRmFsbGJhY2tFbmNvZGVyID0gKHsgaGVhZGVycywgYm9keSB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYm9keUhlYWRlcnM6IHtcbiAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC1vcHRpb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiRmFsbGJhY2tFbmNvZGVyIiwiaGVhZGVycyIsImJvZHkiLCJib2R5SGVhZGVycyIsIkpTT04iLCJzdHJpbmdpZnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/request-options.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/shims.mjs":
/*!************************************************!*\
  !*** ./node_modules/openai/internal/shims.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CancelReadableStream: () => (/* binding */ CancelReadableStream),\n/* harmony export */   ReadableStreamFrom: () => (/* binding */ ReadableStreamFrom),\n/* harmony export */   ReadableStreamToAsyncIterable: () => (/* binding */ ReadableStreamToAsyncIterable),\n/* harmony export */   getDefaultFetch: () => (/* binding */ getDefaultFetch),\n/* harmony export */   makeReadableStream: () => (/* binding */ makeReadableStream)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nfunction getDefaultFetch() {\n    if (typeof fetch !== \"undefined\") {\n        return fetch;\n    }\n    throw new Error(\"`fetch` is not defined as a global; Either pass `fetch` to the client, `new OpenAI({ fetch })` or polyfill the global, `globalThis.fetch = fetch`\");\n}\nfunction makeReadableStream(...args) {\n    const ReadableStream = globalThis.ReadableStream;\n    if (typeof ReadableStream === \"undefined\") {\n        // Note: All of the platforms / runtimes we officially support already define\n        // `ReadableStream` as a global, so this should only ever be hit on unsupported runtimes.\n        throw new Error(\"`ReadableStream` is not defined as a global; You will need to polyfill it, `globalThis.ReadableStream = ReadableStream`\");\n    }\n    return new ReadableStream(...args);\n}\nfunction ReadableStreamFrom(iterable) {\n    let iter = Symbol.asyncIterator in iterable ? iterable[Symbol.asyncIterator]() : iterable[Symbol.iterator]();\n    return makeReadableStream({\n        start () {},\n        async pull (controller) {\n            const { done, value } = await iter.next();\n            if (done) {\n                controller.close();\n            } else {\n                controller.enqueue(value);\n            }\n        },\n        async cancel () {\n            await iter.return?.();\n        }\n    });\n}\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */ function ReadableStreamToAsyncIterable(stream) {\n    if (stream[Symbol.asyncIterator]) return stream;\n    const reader = stream.getReader();\n    return {\n        async next () {\n            try {\n                const result = await reader.read();\n                if (result?.done) reader.releaseLock(); // release lock when stream becomes closed\n                return result;\n            } catch (e) {\n                reader.releaseLock(); // release lock when stream becomes errored\n                throw e;\n            }\n        },\n        async return () {\n            const cancelPromise = reader.cancel();\n            reader.releaseLock();\n            await cancelPromise;\n            return {\n                done: true,\n                value: undefined\n            };\n        },\n        [Symbol.asyncIterator] () {\n            return this;\n        }\n    };\n}\n/**\n * Cancels a ReadableStream we don't need to consume.\n * See https://undici.nodejs.org/#/?id=garbage-collection\n */ async function CancelReadableStream(stream) {\n    if (stream === null || typeof stream !== \"object\") return;\n    if (stream[Symbol.asyncIterator]) {\n        await stream[Symbol.asyncIterator]().return?.();\n        return;\n    }\n    const reader = stream.getReader();\n    const cancelPromise = reader.cancel();\n    reader.releaseLock();\n    await cancelPromise;\n} //# sourceMappingURL=shims.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3NoaW1zLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLHNGQUFzRjtBQUMvRSxTQUFTQTtJQUNaLElBQUksT0FBT0MsVUFBVSxhQUFhO1FBQzlCLE9BQU9BO0lBQ1g7SUFDQSxNQUFNLElBQUlDLE1BQU07QUFDcEI7QUFDTyxTQUFTQyxtQkFBbUIsR0FBR0MsSUFBSTtJQUN0QyxNQUFNQyxpQkFBaUJDLFdBQVdELGNBQWM7SUFDaEQsSUFBSSxPQUFPQSxtQkFBbUIsYUFBYTtRQUN2Qyw2RUFBNkU7UUFDN0UseUZBQXlGO1FBQ3pGLE1BQU0sSUFBSUgsTUFBTTtJQUNwQjtJQUNBLE9BQU8sSUFBSUcsa0JBQWtCRDtBQUNqQztBQUNPLFNBQVNHLG1CQUFtQkMsUUFBUTtJQUN2QyxJQUFJQyxPQUFPQyxPQUFPQyxhQUFhLElBQUlILFdBQVdBLFFBQVEsQ0FBQ0UsT0FBT0MsYUFBYSxDQUFDLEtBQUtILFFBQVEsQ0FBQ0UsT0FBT0UsUUFBUSxDQUFDO0lBQzFHLE9BQU9ULG1CQUFtQjtRQUN0QlUsVUFBVTtRQUNWLE1BQU1DLE1BQUtDLFVBQVU7WUFDakIsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHLE1BQU1SLEtBQUtTLElBQUk7WUFDdkMsSUFBSUYsTUFBTTtnQkFDTkQsV0FBV0ksS0FBSztZQUNwQixPQUNLO2dCQUNESixXQUFXSyxPQUFPLENBQUNIO1lBQ3ZCO1FBQ0o7UUFDQSxNQUFNSTtZQUNGLE1BQU1aLEtBQUthLE1BQU07UUFDckI7SUFDSjtBQUNKO0FBQ0E7Ozs7O0NBS0MsR0FDTSxTQUFTQyw4QkFBOEJDLE1BQU07SUFDaEQsSUFBSUEsTUFBTSxDQUFDZCxPQUFPQyxhQUFhLENBQUMsRUFDNUIsT0FBT2E7SUFDWCxNQUFNQyxTQUFTRCxPQUFPRSxTQUFTO0lBQy9CLE9BQU87UUFDSCxNQUFNUjtZQUNGLElBQUk7Z0JBQ0EsTUFBTVMsU0FBUyxNQUFNRixPQUFPRyxJQUFJO2dCQUNoQyxJQUFJRCxRQUFRWCxNQUNSUyxPQUFPSSxXQUFXLElBQUksMENBQTBDO2dCQUNwRSxPQUFPRjtZQUNYLEVBQ0EsT0FBT0csR0FBRztnQkFDTkwsT0FBT0ksV0FBVyxJQUFJLDJDQUEyQztnQkFDakUsTUFBTUM7WUFDVjtRQUNKO1FBQ0EsTUFBTVI7WUFDRixNQUFNUyxnQkFBZ0JOLE9BQU9KLE1BQU07WUFDbkNJLE9BQU9JLFdBQVc7WUFDbEIsTUFBTUU7WUFDTixPQUFPO2dCQUFFZixNQUFNO2dCQUFNQyxPQUFPZTtZQUFVO1FBQzFDO1FBQ0EsQ0FBQ3RCLE9BQU9DLGFBQWEsQ0FBQztZQUNsQixPQUFPLElBQUk7UUFDZjtJQUNKO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxlQUFlc0IscUJBQXFCVCxNQUFNO0lBQzdDLElBQUlBLFdBQVcsUUFBUSxPQUFPQSxXQUFXLFVBQ3JDO0lBQ0osSUFBSUEsTUFBTSxDQUFDZCxPQUFPQyxhQUFhLENBQUMsRUFBRTtRQUM5QixNQUFNYSxNQUFNLENBQUNkLE9BQU9DLGFBQWEsQ0FBQyxHQUFHVyxNQUFNO1FBQzNDO0lBQ0o7SUFDQSxNQUFNRyxTQUFTRCxPQUFPRSxTQUFTO0lBQy9CLE1BQU1LLGdCQUFnQk4sT0FBT0osTUFBTTtJQUNuQ0ksT0FBT0ksV0FBVztJQUNsQixNQUFNRTtBQUNWLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3NoaW1zLm1qcz83YWJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdEZldGNoKCkge1xuICAgIGlmICh0eXBlb2YgZmV0Y2ggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmZXRjaDtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgZmV0Y2hgIGlzIG5vdCBkZWZpbmVkIGFzIGEgZ2xvYmFsOyBFaXRoZXIgcGFzcyBgZmV0Y2hgIHRvIHRoZSBjbGllbnQsIGBuZXcgT3BlbkFJKHsgZmV0Y2ggfSlgIG9yIHBvbHlmaWxsIHRoZSBnbG9iYWwsIGBnbG9iYWxUaGlzLmZldGNoID0gZmV0Y2hgJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFrZVJlYWRhYmxlU3RyZWFtKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBSZWFkYWJsZVN0cmVhbSA9IGdsb2JhbFRoaXMuUmVhZGFibGVTdHJlYW07XG4gICAgaWYgKHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gTm90ZTogQWxsIG9mIHRoZSBwbGF0Zm9ybXMgLyBydW50aW1lcyB3ZSBvZmZpY2lhbGx5IHN1cHBvcnQgYWxyZWFkeSBkZWZpbmVcbiAgICAgICAgLy8gYFJlYWRhYmxlU3RyZWFtYCBhcyBhIGdsb2JhbCwgc28gdGhpcyBzaG91bGQgb25seSBldmVyIGJlIGhpdCBvbiB1bnN1cHBvcnRlZCBydW50aW1lcy5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgUmVhZGFibGVTdHJlYW1gIGlzIG5vdCBkZWZpbmVkIGFzIGEgZ2xvYmFsOyBZb3Ugd2lsbCBuZWVkIHRvIHBvbHlmaWxsIGl0LCBgZ2xvYmFsVGhpcy5SZWFkYWJsZVN0cmVhbSA9IFJlYWRhYmxlU3RyZWFtYCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKC4uLmFyZ3MpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtRnJvbShpdGVyYWJsZSkge1xuICAgIGxldCBpdGVyID0gU3ltYm9sLmFzeW5jSXRlcmF0b3IgaW4gaXRlcmFibGUgPyBpdGVyYWJsZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSA6IGl0ZXJhYmxlW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICByZXR1cm4gbWFrZVJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgc3RhcnQoKSB7IH0sXG4gICAgICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgaXRlci5uZXh0KCk7XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGNhbmNlbCgpIHtcbiAgICAgICAgICAgIGF3YWl0IGl0ZXIucmV0dXJuPy4oKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbi8qKlxuICogTW9zdCBicm93c2VycyBkb24ndCB5ZXQgaGF2ZSBhc3luYyBpdGVyYWJsZSBzdXBwb3J0IGZvciBSZWFkYWJsZVN0cmVhbSxcbiAqIGFuZCBOb2RlIGhhcyBhIHZlcnkgZGlmZmVyZW50IHdheSBvZiByZWFkaW5nIGJ5dGVzIGZyb20gaXRzIFwiUmVhZGFibGVTdHJlYW1cIi5cbiAqXG4gKiBUaGlzIHBvbHlmaWxsIHdhcyBwdWxsZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vTWF0dGlhc0J1ZWxlbnMvd2ViLXN0cmVhbXMtcG9seWZpbGwvcHVsbC8xMjIjaXNzdWVjb21tZW50LTE2MjczNTQ0OTBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtVG9Bc3luY0l0ZXJhYmxlKHN0cmVhbSkge1xuICAgIGlmIChzdHJlYW1bU3ltYm9sLmFzeW5jSXRlcmF0b3JdKVxuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhc3luYyBuZXh0KCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQ/LmRvbmUpXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpOyAvLyByZWxlYXNlIGxvY2sgd2hlbiBzdHJlYW0gYmVjb21lcyBjbG9zZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTsgLy8gcmVsZWFzZSBsb2NrIHdoZW4gc3RyZWFtIGJlY29tZXMgZXJyb3JlZFxuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHJldHVybigpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbFByb21pc2UgPSByZWFkZXIuY2FuY2VsKCk7XG4gICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICAgICAgICAgIGF3YWl0IGNhbmNlbFByb21pc2U7XG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH07XG4gICAgICAgIH0sXG4gICAgICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBDYW5jZWxzIGEgUmVhZGFibGVTdHJlYW0gd2UgZG9uJ3QgbmVlZCB0byBjb25zdW1lLlxuICogU2VlIGh0dHBzOi8vdW5kaWNpLm5vZGVqcy5vcmcvIy8/aWQ9Z2FyYmFnZS1jb2xsZWN0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBDYW5jZWxSZWFkYWJsZVN0cmVhbShzdHJlYW0pIHtcbiAgICBpZiAoc3RyZWFtID09PSBudWxsIHx8IHR5cGVvZiBzdHJlYW0gIT09ICdvYmplY3QnKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKHN0cmVhbVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pIHtcbiAgICAgICAgYXdhaXQgc3RyZWFtW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpLnJldHVybj8uKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpO1xuICAgIGNvbnN0IGNhbmNlbFByb21pc2UgPSByZWFkZXIuY2FuY2VsKCk7XG4gICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgYXdhaXQgY2FuY2VsUHJvbWlzZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoaW1zLm1qcy5tYXAiXSwibmFtZXMiOlsiZ2V0RGVmYXVsdEZldGNoIiwiZmV0Y2giLCJFcnJvciIsIm1ha2VSZWFkYWJsZVN0cmVhbSIsImFyZ3MiLCJSZWFkYWJsZVN0cmVhbSIsImdsb2JhbFRoaXMiLCJSZWFkYWJsZVN0cmVhbUZyb20iLCJpdGVyYWJsZSIsIml0ZXIiLCJTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwiaXRlcmF0b3IiLCJzdGFydCIsInB1bGwiLCJjb250cm9sbGVyIiwiZG9uZSIsInZhbHVlIiwibmV4dCIsImNsb3NlIiwiZW5xdWV1ZSIsImNhbmNlbCIsInJldHVybiIsIlJlYWRhYmxlU3RyZWFtVG9Bc3luY0l0ZXJhYmxlIiwic3RyZWFtIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwicmVzdWx0IiwicmVhZCIsInJlbGVhc2VMb2NrIiwiZSIsImNhbmNlbFByb21pc2UiLCJ1bmRlZmluZWQiLCJDYW5jZWxSZWFkYWJsZVN0cmVhbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/shims.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/to-file.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/internal/to-file.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toFile: () => (/* binding */ toFile)\n/* harmony export */ });\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./uploads.mjs */ \"(rsc)/./node_modules/openai/internal/uploads.mjs\");\n\n\n/**\n * This check adds the arrayBuffer() method type because it is available and used at runtime\n */ const isBlobLike = (value)=>value != null && typeof value === \"object\" && typeof value.size === \"number\" && typeof value.type === \"string\" && typeof value.text === \"function\" && typeof value.slice === \"function\" && typeof value.arrayBuffer === \"function\";\n/**\n * This check adds the arrayBuffer() method type because it is available and used at runtime\n */ const isFileLike = (value)=>value != null && typeof value === \"object\" && typeof value.name === \"string\" && typeof value.lastModified === \"number\" && isBlobLike(value);\nconst isResponseLike = (value)=>value != null && typeof value === \"object\" && typeof value.url === \"string\" && typeof value.blob === \"function\";\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */ async function toFile(value, name, options) {\n    (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.checkFileSupport)();\n    // If it's a promise, resolve it.\n    value = await value;\n    // If we've been given a `File` we don't need to do anything\n    if (isFileLike(value)) {\n        if (value instanceof File) {\n            return value;\n        }\n        return (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.makeFile)([\n            await value.arrayBuffer()\n        ], value.name);\n    }\n    if (isResponseLike(value)) {\n        const blob = await value.blob();\n        name || (name = new URL(value.url).pathname.split(/[\\\\/]/).pop());\n        return (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.makeFile)(await getBytes(blob), name, options);\n    }\n    const parts = await getBytes(value);\n    name || (name = (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.getName)(value));\n    if (!options?.type) {\n        const type = parts.find((part)=>typeof part === \"object\" && \"type\" in part && part.type);\n        if (typeof type === \"string\") {\n            options = {\n                ...options,\n                type\n            };\n        }\n    }\n    return (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.makeFile)(parts, name, options);\n}\nasync function getBytes(value) {\n    let parts = [];\n    if (typeof value === \"string\" || ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n    value instanceof ArrayBuffer) {\n        parts.push(value);\n    } else if (isBlobLike(value)) {\n        parts.push(value instanceof Blob ? value : await value.arrayBuffer());\n    } else if ((0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(value) // includes Readable, ReadableStream, etc.\n    ) {\n        for await (const chunk of value){\n            parts.push(...await getBytes(chunk)); // TODO, consider validating?\n        }\n    } else {\n        const constructor = value?.constructor?.name;\n        throw new Error(`Unexpected data type: ${typeof value}${constructor ? `; constructor: ${constructor}` : \"\"}${propsForError(value)}`);\n    }\n    return parts;\n}\nfunction propsForError(value) {\n    if (typeof value !== \"object\" || value === null) return \"\";\n    const props = Object.getOwnPropertyNames(value);\n    return `; props: [${props.map((p)=>`\"${p}\"`).join(\", \")}]`;\n} //# sourceMappingURL=to-file.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/to-file.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/tslib.mjs":
/*!************************************************!*\
  !*** ./node_modules/openai/internal/tslib.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet)\n/* harmony export */ });\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3RzbGliLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFNBQVNBLHVCQUF1QkMsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxDQUFDO0lBQzNELElBQUlELFNBQVMsS0FDVCxNQUFNLElBQUlFLFVBQVU7SUFDeEIsSUFBSUYsU0FBUyxPQUFPLENBQUNDLEdBQ2pCLE1BQU0sSUFBSUMsVUFBVTtJQUN4QixJQUFJLE9BQU9KLFVBQVUsYUFBYUQsYUFBYUMsU0FBUyxDQUFDRyxJQUFJLENBQUNILE1BQU1LLEdBQUcsQ0FBQ04sV0FDcEUsTUFBTSxJQUFJSyxVQUFVO0lBQ3hCLE9BQU9GLFNBQVMsTUFBTUMsRUFBRUcsSUFBSSxDQUFDUCxVQUFVRSxTQUFTRSxJQUFLQSxFQUFFRixLQUFLLEdBQUdBLFFBQVNELE1BQU1PLEdBQUcsQ0FBQ1IsVUFBVUUsUUFBUUE7QUFDeEc7QUFDQSxTQUFTTyx1QkFBdUJULFFBQVEsRUFBRUMsS0FBSyxFQUFFRSxJQUFJLEVBQUVDLENBQUM7SUFDcEQsSUFBSUQsU0FBUyxPQUFPLENBQUNDLEdBQ2pCLE1BQU0sSUFBSUMsVUFBVTtJQUN4QixJQUFJLE9BQU9KLFVBQVUsYUFBYUQsYUFBYUMsU0FBUyxDQUFDRyxJQUFJLENBQUNILE1BQU1LLEdBQUcsQ0FBQ04sV0FDcEUsTUFBTSxJQUFJSyxVQUFVO0lBQ3hCLE9BQU9GLFNBQVMsTUFBTUMsSUFBSUQsU0FBUyxNQUFNQyxFQUFFRyxJQUFJLENBQUNQLFlBQVlJLElBQUlBLEVBQUVGLEtBQUssR0FBR0QsTUFBTVMsR0FBRyxDQUFDVjtBQUN4RjtBQUMwRCIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9pbnRlcm5hbC90c2xpYi5tanM/OGNmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gKGYudmFsdWUgPSB2YWx1ZSkgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSwgdmFsdWU7XG59XG5mdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZilcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufVxuZXhwb3J0IHsgX19jbGFzc1ByaXZhdGVGaWVsZFNldCwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCB9O1xuIl0sIm5hbWVzIjpbIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJyZWNlaXZlciIsInN0YXRlIiwidmFsdWUiLCJraW5kIiwiZiIsIlR5cGVFcnJvciIsImhhcyIsImNhbGwiLCJzZXQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwiZ2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/tslib.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/uploads.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/internal/uploads.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkFileSupport: () => (/* binding */ checkFileSupport),\n/* harmony export */   createForm: () => (/* binding */ createForm),\n/* harmony export */   getName: () => (/* binding */ getName),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   makeFile: () => (/* binding */ makeFile),\n/* harmony export */   maybeMultipartFormRequestOptions: () => (/* binding */ maybeMultipartFormRequestOptions),\n/* harmony export */   multipartFormRequestOptions: () => (/* binding */ multipartFormRequestOptions)\n/* harmony export */ });\n/* harmony import */ var _shims_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shims.mjs */ \"(rsc)/./node_modules/openai/internal/shims.mjs\");\n\nconst checkFileSupport = ()=>{\n    if (typeof File === \"undefined\") {\n        const { process } = globalThis;\n        const isOldNode = typeof process?.versions?.node === \"string\" && parseInt(process.versions.node.split(\".\")) < 20;\n        throw new Error(\"`File` is not defined as a global, which is required for file uploads.\" + (isOldNode ? \" Update to Node 20 LTS or newer, or set `globalThis.File` to `import('node:buffer').File`.\" : \"\"));\n    }\n};\n/**\n * Construct a `File` instance. This is used to ensure a helpful error is thrown\n * for environments that don't define a global `File` yet.\n */ function makeFile(fileBits, fileName, options) {\n    checkFileSupport();\n    return new File(fileBits, fileName ?? \"unknown_file\", options);\n}\nfunction getName(value) {\n    return (typeof value === \"object\" && value !== null && (\"name\" in value && value.name && String(value.name) || \"url\" in value && value.url && String(value.url) || \"filename\" in value && value.filename && String(value.filename) || \"path\" in value && value.path && String(value.path)) || \"\").split(/[\\\\/]/).pop() || undefined;\n}\nconst isAsyncIterable = (value)=>value != null && typeof value === \"object\" && typeof value[Symbol.asyncIterator] === \"function\";\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */ const maybeMultipartFormRequestOptions = async (opts, fetch)=>{\n    if (!hasUploadableValue(opts.body)) return opts;\n    return {\n        ...opts,\n        body: await createForm(opts.body, fetch)\n    };\n};\nconst multipartFormRequestOptions = async (opts, fetch)=>{\n    return {\n        ...opts,\n        body: await createForm(opts.body, fetch)\n    };\n};\nconst supportsFormDataMap = /* @__PURE__ */ new WeakMap();\n/**\n * node-fetch doesn't support the global FormData object in recent node versions. Instead of sending\n * properly-encoded form data, it just stringifies the object, resulting in a request body of \"[object FormData]\".\n * This function detects if the fetch function provided supports the global FormData object to avoid\n * confusing error messages later on.\n */ function supportsFormData(fetchObject) {\n    const fetch = typeof fetchObject === \"function\" ? fetchObject : fetchObject.fetch;\n    const cached = supportsFormDataMap.get(fetch);\n    if (cached) return cached;\n    const promise = (async ()=>{\n        try {\n            const FetchResponse = \"Response\" in fetch ? fetch.Response : (await fetch(\"data:,\")).constructor;\n            const data = new FormData();\n            if (data.toString() === await new FetchResponse(data).text()) {\n                return false;\n            }\n            return true;\n        } catch  {\n            // avoid false negatives\n            return true;\n        }\n    })();\n    supportsFormDataMap.set(fetch, promise);\n    return promise;\n}\nconst createForm = async (body, fetch)=>{\n    if (!await supportsFormData(fetch)) {\n        throw new TypeError(\"The provided fetch function does not support file uploads with the current global FormData class.\");\n    }\n    const form = new FormData();\n    await Promise.all(Object.entries(body || {}).map(([key, value])=>addFormValue(form, key, value)));\n    return form;\n};\n// We check for Blob not File because Bun.File doesn't inherit from File,\n// but they both inherit from Blob and have a `name` property at runtime.\nconst isNamedBlob = (value)=>value instanceof Blob && \"name\" in value;\nconst isUploadable = (value)=>typeof value === \"object\" && value !== null && (value instanceof Response || isAsyncIterable(value) || isNamedBlob(value));\nconst hasUploadableValue = (value)=>{\n    if (isUploadable(value)) return true;\n    if (Array.isArray(value)) return value.some(hasUploadableValue);\n    if (value && typeof value === \"object\") {\n        for(const k in value){\n            if (hasUploadableValue(value[k])) return true;\n        }\n    }\n    return false;\n};\nconst addFormValue = async (form, key, value)=>{\n    if (value === undefined) return;\n    if (value == null) {\n        throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n    }\n    // TODO: make nested formats configurable\n    if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n        form.append(key, String(value));\n    } else if (value instanceof Response) {\n        form.append(key, makeFile([\n            await value.blob()\n        ], getName(value)));\n    } else if (isAsyncIterable(value)) {\n        form.append(key, makeFile([\n            await new Response((0,_shims_mjs__WEBPACK_IMPORTED_MODULE_0__.ReadableStreamFrom)(value)).blob()\n        ], getName(value)));\n    } else if (isNamedBlob(value)) {\n        form.append(key, value, getName(value));\n    } else if (Array.isArray(value)) {\n        await Promise.all(value.map((entry)=>addFormValue(form, key + \"[]\", entry)));\n    } else if (typeof value === \"object\") {\n        await Promise.all(Object.entries(value).map(([name, prop])=>addFormValue(form, `${key}[${name}]`, prop)));\n    } else {\n        throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n    }\n}; //# sourceMappingURL=uploads.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/uploads.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/utils.mjs":
/*!************************************************!*\
  !*** ./node_modules/openai/internal/utils.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coerceBoolean: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.coerceBoolean),\n/* harmony export */   coerceFloat: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.coerceFloat),\n/* harmony export */   coerceInteger: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.coerceInteger),\n/* harmony export */   ensurePresent: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.ensurePresent),\n/* harmony export */   formatRequestDetails: () => (/* reexport safe */ _utils_log_mjs__WEBPACK_IMPORTED_MODULE_3__.formatRequestDetails),\n/* harmony export */   fromBase64: () => (/* reexport safe */ _utils_base64_mjs__WEBPACK_IMPORTED_MODULE_1__.fromBase64),\n/* harmony export */   hasOwn: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.hasOwn),\n/* harmony export */   isAbsoluteURL: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.isAbsoluteURL),\n/* harmony export */   isArray: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.isArray),\n/* harmony export */   isEmptyObj: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.isEmptyObj),\n/* harmony export */   isObj: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.isObj),\n/* harmony export */   isReadonlyArray: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.isReadonlyArray),\n/* harmony export */   loggerFor: () => (/* reexport safe */ _utils_log_mjs__WEBPACK_IMPORTED_MODULE_3__.loggerFor),\n/* harmony export */   maybeCoerceBoolean: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.maybeCoerceBoolean),\n/* harmony export */   maybeCoerceFloat: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.maybeCoerceFloat),\n/* harmony export */   maybeCoerceInteger: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.maybeCoerceInteger),\n/* harmony export */   maybeObj: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.maybeObj),\n/* harmony export */   parseLogLevel: () => (/* reexport safe */ _utils_log_mjs__WEBPACK_IMPORTED_MODULE_3__.parseLogLevel),\n/* harmony export */   readEnv: () => (/* reexport safe */ _utils_env_mjs__WEBPACK_IMPORTED_MODULE_2__.readEnv),\n/* harmony export */   safeJSON: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.safeJSON),\n/* harmony export */   sleep: () => (/* reexport safe */ _utils_sleep_mjs__WEBPACK_IMPORTED_MODULE_5__.sleep),\n/* harmony export */   toBase64: () => (/* reexport safe */ _utils_base64_mjs__WEBPACK_IMPORTED_MODULE_1__.toBase64),\n/* harmony export */   toFloat32Array: () => (/* reexport safe */ _utils_base64_mjs__WEBPACK_IMPORTED_MODULE_1__.toFloat32Array),\n/* harmony export */   uuid4: () => (/* reexport safe */ _utils_uuid_mjs__WEBPACK_IMPORTED_MODULE_4__.uuid4),\n/* harmony export */   validatePositiveInteger: () => (/* reexport safe */ _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.validatePositiveInteger)\n/* harmony export */ });\n/* harmony import */ var _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/values.mjs */ \"(rsc)/./node_modules/openai/internal/utils/values.mjs\");\n/* harmony import */ var _utils_base64_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/base64.mjs */ \"(rsc)/./node_modules/openai/internal/utils/base64.mjs\");\n/* harmony import */ var _utils_env_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/env.mjs */ \"(rsc)/./node_modules/openai/internal/utils/env.mjs\");\n/* harmony import */ var _utils_log_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/log.mjs */ \"(rsc)/./node_modules/openai/internal/utils/log.mjs\");\n/* harmony import */ var _utils_uuid_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/uuid.mjs */ \"(rsc)/./node_modules/openai/internal/utils/uuid.mjs\");\n/* harmony import */ var _utils_sleep_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/sleep.mjs */ \"(rsc)/./node_modules/openai/internal/utils/sleep.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n //# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3V0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ25EO0FBQ0E7QUFDSDtBQUNBO0FBQ0M7QUFDQyxDQUNsQyxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvaW50ZXJuYWwvdXRpbHMubWpzP2YyMDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmV4cG9ydCAqIGZyb20gXCIuL3V0aWxzL3ZhbHVlcy5tanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWxzL2Jhc2U2NC5tanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWxzL2Vudi5tanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWxzL2xvZy5tanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWxzL3V1aWQubWpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi91dGlscy9zbGVlcC5tanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/utils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/utils/base64.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/internal/utils/base64.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromBase64: () => (/* binding */ fromBase64),\n/* harmony export */   toBase64: () => (/* binding */ toBase64),\n/* harmony export */   toFloat32Array: () => (/* binding */ toFloat32Array)\n/* harmony export */ });\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/error.mjs */ \"(rsc)/./node_modules/openai/core/error.mjs\");\n/* harmony import */ var _bytes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.mjs */ \"(rsc)/./node_modules/openai/internal/utils/bytes.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nconst toBase64 = (data)=>{\n    if (!data) return \"\";\n    if (typeof globalThis.Buffer !== \"undefined\") {\n        return globalThis.Buffer.from(data).toString(\"base64\");\n    }\n    if (typeof data === \"string\") {\n        data = (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__.encodeUTF8)(data);\n    }\n    if (typeof btoa !== \"undefined\") {\n        return btoa(String.fromCharCode.apply(null, data));\n    }\n    throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"Cannot generate base64 string; Expected `Buffer` or `btoa` to be defined\");\n};\nconst fromBase64 = (str)=>{\n    if (typeof globalThis.Buffer !== \"undefined\") {\n        const buf = globalThis.Buffer.from(str, \"base64\");\n        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    if (typeof atob !== \"undefined\") {\n        const bstr = atob(str);\n        const buf = new Uint8Array(bstr.length);\n        for(let i = 0; i < bstr.length; i++){\n            buf[i] = bstr.charCodeAt(i);\n        }\n        return buf;\n    }\n    throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"Cannot decode base64 string; Expected `Buffer` or `atob` to be defined\");\n};\n/**\n * Converts a Base64 encoded string to a Float32Array.\n * @param base64Str - The Base64 encoded string.\n * @returns An Array of numbers interpreted as Float32 values.\n */ const toFloat32Array = (base64Str)=>{\n    if (typeof Buffer !== \"undefined\") {\n        // for Node.js environment\n        const buf = Buffer.from(base64Str, \"base64\");\n        return Array.from(new Float32Array(buf.buffer, buf.byteOffset, buf.length / Float32Array.BYTES_PER_ELEMENT));\n    } else {\n        // for legacy web platform APIs\n        const binaryStr = atob(base64Str);\n        const len = binaryStr.length;\n        const bytes = new Uint8Array(len);\n        for(let i = 0; i < len; i++){\n            bytes[i] = binaryStr.charCodeAt(i);\n        }\n        return Array.from(new Float32Array(bytes.buffer));\n    }\n}; //# sourceMappingURL=base64.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3V0aWxzL2Jhc2U2NC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDbkM7QUFDVjtBQUNsQyxNQUFNRSxXQUFXLENBQUNDO0lBQ3JCLElBQUksQ0FBQ0EsTUFDRCxPQUFPO0lBQ1gsSUFBSSxPQUFPQyxXQUFXQyxNQUFNLEtBQUssYUFBYTtRQUMxQyxPQUFPRCxXQUFXQyxNQUFNLENBQUNDLElBQUksQ0FBQ0gsTUFBTUksUUFBUSxDQUFDO0lBQ2pEO0lBQ0EsSUFBSSxPQUFPSixTQUFTLFVBQVU7UUFDMUJBLE9BQU9GLHNEQUFVQSxDQUFDRTtJQUN0QjtJQUNBLElBQUksT0FBT0ssU0FBUyxhQUFhO1FBQzdCLE9BQU9BLEtBQUtDLE9BQU9DLFlBQVksQ0FBQ0MsS0FBSyxDQUFDLE1BQU1SO0lBQ2hEO0lBQ0EsTUFBTSxJQUFJSCx3REFBV0EsQ0FBQztBQUMxQixFQUFFO0FBQ0ssTUFBTVksYUFBYSxDQUFDQztJQUN2QixJQUFJLE9BQU9ULFdBQVdDLE1BQU0sS0FBSyxhQUFhO1FBQzFDLE1BQU1TLE1BQU1WLFdBQVdDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTyxLQUFLO1FBQ3hDLE9BQU8sSUFBSUUsV0FBV0QsSUFBSUUsTUFBTSxFQUFFRixJQUFJRyxVQUFVLEVBQUVILElBQUlJLFVBQVU7SUFDcEU7SUFDQSxJQUFJLE9BQU9DLFNBQVMsYUFBYTtRQUM3QixNQUFNQyxPQUFPRCxLQUFLTjtRQUNsQixNQUFNQyxNQUFNLElBQUlDLFdBQVdLLEtBQUtDLE1BQU07UUFDdEMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLEtBQUtDLE1BQU0sRUFBRUMsSUFBSztZQUNsQ1IsR0FBRyxDQUFDUSxFQUFFLEdBQUdGLEtBQUtHLFVBQVUsQ0FBQ0Q7UUFDN0I7UUFDQSxPQUFPUjtJQUNYO0lBQ0EsTUFBTSxJQUFJZCx3REFBV0EsQ0FBQztBQUMxQixFQUFFO0FBQ0Y7Ozs7Q0FJQyxHQUNNLE1BQU13QixpQkFBaUIsQ0FBQ0M7SUFDM0IsSUFBSSxPQUFPcEIsV0FBVyxhQUFhO1FBQy9CLDBCQUEwQjtRQUMxQixNQUFNUyxNQUFNVCxPQUFPQyxJQUFJLENBQUNtQixXQUFXO1FBQ25DLE9BQU9DLE1BQU1wQixJQUFJLENBQUMsSUFBSXFCLGFBQWFiLElBQUlFLE1BQU0sRUFBRUYsSUFBSUcsVUFBVSxFQUFFSCxJQUFJTyxNQUFNLEdBQUdNLGFBQWFDLGlCQUFpQjtJQUM5RyxPQUNLO1FBQ0QsK0JBQStCO1FBQy9CLE1BQU1DLFlBQVlWLEtBQUtNO1FBQ3ZCLE1BQU1LLE1BQU1ELFVBQVVSLE1BQU07UUFDNUIsTUFBTVUsUUFBUSxJQUFJaEIsV0FBV2U7UUFDN0IsSUFBSyxJQUFJUixJQUFJLEdBQUdBLElBQUlRLEtBQUtSLElBQUs7WUFDMUJTLEtBQUssQ0FBQ1QsRUFBRSxHQUFHTyxVQUFVTixVQUFVLENBQUNEO1FBQ3BDO1FBQ0EsT0FBT0ksTUFBTXBCLElBQUksQ0FBQyxJQUFJcUIsYUFBYUksTUFBTWYsTUFBTTtJQUNuRDtBQUNKLEVBQUUsQ0FDRixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvaW50ZXJuYWwvdXRpbHMvYmFzZTY0Lm1qcz82YWUyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBPcGVuQUlFcnJvciB9IGZyb20gXCIuLi8uLi9jb3JlL2Vycm9yLm1qc1wiO1xuaW1wb3J0IHsgZW5jb2RlVVRGOCB9IGZyb20gXCIuL2J5dGVzLm1qc1wiO1xuZXhwb3J0IGNvbnN0IHRvQmFzZTY0ID0gKGRhdGEpID0+IHtcbiAgICBpZiAoIWRhdGEpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMuQnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShkYXRhKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZGF0YSA9IGVuY29kZVVURjgoZGF0YSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGJ0b2EoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBkYXRhKSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcignQ2Fubm90IGdlbmVyYXRlIGJhc2U2NCBzdHJpbmc7IEV4cGVjdGVkIGBCdWZmZXJgIG9yIGBidG9hYCB0byBiZSBkZWZpbmVkJyk7XG59O1xuZXhwb3J0IGNvbnN0IGZyb21CYXNlNjQgPSAoc3RyKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzLkJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgYnVmID0gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShzdHIsICdiYXNlNjQnKTtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1Zi5idWZmZXIsIGJ1Zi5ieXRlT2Zmc2V0LCBidWYuYnl0ZUxlbmd0aCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYXRvYiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgYnN0ciA9IGF0b2Ioc3RyKTtcbiAgICAgICAgY29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYnN0ci5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJ1ZltpXSA9IGJzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoJ0Nhbm5vdCBkZWNvZGUgYmFzZTY0IHN0cmluZzsgRXhwZWN0ZWQgYEJ1ZmZlcmAgb3IgYGF0b2JgIHRvIGJlIGRlZmluZWQnKTtcbn07XG4vKipcbiAqIENvbnZlcnRzIGEgQmFzZTY0IGVuY29kZWQgc3RyaW5nIHRvIGEgRmxvYXQzMkFycmF5LlxuICogQHBhcmFtIGJhc2U2NFN0ciAtIFRoZSBCYXNlNjQgZW5jb2RlZCBzdHJpbmcuXG4gKiBAcmV0dXJucyBBbiBBcnJheSBvZiBudW1iZXJzIGludGVycHJldGVkIGFzIEZsb2F0MzIgdmFsdWVzLlxuICovXG5leHBvcnQgY29uc3QgdG9GbG9hdDMyQXJyYXkgPSAoYmFzZTY0U3RyKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIGZvciBOb2RlLmpzIGVudmlyb25tZW50XG4gICAgICAgIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5mcm9tKGJhc2U2NFN0ciwgJ2Jhc2U2NCcpO1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgRmxvYXQzMkFycmF5KGJ1Zi5idWZmZXIsIGJ1Zi5ieXRlT2Zmc2V0LCBidWYubGVuZ3RoIC8gRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBmb3IgbGVnYWN5IHdlYiBwbGF0Zm9ybSBBUElzXG4gICAgICAgIGNvbnN0IGJpbmFyeVN0ciA9IGF0b2IoYmFzZTY0U3RyKTtcbiAgICAgICAgY29uc3QgbGVuID0gYmluYXJ5U3RyLmxlbmd0aDtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW4pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBieXRlc1tpXSA9IGJpbmFyeVN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKG5ldyBGbG9hdDMyQXJyYXkoYnl0ZXMuYnVmZmVyKSk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2U2NC5tanMubWFwIl0sIm5hbWVzIjpbIk9wZW5BSUVycm9yIiwiZW5jb2RlVVRGOCIsInRvQmFzZTY0IiwiZGF0YSIsImdsb2JhbFRoaXMiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJidG9hIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiYXBwbHkiLCJmcm9tQmFzZTY0Iiwic3RyIiwiYnVmIiwiVWludDhBcnJheSIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiYXRvYiIsImJzdHIiLCJsZW5ndGgiLCJpIiwiY2hhckNvZGVBdCIsInRvRmxvYXQzMkFycmF5IiwiYmFzZTY0U3RyIiwiQXJyYXkiLCJGbG9hdDMyQXJyYXkiLCJCWVRFU19QRVJfRUxFTUVOVCIsImJpbmFyeVN0ciIsImxlbiIsImJ5dGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/utils/base64.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/utils/bytes.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/internal/utils/bytes.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   decodeUTF8: () => (/* binding */ decodeUTF8),\n/* harmony export */   encodeUTF8: () => (/* binding */ encodeUTF8)\n/* harmony export */ });\nfunction concatBytes(buffers) {\n    let length = 0;\n    for (const buffer of buffers){\n        length += buffer.length;\n    }\n    const output = new Uint8Array(length);\n    let index = 0;\n    for (const buffer of buffers){\n        output.set(buffer, index);\n        index += buffer.length;\n    }\n    return output;\n}\nlet encodeUTF8_;\nfunction encodeUTF8(str) {\n    let encoder;\n    return (encodeUTF8_ ?? (encoder = new globalThis.TextEncoder(), encodeUTF8_ = encoder.encode.bind(encoder)))(str);\n}\nlet decodeUTF8_;\nfunction decodeUTF8(bytes) {\n    let decoder;\n    return (decodeUTF8_ ?? (decoder = new globalThis.TextDecoder(), decodeUTF8_ = decoder.decode.bind(decoder)))(bytes);\n} //# sourceMappingURL=bytes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3V0aWxzL2J5dGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxTQUFTQSxZQUFZQyxPQUFPO0lBQy9CLElBQUlDLFNBQVM7SUFDYixLQUFLLE1BQU1DLFVBQVVGLFFBQVM7UUFDMUJDLFVBQVVDLE9BQU9ELE1BQU07SUFDM0I7SUFDQSxNQUFNRSxTQUFTLElBQUlDLFdBQVdIO0lBQzlCLElBQUlJLFFBQVE7SUFDWixLQUFLLE1BQU1ILFVBQVVGLFFBQVM7UUFDMUJHLE9BQU9HLEdBQUcsQ0FBQ0osUUFBUUc7UUFDbkJBLFNBQVNILE9BQU9ELE1BQU07SUFDMUI7SUFDQSxPQUFPRTtBQUNYO0FBQ0EsSUFBSUk7QUFDRyxTQUFTQyxXQUFXQyxHQUFHO0lBQzFCLElBQUlDO0lBQ0osT0FBTyxDQUFDSCxlQUNILFdBQVcsSUFBSUksV0FBV0MsV0FBVyxJQUFNTCxjQUFjRyxRQUFRRyxNQUFNLENBQUNDLElBQUksQ0FBQ0osUUFBUSxDQUFDLEVBQUdEO0FBQ2xHO0FBQ0EsSUFBSU07QUFDRyxTQUFTQyxXQUFXQyxLQUFLO0lBQzVCLElBQUlDO0lBQ0osT0FBTyxDQUFDSCxlQUNILFdBQVcsSUFBSUosV0FBV1EsV0FBVyxJQUFNSixjQUFjRyxRQUFRRSxNQUFNLENBQUNOLElBQUksQ0FBQ0ksUUFBUSxDQUFDLEVBQUdEO0FBQ2xHLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3V0aWxzL2J5dGVzLm1qcz9hZTM3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBjb25jYXRCeXRlcyhidWZmZXJzKSB7XG4gICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgZm9yIChjb25zdCBidWZmZXIgb2YgYnVmZmVycykge1xuICAgICAgICBsZW5ndGggKz0gYnVmZmVyLmxlbmd0aDtcbiAgICB9XG4gICAgY29uc3Qgb3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGZvciAoY29uc3QgYnVmZmVyIG9mIGJ1ZmZlcnMpIHtcbiAgICAgICAgb3V0cHV0LnNldChidWZmZXIsIGluZGV4KTtcbiAgICAgICAgaW5kZXggKz0gYnVmZmVyLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cbmxldCBlbmNvZGVVVEY4XztcbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVVVEY4KHN0cikge1xuICAgIGxldCBlbmNvZGVyO1xuICAgIHJldHVybiAoZW5jb2RlVVRGOF8gPz9cbiAgICAgICAgKChlbmNvZGVyID0gbmV3IGdsb2JhbFRoaXMuVGV4dEVuY29kZXIoKSksIChlbmNvZGVVVEY4XyA9IGVuY29kZXIuZW5jb2RlLmJpbmQoZW5jb2RlcikpKSkoc3RyKTtcbn1cbmxldCBkZWNvZGVVVEY4XztcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVVVEY4KGJ5dGVzKSB7XG4gICAgbGV0IGRlY29kZXI7XG4gICAgcmV0dXJuIChkZWNvZGVVVEY4XyA/P1xuICAgICAgICAoKGRlY29kZXIgPSBuZXcgZ2xvYmFsVGhpcy5UZXh0RGVjb2RlcigpKSwgKGRlY29kZVVURjhfID0gZGVjb2Rlci5kZWNvZGUuYmluZChkZWNvZGVyKSkpKShieXRlcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ieXRlcy5tanMubWFwIl0sIm5hbWVzIjpbImNvbmNhdEJ5dGVzIiwiYnVmZmVycyIsImxlbmd0aCIsImJ1ZmZlciIsIm91dHB1dCIsIlVpbnQ4QXJyYXkiLCJpbmRleCIsInNldCIsImVuY29kZVVURjhfIiwiZW5jb2RlVVRGOCIsInN0ciIsImVuY29kZXIiLCJnbG9iYWxUaGlzIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJiaW5kIiwiZGVjb2RlVVRGOF8iLCJkZWNvZGVVVEY4IiwiYnl0ZXMiLCJkZWNvZGVyIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/utils/bytes.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/utils/env.mjs":
/*!****************************************************!*\
  !*** ./node_modules/openai/internal/utils/env.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   readEnv: () => (/* binding */ readEnv)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */ const readEnv = (env)=>{\n    if (typeof globalThis.process !== \"undefined\") {\n        return globalThis.process.env?.[env]?.trim() ?? undefined;\n    }\n    if (typeof globalThis.Deno !== \"undefined\") {\n        return globalThis.Deno.env?.get?.(env)?.trim();\n    }\n    return undefined;\n}; //# sourceMappingURL=env.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3V0aWxzL2Vudi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHNGQUFzRjtBQUN0Rjs7Ozs7O0NBTUMsR0FDTSxNQUFNQSxVQUFVLENBQUNDO0lBQ3BCLElBQUksT0FBT0MsV0FBV0MsT0FBTyxLQUFLLGFBQWE7UUFDM0MsT0FBT0QsV0FBV0MsT0FBTyxDQUFDRixHQUFHLEVBQUUsQ0FBQ0EsSUFBSSxFQUFFRyxVQUFVQztJQUNwRDtJQUNBLElBQUksT0FBT0gsV0FBV0ksSUFBSSxLQUFLLGFBQWE7UUFDeEMsT0FBT0osV0FBV0ksSUFBSSxDQUFDTCxHQUFHLEVBQUVNLE1BQU1OLE1BQU1HO0lBQzVDO0lBQ0EsT0FBT0M7QUFDWCxFQUFFLENBQ0YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3V0aWxzL2Vudi5tanM/ZmRlZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuLyoqXG4gKiBSZWFkIGFuIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICpcbiAqIFRyaW1zIGJlZ2lubmluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS5cbiAqXG4gKiBXaWxsIHJldHVybiB1bmRlZmluZWQgaWYgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIGRvZXNuJ3QgZXhpc3Qgb3IgY2Fubm90IGJlIGFjY2Vzc2VkLlxuICovXG5leHBvcnQgY29uc3QgcmVhZEVudiA9IChlbnYpID0+IHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMucHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXMucHJvY2Vzcy5lbnY/LltlbnZdPy50cmltKCkgPz8gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMuRGVubyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXMuRGVuby5lbnY/LmdldD8uKGVudik/LnRyaW0oKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnYubWpzLm1hcCJdLCJuYW1lcyI6WyJyZWFkRW52IiwiZW52IiwiZ2xvYmFsVGhpcyIsInByb2Nlc3MiLCJ0cmltIiwidW5kZWZpbmVkIiwiRGVubyIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/utils/env.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/utils/log.mjs":
/*!****************************************************!*\
  !*** ./node_modules/openai/internal/utils/log.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatRequestDetails: () => (/* binding */ formatRequestDetails),\n/* harmony export */   loggerFor: () => (/* binding */ loggerFor),\n/* harmony export */   parseLogLevel: () => (/* binding */ parseLogLevel)\n/* harmony export */ });\n/* harmony import */ var _values_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./values.mjs */ \"(rsc)/./node_modules/openai/internal/utils/values.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nconst levelNumbers = {\n    off: 0,\n    error: 200,\n    warn: 300,\n    info: 400,\n    debug: 500\n};\nconst parseLogLevel = (maybeLevel, sourceName, client)=>{\n    if (!maybeLevel) {\n        return undefined;\n    }\n    if ((0,_values_mjs__WEBPACK_IMPORTED_MODULE_0__.hasOwn)(levelNumbers, maybeLevel)) {\n        return maybeLevel;\n    }\n    loggerFor(client).warn(`${sourceName} was set to ${JSON.stringify(maybeLevel)}, expected one of ${JSON.stringify(Object.keys(levelNumbers))}`);\n    return undefined;\n};\nfunction noop() {}\nfunction makeLogFn(fnLevel, logger, logLevel) {\n    if (!logger || levelNumbers[fnLevel] > levelNumbers[logLevel]) {\n        return noop;\n    } else {\n        // Don't wrap logger functions, we want the stacktrace intact!\n        return logger[fnLevel].bind(logger);\n    }\n}\nconst noopLogger = {\n    error: noop,\n    warn: noop,\n    info: noop,\n    debug: noop\n};\nlet cachedLoggers = /* @__PURE__ */ new WeakMap();\nfunction loggerFor(client) {\n    const logger = client.logger;\n    const logLevel = client.logLevel ?? \"off\";\n    if (!logger) {\n        return noopLogger;\n    }\n    const cachedLogger = cachedLoggers.get(logger);\n    if (cachedLogger && cachedLogger[0] === logLevel) {\n        return cachedLogger[1];\n    }\n    const levelLogger = {\n        error: makeLogFn(\"error\", logger, logLevel),\n        warn: makeLogFn(\"warn\", logger, logLevel),\n        info: makeLogFn(\"info\", logger, logLevel),\n        debug: makeLogFn(\"debug\", logger, logLevel)\n    };\n    cachedLoggers.set(logger, [\n        logLevel,\n        levelLogger\n    ]);\n    return levelLogger;\n}\nconst formatRequestDetails = (details)=>{\n    if (details.options) {\n        details.options = {\n            ...details.options\n        };\n        delete details.options[\"headers\"]; // redundant + leaks internals\n    }\n    if (details.headers) {\n        details.headers = Object.fromEntries((details.headers instanceof Headers ? [\n            ...details.headers\n        ] : Object.entries(details.headers)).map(([name, value])=>[\n                name,\n                name.toLowerCase() === \"authorization\" || name.toLowerCase() === \"cookie\" || name.toLowerCase() === \"set-cookie\" ? \"***\" : value\n            ]));\n    }\n    if (\"retryOfRequestLogID\" in details) {\n        if (details.retryOfRequestLogID) {\n            details.retryOf = details.retryOfRequestLogID;\n        }\n        delete details.retryOfRequestLogID;\n    }\n    return details;\n}; //# sourceMappingURL=log.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3V0aWxzL2xvZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHNGQUFzRjtBQUNoRDtBQUN0QyxNQUFNQyxlQUFlO0lBQ2pCQyxLQUFLO0lBQ0xDLE9BQU87SUFDUEMsTUFBTTtJQUNOQyxNQUFNO0lBQ05DLE9BQU87QUFDWDtBQUNPLE1BQU1DLGdCQUFnQixDQUFDQyxZQUFZQyxZQUFZQztJQUNsRCxJQUFJLENBQUNGLFlBQVk7UUFDYixPQUFPRztJQUNYO0lBQ0EsSUFBSVgsbURBQU1BLENBQUNDLGNBQWNPLGFBQWE7UUFDbEMsT0FBT0E7SUFDWDtJQUNBSSxVQUFVRixRQUFRTixJQUFJLENBQUMsQ0FBQyxFQUFFSyxXQUFXLFlBQVksRUFBRUksS0FBS0MsU0FBUyxDQUFDTixZQUFZLGtCQUFrQixFQUFFSyxLQUFLQyxTQUFTLENBQUNDLE9BQU9DLElBQUksQ0FBQ2YsZUFBZSxDQUFDO0lBQzdJLE9BQU9VO0FBQ1gsRUFBRTtBQUNGLFNBQVNNLFFBQVM7QUFDbEIsU0FBU0MsVUFBVUMsT0FBTyxFQUFFQyxNQUFNLEVBQUVDLFFBQVE7SUFDeEMsSUFBSSxDQUFDRCxVQUFVbkIsWUFBWSxDQUFDa0IsUUFBUSxHQUFHbEIsWUFBWSxDQUFDb0IsU0FBUyxFQUFFO1FBQzNELE9BQU9KO0lBQ1gsT0FDSztRQUNELDhEQUE4RDtRQUM5RCxPQUFPRyxNQUFNLENBQUNELFFBQVEsQ0FBQ0csSUFBSSxDQUFDRjtJQUNoQztBQUNKO0FBQ0EsTUFBTUcsYUFBYTtJQUNmcEIsT0FBT2M7SUFDUGIsTUFBTWE7SUFDTlosTUFBTVk7SUFDTlgsT0FBT1c7QUFDWDtBQUNBLElBQUlPLGdCQUFnQixhQUFhLEdBQUcsSUFBSUM7QUFDakMsU0FBU2IsVUFBVUYsTUFBTTtJQUM1QixNQUFNVSxTQUFTVixPQUFPVSxNQUFNO0lBQzVCLE1BQU1DLFdBQVdYLE9BQU9XLFFBQVEsSUFBSTtJQUNwQyxJQUFJLENBQUNELFFBQVE7UUFDVCxPQUFPRztJQUNYO0lBQ0EsTUFBTUcsZUFBZUYsY0FBY0csR0FBRyxDQUFDUDtJQUN2QyxJQUFJTSxnQkFBZ0JBLFlBQVksQ0FBQyxFQUFFLEtBQUtMLFVBQVU7UUFDOUMsT0FBT0ssWUFBWSxDQUFDLEVBQUU7SUFDMUI7SUFDQSxNQUFNRSxjQUFjO1FBQ2hCekIsT0FBT2UsVUFBVSxTQUFTRSxRQUFRQztRQUNsQ2pCLE1BQU1jLFVBQVUsUUFBUUUsUUFBUUM7UUFDaENoQixNQUFNYSxVQUFVLFFBQVFFLFFBQVFDO1FBQ2hDZixPQUFPWSxVQUFVLFNBQVNFLFFBQVFDO0lBQ3RDO0lBQ0FHLGNBQWNLLEdBQUcsQ0FBQ1QsUUFBUTtRQUFDQztRQUFVTztLQUFZO0lBQ2pELE9BQU9BO0FBQ1g7QUFDTyxNQUFNRSx1QkFBdUIsQ0FBQ0M7SUFDakMsSUFBSUEsUUFBUUMsT0FBTyxFQUFFO1FBQ2pCRCxRQUFRQyxPQUFPLEdBQUc7WUFBRSxHQUFHRCxRQUFRQyxPQUFPO1FBQUM7UUFDdkMsT0FBT0QsUUFBUUMsT0FBTyxDQUFDLFVBQVUsRUFBRSw4QkFBOEI7SUFDckU7SUFDQSxJQUFJRCxRQUFRRSxPQUFPLEVBQUU7UUFDakJGLFFBQVFFLE9BQU8sR0FBR2xCLE9BQU9tQixXQUFXLENBQUMsQ0FBQ0gsUUFBUUUsT0FBTyxZQUFZRSxVQUFVO2VBQUlKLFFBQVFFLE9BQU87U0FBQyxHQUFHbEIsT0FBT3FCLE9BQU8sQ0FBQ0wsUUFBUUUsT0FBTyxHQUFHSSxHQUFHLENBQUMsQ0FBQyxDQUFDQyxNQUFNQyxNQUFNLEdBQUs7Z0JBQ3RKRDtnQkFDQ0EsS0FBS0UsV0FBVyxPQUFPLG1CQUNwQkYsS0FBS0UsV0FBVyxPQUFPLFlBQ3ZCRixLQUFLRSxXQUFXLE9BQU8sZUFDdkIsUUFDRUQ7YUFDVDtJQUNMO0lBQ0EsSUFBSSx5QkFBeUJSLFNBQVM7UUFDbEMsSUFBSUEsUUFBUVUsbUJBQW1CLEVBQUU7WUFDN0JWLFFBQVFXLE9BQU8sR0FBR1gsUUFBUVUsbUJBQW1CO1FBQ2pEO1FBQ0EsT0FBT1YsUUFBUVUsbUJBQW1CO0lBQ3RDO0lBQ0EsT0FBT1Y7QUFDWCxFQUFFLENBQ0YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3V0aWxzL2xvZy5tanM/ZjllNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgaGFzT3duIH0gZnJvbSBcIi4vdmFsdWVzLm1qc1wiO1xuY29uc3QgbGV2ZWxOdW1iZXJzID0ge1xuICAgIG9mZjogMCxcbiAgICBlcnJvcjogMjAwLFxuICAgIHdhcm46IDMwMCxcbiAgICBpbmZvOiA0MDAsXG4gICAgZGVidWc6IDUwMCxcbn07XG5leHBvcnQgY29uc3QgcGFyc2VMb2dMZXZlbCA9IChtYXliZUxldmVsLCBzb3VyY2VOYW1lLCBjbGllbnQpID0+IHtcbiAgICBpZiAoIW1heWJlTGV2ZWwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGhhc093bihsZXZlbE51bWJlcnMsIG1heWJlTGV2ZWwpKSB7XG4gICAgICAgIHJldHVybiBtYXliZUxldmVsO1xuICAgIH1cbiAgICBsb2dnZXJGb3IoY2xpZW50KS53YXJuKGAke3NvdXJjZU5hbWV9IHdhcyBzZXQgdG8gJHtKU09OLnN0cmluZ2lmeShtYXliZUxldmVsKX0sIGV4cGVjdGVkIG9uZSBvZiAke0pTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKGxldmVsTnVtYmVycykpfWApO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuZnVuY3Rpb24gbm9vcCgpIHsgfVxuZnVuY3Rpb24gbWFrZUxvZ0ZuKGZuTGV2ZWwsIGxvZ2dlciwgbG9nTGV2ZWwpIHtcbiAgICBpZiAoIWxvZ2dlciB8fCBsZXZlbE51bWJlcnNbZm5MZXZlbF0gPiBsZXZlbE51bWJlcnNbbG9nTGV2ZWxdKSB7XG4gICAgICAgIHJldHVybiBub29wO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gRG9uJ3Qgd3JhcCBsb2dnZXIgZnVuY3Rpb25zLCB3ZSB3YW50IHRoZSBzdGFja3RyYWNlIGludGFjdCFcbiAgICAgICAgcmV0dXJuIGxvZ2dlcltmbkxldmVsXS5iaW5kKGxvZ2dlcik7XG4gICAgfVxufVxuY29uc3Qgbm9vcExvZ2dlciA9IHtcbiAgICBlcnJvcjogbm9vcCxcbiAgICB3YXJuOiBub29wLFxuICAgIGluZm86IG5vb3AsXG4gICAgZGVidWc6IG5vb3AsXG59O1xubGV0IGNhY2hlZExvZ2dlcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmV4cG9ydCBmdW5jdGlvbiBsb2dnZXJGb3IoY2xpZW50KSB7XG4gICAgY29uc3QgbG9nZ2VyID0gY2xpZW50LmxvZ2dlcjtcbiAgICBjb25zdCBsb2dMZXZlbCA9IGNsaWVudC5sb2dMZXZlbCA/PyAnb2ZmJztcbiAgICBpZiAoIWxvZ2dlcikge1xuICAgICAgICByZXR1cm4gbm9vcExvZ2dlcjtcbiAgICB9XG4gICAgY29uc3QgY2FjaGVkTG9nZ2VyID0gY2FjaGVkTG9nZ2Vycy5nZXQobG9nZ2VyKTtcbiAgICBpZiAoY2FjaGVkTG9nZ2VyICYmIGNhY2hlZExvZ2dlclswXSA9PT0gbG9nTGV2ZWwpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZExvZ2dlclsxXTtcbiAgICB9XG4gICAgY29uc3QgbGV2ZWxMb2dnZXIgPSB7XG4gICAgICAgIGVycm9yOiBtYWtlTG9nRm4oJ2Vycm9yJywgbG9nZ2VyLCBsb2dMZXZlbCksXG4gICAgICAgIHdhcm46IG1ha2VMb2dGbignd2FybicsIGxvZ2dlciwgbG9nTGV2ZWwpLFxuICAgICAgICBpbmZvOiBtYWtlTG9nRm4oJ2luZm8nLCBsb2dnZXIsIGxvZ0xldmVsKSxcbiAgICAgICAgZGVidWc6IG1ha2VMb2dGbignZGVidWcnLCBsb2dnZXIsIGxvZ0xldmVsKSxcbiAgICB9O1xuICAgIGNhY2hlZExvZ2dlcnMuc2V0KGxvZ2dlciwgW2xvZ0xldmVsLCBsZXZlbExvZ2dlcl0pO1xuICAgIHJldHVybiBsZXZlbExvZ2dlcjtcbn1cbmV4cG9ydCBjb25zdCBmb3JtYXRSZXF1ZXN0RGV0YWlscyA9IChkZXRhaWxzKSA9PiB7XG4gICAgaWYgKGRldGFpbHMub3B0aW9ucykge1xuICAgICAgICBkZXRhaWxzLm9wdGlvbnMgPSB7IC4uLmRldGFpbHMub3B0aW9ucyB9O1xuICAgICAgICBkZWxldGUgZGV0YWlscy5vcHRpb25zWydoZWFkZXJzJ107IC8vIHJlZHVuZGFudCArIGxlYWtzIGludGVybmFsc1xuICAgIH1cbiAgICBpZiAoZGV0YWlscy5oZWFkZXJzKSB7XG4gICAgICAgIGRldGFpbHMuaGVhZGVycyA9IE9iamVjdC5mcm9tRW50cmllcygoZGV0YWlscy5oZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycyA/IFsuLi5kZXRhaWxzLmhlYWRlcnNdIDogT2JqZWN0LmVudHJpZXMoZGV0YWlscy5oZWFkZXJzKSkubWFwKChbbmFtZSwgdmFsdWVdKSA9PiBbXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgKG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2F1dGhvcml6YXRpb24nIHx8XG4gICAgICAgICAgICAgICAgbmFtZS50b0xvd2VyQ2FzZSgpID09PSAnY29va2llJyB8fFxuICAgICAgICAgICAgICAgIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NldC1jb29raWUnKSA/XG4gICAgICAgICAgICAgICAgJyoqKidcbiAgICAgICAgICAgICAgICA6IHZhbHVlLFxuICAgICAgICBdKSk7XG4gICAgfVxuICAgIGlmICgncmV0cnlPZlJlcXVlc3RMb2dJRCcgaW4gZGV0YWlscykge1xuICAgICAgICBpZiAoZGV0YWlscy5yZXRyeU9mUmVxdWVzdExvZ0lEKSB7XG4gICAgICAgICAgICBkZXRhaWxzLnJldHJ5T2YgPSBkZXRhaWxzLnJldHJ5T2ZSZXF1ZXN0TG9nSUQ7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIGRldGFpbHMucmV0cnlPZlJlcXVlc3RMb2dJRDtcbiAgICB9XG4gICAgcmV0dXJuIGRldGFpbHM7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nLm1qcy5tYXAiXSwibmFtZXMiOlsiaGFzT3duIiwibGV2ZWxOdW1iZXJzIiwib2ZmIiwiZXJyb3IiLCJ3YXJuIiwiaW5mbyIsImRlYnVnIiwicGFyc2VMb2dMZXZlbCIsIm1heWJlTGV2ZWwiLCJzb3VyY2VOYW1lIiwiY2xpZW50IiwidW5kZWZpbmVkIiwibG9nZ2VyRm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIk9iamVjdCIsImtleXMiLCJub29wIiwibWFrZUxvZ0ZuIiwiZm5MZXZlbCIsImxvZ2dlciIsImxvZ0xldmVsIiwiYmluZCIsIm5vb3BMb2dnZXIiLCJjYWNoZWRMb2dnZXJzIiwiV2Vha01hcCIsImNhY2hlZExvZ2dlciIsImdldCIsImxldmVsTG9nZ2VyIiwic2V0IiwiZm9ybWF0UmVxdWVzdERldGFpbHMiLCJkZXRhaWxzIiwib3B0aW9ucyIsImhlYWRlcnMiLCJmcm9tRW50cmllcyIsIkhlYWRlcnMiLCJlbnRyaWVzIiwibWFwIiwibmFtZSIsInZhbHVlIiwidG9Mb3dlckNhc2UiLCJyZXRyeU9mUmVxdWVzdExvZ0lEIiwicmV0cnlPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/utils/log.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/utils/path.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/internal/utils/path.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPathTagFunction: () => (/* binding */ createPathTagFunction),\n/* harmony export */   encodeURIPath: () => (/* binding */ encodeURIPath),\n/* harmony export */   path: () => (/* binding */ path)\n/* harmony export */ });\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/error.mjs */ \"(rsc)/./node_modules/openai/core/error.mjs\");\n\n/**\n * Percent-encode everything that isn't safe to have in a path without encoding safe chars.\n *\n * Taken from https://datatracker.ietf.org/doc/html/rfc3986#section-3.3:\n * > unreserved  = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n * > sub-delims  = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n * > pchar       = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n */ function encodeURIPath(str) {\n    return str.replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]+/g, encodeURIComponent);\n}\nconst EMPTY = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.create(null));\nconst createPathTagFunction = (pathEncoder = encodeURIPath)=>function path(statics, ...params) {\n        // If there are no params, no processing is needed.\n        if (statics.length === 1) return statics[0];\n        let postPath = false;\n        const invalidSegments = [];\n        const path1 = statics.reduce((previousValue, currentValue, index)=>{\n            if (/[?#]/.test(currentValue)) {\n                postPath = true;\n            }\n            const value = params[index];\n            let encoded = (postPath ? encodeURIComponent : pathEncoder)(\"\" + value);\n            if (index !== params.length && (value == null || typeof value === \"object\" && // handle values from other realms\n            value.toString === Object.getPrototypeOf(Object.getPrototypeOf(value.hasOwnProperty ?? EMPTY) ?? EMPTY)?.toString)) {\n                encoded = value + \"\";\n                invalidSegments.push({\n                    start: previousValue.length + currentValue.length,\n                    length: encoded.length,\n                    error: `Value of type ${Object.prototype.toString.call(value).slice(8, -1)} is not a valid path parameter`\n                });\n            }\n            return previousValue + currentValue + (index === params.length ? \"\" : encoded);\n        }, \"\");\n        const pathOnly = path1.split(/[?#]/, 1)[0];\n        const invalidSegmentPattern = /(?<=^|\\/)(?:\\.|%2e){1,2}(?=\\/|$)/gi;\n        let match;\n        // Find all invalid segments\n        while((match = invalidSegmentPattern.exec(pathOnly)) !== null){\n            invalidSegments.push({\n                start: match.index,\n                length: match[0].length,\n                error: `Value \"${match[0]}\" can\\'t be safely passed as a path parameter`\n            });\n        }\n        invalidSegments.sort((a, b)=>a.start - b.start);\n        if (invalidSegments.length > 0) {\n            let lastEnd = 0;\n            const underline = invalidSegments.reduce((acc, segment)=>{\n                const spaces = \" \".repeat(segment.start - lastEnd);\n                const arrows = \"^\".repeat(segment.length);\n                lastEnd = segment.start + segment.length;\n                return acc + spaces + arrows;\n            }, \"\");\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`Path parameters result in path with invalid segments:\\n${invalidSegments.map((e)=>e.error).join(\"\\n\")}\\n${path1}\\n${underline}`);\n        }\n        return path1;\n    };\n/**\n * URI-encodes path params and ensures no unsafe /./ or /../ path segments are introduced.\n */ const path = /* @__PURE__ */ createPathTagFunction(encodeURIPath); //# sourceMappingURL=path.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3V0aWxzL3BhdGgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUQ7QUFDbkQ7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNDLGNBQWNDLEdBQUc7SUFDN0IsT0FBT0EsSUFBSUMsT0FBTyxDQUFDLG9DQUFvQ0M7QUFDM0Q7QUFDQSxNQUFNQyxRQUFRLGFBQWEsR0FBR0MsT0FBT0MsTUFBTSxDQUFDLGFBQWEsR0FBR0QsT0FBT0UsTUFBTSxDQUFDO0FBQ25FLE1BQU1DLHdCQUF3QixDQUFDQyxjQUFjVCxhQUFhLEdBQUssU0FBU1UsS0FBS0MsT0FBTyxFQUFFLEdBQUdDLE1BQU07UUFDbEcsbURBQW1EO1FBQ25ELElBQUlELFFBQVFFLE1BQU0sS0FBSyxHQUNuQixPQUFPRixPQUFPLENBQUMsRUFBRTtRQUNyQixJQUFJRyxXQUFXO1FBQ2YsTUFBTUMsa0JBQWtCLEVBQUU7UUFDMUIsTUFBTUwsUUFBT0MsUUFBUUssTUFBTSxDQUFDLENBQUNDLGVBQWVDLGNBQWNDO1lBQ3RELElBQUksT0FBT0MsSUFBSSxDQUFDRixlQUFlO2dCQUMzQkosV0FBVztZQUNmO1lBQ0EsTUFBTU8sUUFBUVQsTUFBTSxDQUFDTyxNQUFNO1lBQzNCLElBQUlHLFVBQVUsQ0FBQ1IsV0FBV1gscUJBQXFCTSxXQUFVLEVBQUcsS0FBS1k7WUFDakUsSUFBSUYsVUFBVVAsT0FBT0MsTUFBTSxJQUN0QlEsQ0FBQUEsU0FBUyxRQUNMLE9BQU9BLFVBQVUsWUFDZCxrQ0FBa0M7WUFDbENBLE1BQU1FLFFBQVEsS0FDVmxCLE9BQU9tQixjQUFjLENBQUNuQixPQUFPbUIsY0FBYyxDQUFDSCxNQUFNSSxjQUFjLElBQUlyQixVQUFVQSxRQUN4RW1CLFFBQVEsR0FBSTtnQkFDOUJELFVBQVVELFFBQVE7Z0JBQ2xCTixnQkFBZ0JXLElBQUksQ0FBQztvQkFDakJDLE9BQU9WLGNBQWNKLE1BQU0sR0FBR0ssYUFBYUwsTUFBTTtvQkFDakRBLFFBQVFTLFFBQVFULE1BQU07b0JBQ3RCZSxPQUFPLENBQUMsY0FBYyxFQUFFdkIsT0FBT3dCLFNBQVMsQ0FBQ04sUUFBUSxDQUM1Q08sSUFBSSxDQUFDVCxPQUNMVSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsOEJBQThCLENBQUM7Z0JBQ3JEO1lBQ0o7WUFDQSxPQUFPZCxnQkFBZ0JDLGVBQWdCQyxDQUFBQSxVQUFVUCxPQUFPQyxNQUFNLEdBQUcsS0FBS1MsT0FBTTtRQUNoRixHQUFHO1FBQ0gsTUFBTVUsV0FBV3RCLE1BQUt1QixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRTtRQUN6QyxNQUFNQyx3QkFBd0I7UUFDOUIsSUFBSUM7UUFDSiw0QkFBNEI7UUFDNUIsTUFBTyxDQUFDQSxRQUFRRCxzQkFBc0JFLElBQUksQ0FBQ0osU0FBUSxNQUFPLEtBQU07WUFDNURqQixnQkFBZ0JXLElBQUksQ0FBQztnQkFDakJDLE9BQU9RLE1BQU1oQixLQUFLO2dCQUNsQk4sUUFBUXNCLEtBQUssQ0FBQyxFQUFFLENBQUN0QixNQUFNO2dCQUN2QmUsT0FBTyxDQUFDLE9BQU8sRUFBRU8sS0FBSyxDQUFDLEVBQUUsQ0FBQyw2Q0FBNkMsQ0FBQztZQUM1RTtRQUNKO1FBQ0FwQixnQkFBZ0JzQixJQUFJLENBQUMsQ0FBQ0MsR0FBR0MsSUFBTUQsRUFBRVgsS0FBSyxHQUFHWSxFQUFFWixLQUFLO1FBQ2hELElBQUlaLGdCQUFnQkYsTUFBTSxHQUFHLEdBQUc7WUFDNUIsSUFBSTJCLFVBQVU7WUFDZCxNQUFNQyxZQUFZMUIsZ0JBQWdCQyxNQUFNLENBQUMsQ0FBQzBCLEtBQUtDO2dCQUMzQyxNQUFNQyxTQUFTLElBQUlDLE1BQU0sQ0FBQ0YsUUFBUWhCLEtBQUssR0FBR2E7Z0JBQzFDLE1BQU1NLFNBQVMsSUFBSUQsTUFBTSxDQUFDRixRQUFROUIsTUFBTTtnQkFDeEMyQixVQUFVRyxRQUFRaEIsS0FBSyxHQUFHZ0IsUUFBUTlCLE1BQU07Z0JBQ3hDLE9BQU82QixNQUFNRSxTQUFTRTtZQUMxQixHQUFHO1lBQ0gsTUFBTSxJQUFJL0Msd0RBQVdBLENBQUMsQ0FBQyx1REFBdUQsRUFBRWdCLGdCQUMzRWdDLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQSxFQUFFcEIsS0FBSyxFQUNsQnFCLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRXZDLE1BQUssRUFBRSxFQUFFK0IsVUFBVSxDQUFDO1FBQzVDO1FBQ0EsT0FBTy9CO0lBQ1gsRUFBRTtBQUNGOztDQUVDLEdBQ00sTUFBTUEsT0FBTyxhQUFhLEdBQUdGLHNCQUFzQlIsZUFBZSxDQUN6RSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvaW50ZXJuYWwvdXRpbHMvcGF0aC5tanM/Y2EwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcGVuQUlFcnJvciB9IGZyb20gXCIuLi8uLi9jb3JlL2Vycm9yLm1qc1wiO1xuLyoqXG4gKiBQZXJjZW50LWVuY29kZSBldmVyeXRoaW5nIHRoYXQgaXNuJ3Qgc2FmZSB0byBoYXZlIGluIGEgcGF0aCB3aXRob3V0IGVuY29kaW5nIHNhZmUgY2hhcnMuXG4gKlxuICogVGFrZW4gZnJvbSBodHRwczovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zLjM6XG4gKiA+IHVucmVzZXJ2ZWQgID0gQUxQSEEgLyBESUdJVCAvIFwiLVwiIC8gXCIuXCIgLyBcIl9cIiAvIFwiflwiXG4gKiA+IHN1Yi1kZWxpbXMgID0gXCIhXCIgLyBcIiRcIiAvIFwiJlwiIC8gXCInXCIgLyBcIihcIiAvIFwiKVwiIC8gXCIqXCIgLyBcIitcIiAvIFwiLFwiIC8gXCI7XCIgLyBcIj1cIlxuICogPiBwY2hhciAgICAgICA9IHVucmVzZXJ2ZWQgLyBwY3QtZW5jb2RlZCAvIHN1Yi1kZWxpbXMgLyBcIjpcIiAvIFwiQFwiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVVUklQYXRoKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvW15BLVphLXowLTlcXC0uX34hJCYnKCkqKyw7PTpAXSsvZywgZW5jb2RlVVJJQ29tcG9uZW50KTtcbn1cbmNvbnN0IEVNUFRZID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5mcmVlemUoLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCkpO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVBhdGhUYWdGdW5jdGlvbiA9IChwYXRoRW5jb2RlciA9IGVuY29kZVVSSVBhdGgpID0+IGZ1bmN0aW9uIHBhdGgoc3RhdGljcywgLi4ucGFyYW1zKSB7XG4gICAgLy8gSWYgdGhlcmUgYXJlIG5vIHBhcmFtcywgbm8gcHJvY2Vzc2luZyBpcyBuZWVkZWQuXG4gICAgaWYgKHN0YXRpY3MubGVuZ3RoID09PSAxKVxuICAgICAgICByZXR1cm4gc3RhdGljc1swXTtcbiAgICBsZXQgcG9zdFBhdGggPSBmYWxzZTtcbiAgICBjb25zdCBpbnZhbGlkU2VnbWVudHMgPSBbXTtcbiAgICBjb25zdCBwYXRoID0gc3RhdGljcy5yZWR1Y2UoKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKC9bPyNdLy50ZXN0KGN1cnJlbnRWYWx1ZSkpIHtcbiAgICAgICAgICAgIHBvc3RQYXRoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtc1tpbmRleF07XG4gICAgICAgIGxldCBlbmNvZGVkID0gKHBvc3RQYXRoID8gZW5jb2RlVVJJQ29tcG9uZW50IDogcGF0aEVuY29kZXIpKCcnICsgdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggIT09IHBhcmFtcy5sZW5ndGggJiZcbiAgICAgICAgICAgICh2YWx1ZSA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIHZhbHVlcyBmcm9tIG90aGVyIHJlYWxtc1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZS50b1N0cmluZyA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUuaGFzT3duUHJvcGVydHkgPz8gRU1QVFkpID8/IEVNUFRZKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8udG9TdHJpbmcpKSkge1xuICAgICAgICAgICAgZW5jb2RlZCA9IHZhbHVlICsgJyc7XG4gICAgICAgICAgICBpbnZhbGlkU2VnbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHByZXZpb3VzVmFsdWUubGVuZ3RoICsgY3VycmVudFZhbHVlLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBsZW5ndGg6IGVuY29kZWQubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGVycm9yOiBgVmFsdWUgb2YgdHlwZSAke09iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgLmNhbGwodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIC5zbGljZSg4LCAtMSl9IGlzIG5vdCBhIHZhbGlkIHBhdGggcGFyYW1ldGVyYCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcmV2aW91c1ZhbHVlICsgY3VycmVudFZhbHVlICsgKGluZGV4ID09PSBwYXJhbXMubGVuZ3RoID8gJycgOiBlbmNvZGVkKTtcbiAgICB9LCAnJyk7XG4gICAgY29uc3QgcGF0aE9ubHkgPSBwYXRoLnNwbGl0KC9bPyNdLywgMSlbMF07XG4gICAgY29uc3QgaW52YWxpZFNlZ21lbnRQYXR0ZXJuID0gLyg/PD1efFxcLykoPzpcXC58JTJlKXsxLDJ9KD89XFwvfCQpL2dpO1xuICAgIGxldCBtYXRjaDtcbiAgICAvLyBGaW5kIGFsbCBpbnZhbGlkIHNlZ21lbnRzXG4gICAgd2hpbGUgKChtYXRjaCA9IGludmFsaWRTZWdtZW50UGF0dGVybi5leGVjKHBhdGhPbmx5KSkgIT09IG51bGwpIHtcbiAgICAgICAgaW52YWxpZFNlZ21lbnRzLnB1c2goe1xuICAgICAgICAgICAgc3RhcnQ6IG1hdGNoLmluZGV4LFxuICAgICAgICAgICAgbGVuZ3RoOiBtYXRjaFswXS5sZW5ndGgsXG4gICAgICAgICAgICBlcnJvcjogYFZhbHVlIFwiJHttYXRjaFswXX1cIiBjYW5cXCd0IGJlIHNhZmVseSBwYXNzZWQgYXMgYSBwYXRoIHBhcmFtZXRlcmAsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbnZhbGlkU2VnbWVudHMuc29ydCgoYSwgYikgPT4gYS5zdGFydCAtIGIuc3RhcnQpO1xuICAgIGlmIChpbnZhbGlkU2VnbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgbGFzdEVuZCA9IDA7XG4gICAgICAgIGNvbnN0IHVuZGVybGluZSA9IGludmFsaWRTZWdtZW50cy5yZWR1Y2UoKGFjYywgc2VnbWVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3BhY2VzID0gJyAnLnJlcGVhdChzZWdtZW50LnN0YXJ0IC0gbGFzdEVuZCk7XG4gICAgICAgICAgICBjb25zdCBhcnJvd3MgPSAnXicucmVwZWF0KHNlZ21lbnQubGVuZ3RoKTtcbiAgICAgICAgICAgIGxhc3RFbmQgPSBzZWdtZW50LnN0YXJ0ICsgc2VnbWVudC5sZW5ndGg7XG4gICAgICAgICAgICByZXR1cm4gYWNjICsgc3BhY2VzICsgYXJyb3dzO1xuICAgICAgICB9LCAnJyk7XG4gICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgUGF0aCBwYXJhbWV0ZXJzIHJlc3VsdCBpbiBwYXRoIHdpdGggaW52YWxpZCBzZWdtZW50czpcXG4ke2ludmFsaWRTZWdtZW50c1xuICAgICAgICAgICAgLm1hcCgoZSkgPT4gZS5lcnJvcilcbiAgICAgICAgICAgIC5qb2luKCdcXG4nKX1cXG4ke3BhdGh9XFxuJHt1bmRlcmxpbmV9YCk7XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xufTtcbi8qKlxuICogVVJJLWVuY29kZXMgcGF0aCBwYXJhbXMgYW5kIGVuc3VyZXMgbm8gdW5zYWZlIC8uLyBvciAvLi4vIHBhdGggc2VnbWVudHMgYXJlIGludHJvZHVjZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBwYXRoID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZVBhdGhUYWdGdW5jdGlvbihlbmNvZGVVUklQYXRoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhdGgubWpzLm1hcCJdLCJuYW1lcyI6WyJPcGVuQUlFcnJvciIsImVuY29kZVVSSVBhdGgiLCJzdHIiLCJyZXBsYWNlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiRU1QVFkiLCJPYmplY3QiLCJmcmVlemUiLCJjcmVhdGUiLCJjcmVhdGVQYXRoVGFnRnVuY3Rpb24iLCJwYXRoRW5jb2RlciIsInBhdGgiLCJzdGF0aWNzIiwicGFyYW1zIiwibGVuZ3RoIiwicG9zdFBhdGgiLCJpbnZhbGlkU2VnbWVudHMiLCJyZWR1Y2UiLCJwcmV2aW91c1ZhbHVlIiwiY3VycmVudFZhbHVlIiwiaW5kZXgiLCJ0ZXN0IiwidmFsdWUiLCJlbmNvZGVkIiwidG9TdHJpbmciLCJnZXRQcm90b3R5cGVPZiIsImhhc093blByb3BlcnR5IiwicHVzaCIsInN0YXJ0IiwiZXJyb3IiLCJwcm90b3R5cGUiLCJjYWxsIiwic2xpY2UiLCJwYXRoT25seSIsInNwbGl0IiwiaW52YWxpZFNlZ21lbnRQYXR0ZXJuIiwibWF0Y2giLCJleGVjIiwic29ydCIsImEiLCJiIiwibGFzdEVuZCIsInVuZGVybGluZSIsImFjYyIsInNlZ21lbnQiLCJzcGFjZXMiLCJyZXBlYXQiLCJhcnJvd3MiLCJtYXAiLCJlIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/utils/path.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/utils/sleep.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/internal/utils/sleep.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nconst sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms)); //# sourceMappingURL=sleep.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3V0aWxzL3NsZWVwLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsc0ZBQXNGO0FBQy9FLE1BQU1BLFFBQVEsQ0FBQ0MsS0FBTyxJQUFJQyxRQUFRLENBQUNDLFVBQVlDLFdBQVdELFNBQVNGLEtBQUssQ0FDL0Usa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3V0aWxzL3NsZWVwLm1qcz9mNTkwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5leHBvcnQgY29uc3Qgc2xlZXAgPSAobXMpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zbGVlcC5tanMubWFwIl0sIm5hbWVzIjpbInNsZWVwIiwibXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/utils/sleep.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/utils/uuid.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/internal/utils/uuid.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uuid4: () => (/* binding */ uuid4)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n/**\n * https://stackoverflow.com/a/2117523\n */ let uuid4 = function() {\n    const { crypto } = globalThis;\n    if (crypto?.randomUUID) {\n        uuid4 = crypto.randomUUID.bind(crypto);\n        return crypto.randomUUID();\n    }\n    const u8 = new Uint8Array(1);\n    const randomByte = crypto ? ()=>crypto.getRandomValues(u8)[0] : ()=>Math.random() * 0xff & 0xff;\n    return \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, (c)=>(+c ^ randomByte() & 15 >> +c / 4).toString(16));\n}; //# sourceMappingURL=uuid.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3V0aWxzL3V1aWQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxzRkFBc0Y7QUFDdEY7O0NBRUMsR0FDTSxJQUFJQSxRQUFRO0lBQ2YsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0M7SUFDbkIsSUFBSUQsUUFBUUUsWUFBWTtRQUNwQkgsUUFBUUMsT0FBT0UsVUFBVSxDQUFDQyxJQUFJLENBQUNIO1FBQy9CLE9BQU9BLE9BQU9FLFVBQVU7SUFDNUI7SUFDQSxNQUFNRSxLQUFLLElBQUlDLFdBQVc7SUFDMUIsTUFBTUMsYUFBYU4sU0FBUyxJQUFNQSxPQUFPTyxlQUFlLENBQUNILEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBTSxLQUFNSyxNQUFNLEtBQUssT0FBUTtJQUNqRyxPQUFPLHVDQUF1Q0MsT0FBTyxDQUFDLFVBQVUsQ0FBQ0MsSUFBTSxDQUFDLENBQUNBLElBQUtMLGVBQWdCLE1BQU8sQ0FBQ0ssSUFBSSxDQUFHLEVBQUdDLFFBQVEsQ0FBQztBQUM3SCxFQUFFLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3V0aWxzL3V1aWQubWpzPzYzZjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbi8qKlxuICogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxMTc1MjNcbiAqL1xuZXhwb3J0IGxldCB1dWlkNCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB7IGNyeXB0byB9ID0gZ2xvYmFsVGhpcztcbiAgICBpZiAoY3J5cHRvPy5yYW5kb21VVUlEKSB7XG4gICAgICAgIHV1aWQ0ID0gY3J5cHRvLnJhbmRvbVVVSUQuYmluZChjcnlwdG8pO1xuICAgICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbVVVSUQoKTtcbiAgICB9XG4gICAgY29uc3QgdTggPSBuZXcgVWludDhBcnJheSgxKTtcbiAgICBjb25zdCByYW5kb21CeXRlID0gY3J5cHRvID8gKCkgPT4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyh1OClbMF0gOiAoKSA9PiAoTWF0aC5yYW5kb20oKSAqIDB4ZmYpICYgMHhmZjtcbiAgICByZXR1cm4gJzEwMDAwMDAwLTEwMDAtNDAwMC04MDAwLTEwMDAwMDAwMDAwMCcucmVwbGFjZSgvWzAxOF0vZywgKGMpID0+ICgrYyBeIChyYW5kb21CeXRlKCkgJiAoMTUgPj4gKCtjIC8gNCkpKSkudG9TdHJpbmcoMTYpKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dWlkLm1qcy5tYXAiXSwibmFtZXMiOlsidXVpZDQiLCJjcnlwdG8iLCJnbG9iYWxUaGlzIiwicmFuZG9tVVVJRCIsImJpbmQiLCJ1OCIsIlVpbnQ4QXJyYXkiLCJyYW5kb21CeXRlIiwiZ2V0UmFuZG9tVmFsdWVzIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJjIiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/utils/uuid.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/utils/values.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/internal/utils/values.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coerceBoolean: () => (/* binding */ coerceBoolean),\n/* harmony export */   coerceFloat: () => (/* binding */ coerceFloat),\n/* harmony export */   coerceInteger: () => (/* binding */ coerceInteger),\n/* harmony export */   ensurePresent: () => (/* binding */ ensurePresent),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   isAbsoluteURL: () => (/* binding */ isAbsoluteURL),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isEmptyObj: () => (/* binding */ isEmptyObj),\n/* harmony export */   isObj: () => (/* binding */ isObj),\n/* harmony export */   isReadonlyArray: () => (/* binding */ isReadonlyArray),\n/* harmony export */   maybeCoerceBoolean: () => (/* binding */ maybeCoerceBoolean),\n/* harmony export */   maybeCoerceFloat: () => (/* binding */ maybeCoerceFloat),\n/* harmony export */   maybeCoerceInteger: () => (/* binding */ maybeCoerceInteger),\n/* harmony export */   maybeObj: () => (/* binding */ maybeObj),\n/* harmony export */   safeJSON: () => (/* binding */ safeJSON),\n/* harmony export */   validatePositiveInteger: () => (/* binding */ validatePositiveInteger)\n/* harmony export */ });\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/error.mjs */ \"(rsc)/./node_modules/openai/core/error.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n// https://url.spec.whatwg.org/#url-scheme-string\nconst startsWithSchemeRegexp = /^[a-z][a-z0-9+.-]*:/i;\nconst isAbsoluteURL = (url)=>{\n    return startsWithSchemeRegexp.test(url);\n};\nlet isArray = (val)=>(isArray = Array.isArray, isArray(val));\nlet isReadonlyArray = isArray;\n/** Returns an object if the given value isn't an object, otherwise returns as-is */ function maybeObj(x) {\n    if (typeof x !== \"object\") {\n        return {};\n    }\n    return x ?? {};\n}\n// https://stackoverflow.com/a/34491287\nfunction isEmptyObj(obj) {\n    if (!obj) return true;\n    for(const _k in obj)return false;\n    return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nfunction hasOwn(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction isObj(obj) {\n    return obj != null && typeof obj === \"object\" && !Array.isArray(obj);\n}\nconst ensurePresent = (value)=>{\n    if (value == null) {\n        throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`Expected a value to be given but received ${value} instead.`);\n    }\n    return value;\n};\nconst validatePositiveInteger = (name, n)=>{\n    if (typeof n !== \"number\" || !Number.isInteger(n)) {\n        throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`${name} must be an integer`);\n    }\n    if (n < 0) {\n        throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`${name} must be a positive integer`);\n    }\n    return n;\n};\nconst coerceInteger = (value)=>{\n    if (typeof value === \"number\") return Math.round(value);\n    if (typeof value === \"string\") return parseInt(value, 10);\n    throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceFloat = (value)=>{\n    if (typeof value === \"number\") return value;\n    if (typeof value === \"string\") return parseFloat(value);\n    throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceBoolean = (value)=>{\n    if (typeof value === \"boolean\") return value;\n    if (typeof value === \"string\") return value === \"true\";\n    return Boolean(value);\n};\nconst maybeCoerceInteger = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceInteger(value);\n};\nconst maybeCoerceFloat = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceFloat(value);\n};\nconst maybeCoerceBoolean = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceBoolean(value);\n};\nconst safeJSON = (text)=>{\n    try {\n        return JSON.parse(text);\n    } catch (err) {\n        return undefined;\n    }\n}; //# sourceMappingURL=values.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3V0aWxzL3ZhbHVlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDbkM7QUFDbkQsaURBQWlEO0FBQ2pELE1BQU1DLHlCQUF5QjtBQUN4QixNQUFNQyxnQkFBZ0IsQ0FBQ0M7SUFDMUIsT0FBT0YsdUJBQXVCRyxJQUFJLENBQUNEO0FBQ3ZDLEVBQUU7QUFDSyxJQUFJRSxVQUFVLENBQUNDLE1BQVMsV0FBV0MsTUFBTUYsT0FBTyxFQUFHQSxRQUFRQyxJQUFHLEVBQUc7QUFDakUsSUFBSUUsa0JBQWtCSCxRQUFRO0FBQ3JDLGtGQUFrRixHQUMzRSxTQUFTSSxTQUFTQyxDQUFDO0lBQ3RCLElBQUksT0FBT0EsTUFBTSxVQUFVO1FBQ3ZCLE9BQU8sQ0FBQztJQUNaO0lBQ0EsT0FBT0EsS0FBSyxDQUFDO0FBQ2pCO0FBQ0EsdUNBQXVDO0FBQ2hDLFNBQVNDLFdBQVdDLEdBQUc7SUFDMUIsSUFBSSxDQUFDQSxLQUNELE9BQU87SUFDWCxJQUFLLE1BQU1DLE1BQU1ELElBQ2IsT0FBTztJQUNYLE9BQU87QUFDWDtBQUNBLDZEQUE2RDtBQUN0RCxTQUFTRSxPQUFPRixHQUFHLEVBQUVHLEdBQUc7SUFDM0IsT0FBT0MsT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1AsS0FBS0c7QUFDckQ7QUFDTyxTQUFTSyxNQUFNUixHQUFHO0lBQ3JCLE9BQU9BLE9BQU8sUUFBUSxPQUFPQSxRQUFRLFlBQVksQ0FBQ0wsTUFBTUYsT0FBTyxDQUFDTztBQUNwRTtBQUNPLE1BQU1TLGdCQUFnQixDQUFDQztJQUMxQixJQUFJQSxTQUFTLE1BQU07UUFDZixNQUFNLElBQUl0Qix3REFBV0EsQ0FBQyxDQUFDLDBDQUEwQyxFQUFFc0IsTUFBTSxTQUFTLENBQUM7SUFDdkY7SUFDQSxPQUFPQTtBQUNYLEVBQUU7QUFDSyxNQUFNQywwQkFBMEIsQ0FBQ0MsTUFBTUM7SUFDMUMsSUFBSSxPQUFPQSxNQUFNLFlBQVksQ0FBQ0MsT0FBT0MsU0FBUyxDQUFDRixJQUFJO1FBQy9DLE1BQU0sSUFBSXpCLHdEQUFXQSxDQUFDLENBQUMsRUFBRXdCLEtBQUssbUJBQW1CLENBQUM7SUFDdEQ7SUFDQSxJQUFJQyxJQUFJLEdBQUc7UUFDUCxNQUFNLElBQUl6Qix3REFBV0EsQ0FBQyxDQUFDLEVBQUV3QixLQUFLLDJCQUEyQixDQUFDO0lBQzlEO0lBQ0EsT0FBT0M7QUFDWCxFQUFFO0FBQ0ssTUFBTUcsZ0JBQWdCLENBQUNOO0lBQzFCLElBQUksT0FBT0EsVUFBVSxVQUNqQixPQUFPTyxLQUFLQyxLQUFLLENBQUNSO0lBQ3RCLElBQUksT0FBT0EsVUFBVSxVQUNqQixPQUFPUyxTQUFTVCxPQUFPO0lBQzNCLE1BQU0sSUFBSXRCLHdEQUFXQSxDQUFDLENBQUMsaUJBQWlCLEVBQUVzQixNQUFNLFFBQVEsRUFBRSxPQUFPQSxNQUFNLGVBQWUsQ0FBQztBQUMzRixFQUFFO0FBQ0ssTUFBTVUsY0FBYyxDQUFDVjtJQUN4QixJQUFJLE9BQU9BLFVBQVUsVUFDakIsT0FBT0E7SUFDWCxJQUFJLE9BQU9BLFVBQVUsVUFDakIsT0FBT1csV0FBV1g7SUFDdEIsTUFBTSxJQUFJdEIsd0RBQVdBLENBQUMsQ0FBQyxpQkFBaUIsRUFBRXNCLE1BQU0sUUFBUSxFQUFFLE9BQU9BLE1BQU0sZUFBZSxDQUFDO0FBQzNGLEVBQUU7QUFDSyxNQUFNWSxnQkFBZ0IsQ0FBQ1o7SUFDMUIsSUFBSSxPQUFPQSxVQUFVLFdBQ2pCLE9BQU9BO0lBQ1gsSUFBSSxPQUFPQSxVQUFVLFVBQ2pCLE9BQU9BLFVBQVU7SUFDckIsT0FBT2EsUUFBUWI7QUFDbkIsRUFBRTtBQUNLLE1BQU1jLHFCQUFxQixDQUFDZDtJQUMvQixJQUFJQSxVQUFVZSxXQUFXO1FBQ3JCLE9BQU9BO0lBQ1g7SUFDQSxPQUFPVCxjQUFjTjtBQUN6QixFQUFFO0FBQ0ssTUFBTWdCLG1CQUFtQixDQUFDaEI7SUFDN0IsSUFBSUEsVUFBVWUsV0FBVztRQUNyQixPQUFPQTtJQUNYO0lBQ0EsT0FBT0wsWUFBWVY7QUFDdkIsRUFBRTtBQUNLLE1BQU1pQixxQkFBcUIsQ0FBQ2pCO0lBQy9CLElBQUlBLFVBQVVlLFdBQVc7UUFDckIsT0FBT0E7SUFDWDtJQUNBLE9BQU9ILGNBQWNaO0FBQ3pCLEVBQUU7QUFDSyxNQUFNa0IsV0FBVyxDQUFDQztJQUNyQixJQUFJO1FBQ0EsT0FBT0MsS0FBS0MsS0FBSyxDQUFDRjtJQUN0QixFQUNBLE9BQU9HLEtBQUs7UUFDUixPQUFPUDtJQUNYO0FBQ0osRUFBRSxDQUNGLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9pbnRlcm5hbC91dGlscy92YWx1ZXMubWpzPzExNmMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IE9wZW5BSUVycm9yIH0gZnJvbSBcIi4uLy4uL2NvcmUvZXJyb3IubWpzXCI7XG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybC1zY2hlbWUtc3RyaW5nXG5jb25zdCBzdGFydHNXaXRoU2NoZW1lUmVnZXhwID0gL15bYS16XVthLXowLTkrLi1dKjovaTtcbmV4cG9ydCBjb25zdCBpc0Fic29sdXRlVVJMID0gKHVybCkgPT4ge1xuICAgIHJldHVybiBzdGFydHNXaXRoU2NoZW1lUmVnZXhwLnRlc3QodXJsKTtcbn07XG5leHBvcnQgbGV0IGlzQXJyYXkgPSAodmFsKSA9PiAoKGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KSwgaXNBcnJheSh2YWwpKTtcbmV4cG9ydCBsZXQgaXNSZWFkb25seUFycmF5ID0gaXNBcnJheTtcbi8qKiBSZXR1cm5zIGFuIG9iamVjdCBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXNuJ3QgYW4gb2JqZWN0LCBvdGhlcndpc2UgcmV0dXJucyBhcy1pcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1heWJlT2JqKHgpIHtcbiAgICBpZiAodHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgcmV0dXJuIHggPz8ge307XG59XG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzQ0OTEyODdcbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5T2JqKG9iaikge1xuICAgIGlmICghb2JqKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBmb3IgKGNvbnN0IF9rIGluIG9iailcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xufVxuLy8gaHR0cHM6Ly9lc2xpbnQub3JnL2RvY3MvbGF0ZXN0L3J1bGVzL25vLXByb3RvdHlwZS1idWlsdGluc1xuZXhwb3J0IGZ1bmN0aW9uIGhhc093bihvYmosIGtleSkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqKG9iaikge1xuICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShvYmopO1xufVxuZXhwb3J0IGNvbnN0IGVuc3VyZVByZXNlbnQgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYEV4cGVjdGVkIGEgdmFsdWUgdG8gYmUgZ2l2ZW4gYnV0IHJlY2VpdmVkICR7dmFsdWV9IGluc3RlYWQuYCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn07XG5leHBvcnQgY29uc3QgdmFsaWRhdGVQb3NpdGl2ZUludGVnZXIgPSAobmFtZSwgbikgPT4ge1xuICAgIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgIU51bWJlci5pc0ludGVnZXIobikpIHtcbiAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGAke25hbWV9IG11c3QgYmUgYW4gaW50ZWdlcmApO1xuICAgIH1cbiAgICBpZiAobiA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGAke25hbWV9IG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyYCk7XG4gICAgfVxuICAgIHJldHVybiBuO1xufTtcbmV4cG9ydCBjb25zdCBjb2VyY2VJbnRlZ2VyID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBDb3VsZCBub3QgY29lcmNlICR7dmFsdWV9ICh0eXBlOiAke3R5cGVvZiB2YWx1ZX0pIGludG8gYSBudW1iZXJgKTtcbn07XG5leHBvcnQgY29uc3QgY29lcmNlRmxvYXQgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBDb3VsZCBub3QgY29lcmNlICR7dmFsdWV9ICh0eXBlOiAke3R5cGVvZiB2YWx1ZX0pIGludG8gYSBudW1iZXJgKTtcbn07XG5leHBvcnQgY29uc3QgY29lcmNlQm9vbGVhbiA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJylcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gdmFsdWUgPT09ICd0cnVlJztcbiAgICByZXR1cm4gQm9vbGVhbih2YWx1ZSk7XG59O1xuZXhwb3J0IGNvbnN0IG1heWJlQ29lcmNlSW50ZWdlciA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBjb2VyY2VJbnRlZ2VyKHZhbHVlKTtcbn07XG5leHBvcnQgY29uc3QgbWF5YmVDb2VyY2VGbG9hdCA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBjb2VyY2VGbG9hdCh2YWx1ZSk7XG59O1xuZXhwb3J0IGNvbnN0IG1heWJlQ29lcmNlQm9vbGVhbiA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBjb2VyY2VCb29sZWFuKHZhbHVlKTtcbn07XG5leHBvcnQgY29uc3Qgc2FmZUpTT04gPSAodGV4dCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHRleHQpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbHVlcy5tanMubWFwIl0sIm5hbWVzIjpbIk9wZW5BSUVycm9yIiwic3RhcnRzV2l0aFNjaGVtZVJlZ2V4cCIsImlzQWJzb2x1dGVVUkwiLCJ1cmwiLCJ0ZXN0IiwiaXNBcnJheSIsInZhbCIsIkFycmF5IiwiaXNSZWFkb25seUFycmF5IiwibWF5YmVPYmoiLCJ4IiwiaXNFbXB0eU9iaiIsIm9iaiIsIl9rIiwiaGFzT3duIiwia2V5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaXNPYmoiLCJlbnN1cmVQcmVzZW50IiwidmFsdWUiLCJ2YWxpZGF0ZVBvc2l0aXZlSW50ZWdlciIsIm5hbWUiLCJuIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiY29lcmNlSW50ZWdlciIsIk1hdGgiLCJyb3VuZCIsInBhcnNlSW50IiwiY29lcmNlRmxvYXQiLCJwYXJzZUZsb2F0IiwiY29lcmNlQm9vbGVhbiIsIkJvb2xlYW4iLCJtYXliZUNvZXJjZUludGVnZXIiLCJ1bmRlZmluZWQiLCJtYXliZUNvZXJjZUZsb2F0IiwibWF5YmVDb2VyY2VCb29sZWFuIiwic2FmZUpTT04iLCJ0ZXh0IiwiSlNPTiIsInBhcnNlIiwiZXJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/utils/values.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/lib/AbstractChatCompletionRunner.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractChatCompletionRunner: () => (/* binding */ AbstractChatCompletionRunner)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/./node_modules/openai/internal/tslib.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RunnableFunction.mjs */ \"(rsc)/./node_modules/openai/lib/RunnableFunction.mjs\");\n/* harmony import */ var _chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chatCompletionUtils.mjs */ \"(rsc)/./node_modules/openai/lib/chatCompletionUtils.mjs\");\n/* harmony import */ var _EventStream_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EventStream.mjs */ \"(rsc)/./node_modules/openai/lib/EventStream.mjs\");\n/* harmony import */ var _lib_parser_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lib/parser.mjs */ \"(rsc)/./node_modules/openai/lib/parser.mjs\");\nvar _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalMessage, _AbstractChatCompletionRunner_getFinalFunctionToolCall, _AbstractChatCompletionRunner_getFinalFunctionToolCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_validateParams, _AbstractChatCompletionRunner_stringifyFunctionCallResult;\n\n\n\n\n\n\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nclass AbstractChatCompletionRunner extends _EventStream_mjs__WEBPACK_IMPORTED_MODULE_4__.EventStream {\n    constructor(){\n        super(...arguments);\n        _AbstractChatCompletionRunner_instances.add(this);\n        this._chatCompletions = [];\n        this.messages = [];\n    }\n    _addChatCompletion(chatCompletion) {\n        this._chatCompletions.push(chatCompletion);\n        this._emit(\"chatCompletion\", chatCompletion);\n        const message = chatCompletion.choices[0]?.message;\n        if (message) this._addMessage(message);\n        return chatCompletion;\n    }\n    _addMessage(message, emit = true) {\n        if (!(\"content\" in message)) message.content = null;\n        this.messages.push(message);\n        if (emit) {\n            this._emit(\"message\", message);\n            if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_3__.isToolMessage)(message) && message.content) {\n                // Note, this assumes that {role: 'tool', content: …} is always the result of a call of tool of type=function.\n                this._emit(\"functionToolCallResult\", message.content);\n            } else if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_3__.isAssistantMessage)(message) && message.tool_calls) {\n                for (const tool_call of message.tool_calls){\n                    if (tool_call.type === \"function\") {\n                        this._emit(\"functionToolCall\", tool_call.function);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * @returns a promise that resolves with the final ChatCompletion, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n     */ async finalChatCompletion() {\n        await this.done();\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (!completion) throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"stream ended without producing a ChatCompletion\");\n        return completion;\n    }\n    /**\n     * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */ async finalContent() {\n        await this.done();\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n     * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */ async finalMessage() {\n        await this.done();\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */ async finalFunctionToolCall() {\n        await this.done();\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCall).call(this);\n    }\n    async finalFunctionToolCallResult() {\n        await this.done();\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCallResult).call(this);\n    }\n    async totalUsage() {\n        await this.done();\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);\n    }\n    allChatCompletions() {\n        return [\n            ...this._chatCompletions\n        ];\n    }\n    _emitFinal() {\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (completion) this._emit(\"finalChatCompletion\", completion);\n        const finalMessage = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n        if (finalMessage) this._emit(\"finalMessage\", finalMessage);\n        const finalContent = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n        if (finalContent) this._emit(\"finalContent\", finalContent);\n        const finalFunctionCall = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCall).call(this);\n        if (finalFunctionCall) this._emit(\"finalFunctionToolCall\", finalFunctionCall);\n        const finalFunctionCallResult = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCallResult).call(this);\n        if (finalFunctionCallResult != null) this._emit(\"finalFunctionToolCallResult\", finalFunctionCallResult);\n        if (this._chatCompletions.some((c)=>c.usage)) {\n            this._emit(\"totalUsage\", (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));\n        }\n    }\n    async _createChatCompletion(client, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_validateParams).call(this, params);\n        const chatCompletion = await client.chat.completions.create({\n            ...params,\n            stream: false\n        }, {\n            ...options,\n            signal: this.controller.signal\n        });\n        this._connected();\n        return this._addChatCompletion((0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_5__.parseChatCompletion)(chatCompletion, params));\n    }\n    async _runChatCompletion(client, params, options) {\n        for (const message of params.messages){\n            this._addMessage(message, false);\n        }\n        return await this._createChatCompletion(client, params, options);\n    }\n    async _runTools(client, params, options) {\n        const role = \"tool\";\n        const { tool_choice = \"auto\", stream, ...restParams } = params;\n        const singleFunctionToCall = typeof tool_choice !== \"string\" && tool_choice?.function?.name;\n        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n        // TODO(someday): clean this logic up\n        const inputTools = params.tools.map((tool)=>{\n            if ((0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_5__.isAutoParsableTool)(tool)) {\n                if (!tool.$callback) {\n                    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"Tool given to `.runTools()` that does not have an associated function\");\n                }\n                return {\n                    type: \"function\",\n                    function: {\n                        function: tool.$callback,\n                        name: tool.function.name,\n                        description: tool.function.description || \"\",\n                        parameters: tool.function.parameters,\n                        parse: tool.$parseRaw,\n                        strict: true\n                    }\n                };\n            }\n            return tool;\n        });\n        const functionsByName = {};\n        for (const f of inputTools){\n            if (f.type === \"function\") {\n                functionsByName[f.function.name || f.function.function.name] = f.function;\n            }\n        }\n        const tools = \"tools\" in params ? inputTools.map((t)=>t.type === \"function\" ? {\n                type: \"function\",\n                function: {\n                    name: t.function.name || t.function.function.name,\n                    parameters: t.function.parameters,\n                    description: t.function.description,\n                    strict: t.function.strict\n                }\n            } : t) : undefined;\n        for (const message of params.messages){\n            this._addMessage(message, false);\n        }\n        for(let i = 0; i < maxChatCompletions; ++i){\n            const chatCompletion = await this._createChatCompletion(client, {\n                ...restParams,\n                tool_choice,\n                tools,\n                messages: [\n                    ...this.messages\n                ]\n            }, options);\n            const message = chatCompletion.choices[0]?.message;\n            if (!message) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing message in ChatCompletion response`);\n            }\n            if (!message.tool_calls?.length) {\n                return;\n            }\n            for (const tool_call of message.tool_calls){\n                if (tool_call.type !== \"function\") continue;\n                const tool_call_id = tool_call.id;\n                const { name, arguments: args } = tool_call.function;\n                const fn = functionsByName[name];\n                if (!fn) {\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${Object.keys(functionsByName).map((name)=>JSON.stringify(name)).join(\", \")}. Please try again`;\n                    this._addMessage({\n                        role,\n                        tool_call_id,\n                        content\n                    });\n                    continue;\n                } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\n                    this._addMessage({\n                        role,\n                        tool_call_id,\n                        content\n                    });\n                    continue;\n                }\n                let parsed;\n                try {\n                    parsed = (0,_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_2__.isRunnableFunctionWithParse)(fn) ? await fn.parse(args) : args;\n                } catch (error) {\n                    const content = error instanceof Error ? error.message : String(error);\n                    this._addMessage({\n                        role,\n                        tool_call_id,\n                        content\n                    });\n                    continue;\n                }\n                // @ts-expect-error it can't rule out `never` type.\n                const rawContent = await fn.function(parsed, this);\n                const content = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n                this._addMessage({\n                    role,\n                    tool_call_id,\n                    content\n                });\n                if (singleFunctionToCall) {\n                    return;\n                }\n            }\n        }\n        return;\n    }\n}\n_AbstractChatCompletionRunner_instances = new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent() {\n    return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this).content ?? null;\n}, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage() {\n    let i = this.messages.length;\n    while(i-- > 0){\n        const message = this.messages[i];\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_3__.isAssistantMessage)(message)) {\n            // TODO: support audio here\n            const ret = {\n                ...message,\n                content: message.content ?? null,\n                refusal: message.refusal ?? null\n            };\n            return ret;\n        }\n    }\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"stream ended without producing a ChatCompletionMessage with role=assistant\");\n}, _AbstractChatCompletionRunner_getFinalFunctionToolCall = function _AbstractChatCompletionRunner_getFinalFunctionToolCall() {\n    for(let i = this.messages.length - 1; i >= 0; i--){\n        const message = this.messages[i];\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_3__.isAssistantMessage)(message) && message?.tool_calls?.length) {\n            return message.tool_calls.at(-1)?.function;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_getFinalFunctionToolCallResult = function _AbstractChatCompletionRunner_getFinalFunctionToolCallResult() {\n    for(let i = this.messages.length - 1; i >= 0; i--){\n        const message = this.messages[i];\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_3__.isToolMessage)(message) && message.content != null && typeof message.content === \"string\" && this.messages.some((x)=>x.role === \"assistant\" && x.tool_calls?.some((y)=>y.type === \"function\" && y.id === message.tool_call_id))) {\n            return message.content;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage() {\n    const total = {\n        completion_tokens: 0,\n        prompt_tokens: 0,\n        total_tokens: 0\n    };\n    for (const { usage } of this._chatCompletions){\n        if (usage) {\n            total.completion_tokens += usage.completion_tokens;\n            total.prompt_tokens += usage.prompt_tokens;\n            total.total_tokens += usage.total_tokens;\n        }\n    }\n    return total;\n}, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams(params) {\n    if (params.n != null && params.n > 1) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.\");\n    }\n}, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult(rawContent) {\n    return typeof rawContent === \"string\" ? rawContent : rawContent === undefined ? \"undefined\" : JSON.stringify(rawContent);\n}; //# sourceMappingURL=AbstractChatCompletionRunner.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/AssistantStream.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/lib/AssistantStream.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssistantStream: () => (/* binding */ AssistantStream)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/./node_modules/openai/internal/tslib.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../streaming.mjs */ \"(rsc)/./node_modules/openai/streaming.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _EventStream_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EventStream.mjs */ \"(rsc)/./node_modules/openai/lib/EventStream.mjs\");\n/* harmony import */ var _internal_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../internal/utils.mjs */ \"(rsc)/./node_modules/openai/internal/utils.mjs\");\nvar _AssistantStream_instances, _a, _AssistantStream_events, _AssistantStream_runStepSnapshots, _AssistantStream_messageSnapshots, _AssistantStream_messageSnapshot, _AssistantStream_finalRun, _AssistantStream_currentContentIndex, _AssistantStream_currentContent, _AssistantStream_currentToolCallIndex, _AssistantStream_currentToolCall, _AssistantStream_currentEvent, _AssistantStream_currentRunSnapshot, _AssistantStream_currentRunStepSnapshot, _AssistantStream_addEvent, _AssistantStream_endRequest, _AssistantStream_handleMessage, _AssistantStream_handleRunStep, _AssistantStream_handleEvent, _AssistantStream_accumulateRunStep, _AssistantStream_accumulateMessage, _AssistantStream_accumulateContent, _AssistantStream_handleRun;\n\n\n\n\n\nclass AssistantStream extends _EventStream_mjs__WEBPACK_IMPORTED_MODULE_3__.EventStream {\n    constructor(){\n        super(...arguments);\n        _AssistantStream_instances.add(this);\n        //Track all events in a single list for reference\n        _AssistantStream_events.set(this, []);\n        //Used to accumulate deltas\n        //We are accumulating many types so the value here is not strict\n        _AssistantStream_runStepSnapshots.set(this, {});\n        _AssistantStream_messageSnapshots.set(this, {});\n        _AssistantStream_messageSnapshot.set(this, void 0);\n        _AssistantStream_finalRun.set(this, void 0);\n        _AssistantStream_currentContentIndex.set(this, void 0);\n        _AssistantStream_currentContent.set(this, void 0);\n        _AssistantStream_currentToolCallIndex.set(this, void 0);\n        _AssistantStream_currentToolCall.set(this, void 0);\n        //For current snapshot methods\n        _AssistantStream_currentEvent.set(this, void 0);\n        _AssistantStream_currentRunSnapshot.set(this, void 0);\n        _AssistantStream_currentRunStepSnapshot.set(this, void 0);\n    }\n    [(_AssistantStream_events = new WeakMap(), _AssistantStream_runStepSnapshots = new WeakMap(), _AssistantStream_messageSnapshots = new WeakMap(), _AssistantStream_messageSnapshot = new WeakMap(), _AssistantStream_finalRun = new WeakMap(), _AssistantStream_currentContentIndex = new WeakMap(), _AssistantStream_currentContent = new WeakMap(), _AssistantStream_currentToolCallIndex = new WeakMap(), _AssistantStream_currentToolCall = new WeakMap(), _AssistantStream_currentEvent = new WeakMap(), _AssistantStream_currentRunSnapshot = new WeakMap(), _AssistantStream_currentRunStepSnapshot = new WeakMap(), _AssistantStream_instances = new WeakSet(), Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        //Catch all for passing along all events\n        this.on(\"event\", (event)=>{\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(event);\n            } else {\n                pushQueue.push(event);\n            }\n        });\n        this.on(\"end\", ()=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on(\"abort\", (err)=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on(\"error\", (err)=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async ()=>{\n                if (!pushQueue.length) {\n                    if (done) {\n                        return {\n                            value: undefined,\n                            done: true\n                        };\n                    }\n                    return new Promise((resolve, reject)=>readQueue.push({\n                            resolve,\n                            reject\n                        })).then((chunk)=>chunk ? {\n                            value: chunk,\n                            done: false\n                        } : {\n                            value: undefined,\n                            done: true\n                        });\n                }\n                const chunk = pushQueue.shift();\n                return {\n                    value: chunk,\n                    done: false\n                };\n            },\n            return: async ()=>{\n                this.abort();\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n        };\n    }\n    static fromReadableStream(stream) {\n        const runner = new _a();\n        runner._run(()=>runner._fromReadableStream(stream));\n        return runner;\n    }\n    async _fromReadableStream(readableStream, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        this._connected();\n        const stream = _streaming_mjs__WEBPACK_IMPORTED_MODULE_1__.Stream.fromReadableStream(readableStream, this.controller);\n        for await (const event of stream){\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n        }\n        return this._addRun((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    toReadableStream() {\n        const stream = new _streaming_mjs__WEBPACK_IMPORTED_MODULE_1__.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n    static createToolAssistantStream(runId, runs, params, options) {\n        const runner = new _a();\n        runner._run(()=>runner._runToolAssistantStream(runId, runs, params, {\n                ...options,\n                headers: {\n                    ...options?.headers,\n                    \"X-Stainless-Helper-Method\": \"stream\"\n                }\n            }));\n        return runner;\n    }\n    async _createToolAssistantStream(run, runId, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        const body = {\n            ...params,\n            stream: true\n        };\n        const stream = await run.submitToolOutputs(runId, body, {\n            ...options,\n            signal: this.controller.signal\n        });\n        this._connected();\n        for await (const event of stream){\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n        }\n        return this._addRun((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    static createThreadAssistantStream(params, thread, options) {\n        const runner = new _a();\n        runner._run(()=>runner._threadAssistantStream(params, thread, {\n                ...options,\n                headers: {\n                    ...options?.headers,\n                    \"X-Stainless-Helper-Method\": \"stream\"\n                }\n            }));\n        return runner;\n    }\n    static createAssistantStream(threadId, runs, params, options) {\n        const runner = new _a();\n        runner._run(()=>runner._runAssistantStream(threadId, runs, params, {\n                ...options,\n                headers: {\n                    ...options?.headers,\n                    \"X-Stainless-Helper-Method\": \"stream\"\n                }\n            }));\n        return runner;\n    }\n    currentEvent() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentEvent, \"f\");\n    }\n    currentRun() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentRunSnapshot, \"f\");\n    }\n    currentMessageSnapshot() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_messageSnapshot, \"f\");\n    }\n    currentRunStepSnapshot() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentRunStepSnapshot, \"f\");\n    }\n    async finalRunSteps() {\n        await this.done();\n        return Object.values((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_runStepSnapshots, \"f\"));\n    }\n    async finalMessages() {\n        await this.done();\n        return Object.values((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_messageSnapshots, \"f\"));\n    }\n    async finalRun() {\n        await this.done();\n        if (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_finalRun, \"f\")) throw Error(\"Final run was not received.\");\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_finalRun, \"f\");\n    }\n    async _createThreadAssistantStream(thread, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        const body = {\n            ...params,\n            stream: true\n        };\n        const stream = await thread.createAndRun(body, {\n            ...options,\n            signal: this.controller.signal\n        });\n        this._connected();\n        for await (const event of stream){\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n        }\n        return this._addRun((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    async _createAssistantStream(run, threadId, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        const body = {\n            ...params,\n            stream: true\n        };\n        const stream = await run.create(threadId, body, {\n            ...options,\n            signal: this.controller.signal\n        });\n        this._connected();\n        for await (const event of stream){\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n        }\n        return this._addRun((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    static accumulateDelta(acc, delta) {\n        for (const [key, deltaValue] of Object.entries(delta)){\n            if (!acc.hasOwnProperty(key)) {\n                acc[key] = deltaValue;\n                continue;\n            }\n            let accValue = acc[key];\n            if (accValue === null || accValue === undefined) {\n                acc[key] = deltaValue;\n                continue;\n            }\n            // We don't accumulate these special properties\n            if (key === \"index\" || key === \"type\") {\n                acc[key] = deltaValue;\n                continue;\n            }\n            // Type-specific accumulation logic\n            if (typeof accValue === \"string\" && typeof deltaValue === \"string\") {\n                accValue += deltaValue;\n            } else if (typeof accValue === \"number\" && typeof deltaValue === \"number\") {\n                accValue += deltaValue;\n            } else if ((0,_internal_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.isObj)(accValue) && (0,_internal_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.isObj)(deltaValue)) {\n                accValue = this.accumulateDelta(accValue, deltaValue);\n            } else if (Array.isArray(accValue) && Array.isArray(deltaValue)) {\n                if (accValue.every((x)=>typeof x === \"string\" || typeof x === \"number\")) {\n                    accValue.push(...deltaValue); // Use spread syntax for efficient addition\n                    continue;\n                }\n                for (const deltaEntry of deltaValue){\n                    if (!(0,_internal_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.isObj)(deltaEntry)) {\n                        throw new Error(`Expected array delta entry to be an object but got: ${deltaEntry}`);\n                    }\n                    const index = deltaEntry[\"index\"];\n                    if (index == null) {\n                        console.error(deltaEntry);\n                        throw new Error(\"Expected array delta entry to have an `index` property\");\n                    }\n                    if (typeof index !== \"number\") {\n                        throw new Error(`Expected array delta entry \\`index\\` property to be a number but got ${index}`);\n                    }\n                    const accEntry = accValue[index];\n                    if (accEntry == null) {\n                        accValue.push(deltaEntry);\n                    } else {\n                        accValue[index] = this.accumulateDelta(accEntry, deltaEntry);\n                    }\n                }\n                continue;\n            } else {\n                throw Error(`Unhandled record type: ${key}, deltaValue: ${deltaValue}, accValue: ${accValue}`);\n            }\n            acc[key] = accValue;\n        }\n        return acc;\n    }\n    _addRun(run) {\n        return run;\n    }\n    async _threadAssistantStream(params, thread, options) {\n        return await this._createThreadAssistantStream(thread, params, options);\n    }\n    async _runAssistantStream(threadId, runs, params, options) {\n        return await this._createAssistantStream(runs, threadId, params, options);\n    }\n    async _runToolAssistantStream(runId, runs, params, options) {\n        return await this._createToolAssistantStream(runs, runId, params, options);\n    }\n}\n_a = AssistantStream, _AssistantStream_addEvent = function _AssistantStream_addEvent(event) {\n    if (this.ended) return;\n    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AssistantStream_currentEvent, event, \"f\");\n    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_instances, \"m\", _AssistantStream_handleEvent).call(this, event);\n    switch(event.event){\n        case \"thread.created\":\n            break;\n        case \"thread.run.created\":\n        case \"thread.run.queued\":\n        case \"thread.run.in_progress\":\n        case \"thread.run.requires_action\":\n        case \"thread.run.completed\":\n        case \"thread.run.incomplete\":\n        case \"thread.run.failed\":\n        case \"thread.run.cancelling\":\n        case \"thread.run.cancelled\":\n        case \"thread.run.expired\":\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRun).call(this, event);\n            break;\n        case \"thread.run.step.created\":\n        case \"thread.run.step.in_progress\":\n        case \"thread.run.step.delta\":\n        case \"thread.run.step.completed\":\n        case \"thread.run.step.failed\":\n        case \"thread.run.step.cancelled\":\n        case \"thread.run.step.expired\":\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRunStep).call(this, event);\n            break;\n        case \"thread.message.created\":\n        case \"thread.message.in_progress\":\n        case \"thread.message.delta\":\n        case \"thread.message.completed\":\n        case \"thread.message.incomplete\":\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_instances, \"m\", _AssistantStream_handleMessage).call(this, event);\n            break;\n        case \"error\":\n            //This is included for completeness, but errors are processed in the SSE event processing so this should not occur\n            throw new Error(\"Encountered an error event in event processing - errors should be processed earlier\");\n        default:\n            assertNever(event);\n    }\n}, _AssistantStream_endRequest = function _AssistantStream_endRequest() {\n    if (this.ended) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n    if (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_finalRun, \"f\")) throw Error(\"Final run has not been received\");\n    return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_finalRun, \"f\");\n}, _AssistantStream_handleMessage = function _AssistantStream_handleMessage(event) {\n    const [accumulatedMessage, newContent] = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateMessage).call(this, event, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_messageSnapshot, \"f\"));\n    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AssistantStream_messageSnapshot, accumulatedMessage, \"f\");\n    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_messageSnapshots, \"f\")[accumulatedMessage.id] = accumulatedMessage;\n    for (const content of newContent){\n        const snapshotContent = accumulatedMessage.content[content.index];\n        if (snapshotContent?.type == \"text\") {\n            this._emit(\"textCreated\", snapshotContent.text);\n        }\n    }\n    switch(event.event){\n        case \"thread.message.created\":\n            this._emit(\"messageCreated\", event.data);\n            break;\n        case \"thread.message.in_progress\":\n            break;\n        case \"thread.message.delta\":\n            this._emit(\"messageDelta\", event.data.delta, accumulatedMessage);\n            if (event.data.delta.content) {\n                for (const content of event.data.delta.content){\n                    //If it is text delta, emit a text delta event\n                    if (content.type == \"text\" && content.text) {\n                        let textDelta = content.text;\n                        let snapshot = accumulatedMessage.content[content.index];\n                        if (snapshot && snapshot.type == \"text\") {\n                            this._emit(\"textDelta\", textDelta, snapshot.text);\n                        } else {\n                            throw Error(\"The snapshot associated with this text delta is not text or missing\");\n                        }\n                    }\n                    if (content.index != (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentContentIndex, \"f\")) {\n                        //See if we have in progress content\n                        if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentContent, \"f\")) {\n                            switch((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentContent, \"f\").type){\n                                case \"text\":\n                                    this._emit(\"textDone\", (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentContent, \"f\").text, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_messageSnapshot, \"f\"));\n                                    break;\n                                case \"image_file\":\n                                    this._emit(\"imageFileDone\", (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentContent, \"f\").image_file, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_messageSnapshot, \"f\"));\n                                    break;\n                            }\n                        }\n                        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AssistantStream_currentContentIndex, content.index, \"f\");\n                    }\n                    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AssistantStream_currentContent, accumulatedMessage.content[content.index], \"f\");\n                }\n            }\n            break;\n        case \"thread.message.completed\":\n        case \"thread.message.incomplete\":\n            //We emit the latest content we were working on on completion (including incomplete)\n            if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentContentIndex, \"f\") !== undefined) {\n                const currentContent = event.data.content[(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentContentIndex, \"f\")];\n                if (currentContent) {\n                    switch(currentContent.type){\n                        case \"image_file\":\n                            this._emit(\"imageFileDone\", currentContent.image_file, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_messageSnapshot, \"f\"));\n                            break;\n                        case \"text\":\n                            this._emit(\"textDone\", currentContent.text, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_messageSnapshot, \"f\"));\n                            break;\n                    }\n                }\n            }\n            if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_messageSnapshot, \"f\")) {\n                this._emit(\"messageDone\", event.data);\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AssistantStream_messageSnapshot, undefined, \"f\");\n    }\n}, _AssistantStream_handleRunStep = function _AssistantStream_handleRunStep(event) {\n    const accumulatedRunStep = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateRunStep).call(this, event);\n    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AssistantStream_currentRunStepSnapshot, accumulatedRunStep, \"f\");\n    switch(event.event){\n        case \"thread.run.step.created\":\n            this._emit(\"runStepCreated\", event.data);\n            break;\n        case \"thread.run.step.delta\":\n            const delta = event.data.delta;\n            if (delta.step_details && delta.step_details.type == \"tool_calls\" && delta.step_details.tool_calls && accumulatedRunStep.step_details.type == \"tool_calls\") {\n                for (const toolCall of delta.step_details.tool_calls){\n                    if (toolCall.index == (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentToolCallIndex, \"f\")) {\n                        this._emit(\"toolCallDelta\", toolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index]);\n                    } else {\n                        if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentToolCall, \"f\")) {\n                            this._emit(\"toolCallDone\", (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentToolCall, \"f\"));\n                        }\n                        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AssistantStream_currentToolCallIndex, toolCall.index, \"f\");\n                        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AssistantStream_currentToolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index], \"f\");\n                        if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentToolCall, \"f\")) this._emit(\"toolCallCreated\", (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentToolCall, \"f\"));\n                    }\n                }\n            }\n            this._emit(\"runStepDelta\", event.data.delta, accumulatedRunStep);\n            break;\n        case \"thread.run.step.completed\":\n        case \"thread.run.step.failed\":\n        case \"thread.run.step.cancelled\":\n        case \"thread.run.step.expired\":\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AssistantStream_currentRunStepSnapshot, undefined, \"f\");\n            const details = event.data.step_details;\n            if (details.type == \"tool_calls\") {\n                if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentToolCall, \"f\")) {\n                    this._emit(\"toolCallDone\", (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentToolCall, \"f\"));\n                    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AssistantStream_currentToolCall, undefined, \"f\");\n                }\n            }\n            this._emit(\"runStepDone\", event.data, accumulatedRunStep);\n            break;\n        case \"thread.run.step.in_progress\":\n            break;\n    }\n}, _AssistantStream_handleEvent = function _AssistantStream_handleEvent(event) {\n    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_events, \"f\").push(event);\n    this._emit(\"event\", event);\n}, _AssistantStream_accumulateRunStep = function _AssistantStream_accumulateRunStep(event) {\n    switch(event.event){\n        case \"thread.run.step.created\":\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n            return event.data;\n        case \"thread.run.step.delta\":\n            let snapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n            if (!snapshot) {\n                throw Error(\"Received a RunStepDelta before creation of a snapshot\");\n            }\n            let data = event.data;\n            if (data.delta) {\n                const accumulated = _a.accumulateDelta(snapshot, data.delta);\n                (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = accumulated;\n            }\n            return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n        case \"thread.run.step.completed\":\n        case \"thread.run.step.failed\":\n        case \"thread.run.step.cancelled\":\n        case \"thread.run.step.expired\":\n        case \"thread.run.step.in_progress\":\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n            break;\n    }\n    if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id]) return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n    throw new Error(\"No snapshot available\");\n}, _AssistantStream_accumulateMessage = function _AssistantStream_accumulateMessage(event, snapshot) {\n    let newContent = [];\n    switch(event.event){\n        case \"thread.message.created\":\n            //On creation the snapshot is just the initial message\n            return [\n                event.data,\n                newContent\n            ];\n        case \"thread.message.delta\":\n            if (!snapshot) {\n                throw Error(\"Received a delta with no existing snapshot (there should be one from message creation)\");\n            }\n            let data = event.data;\n            //If this delta does not have content, nothing to process\n            if (data.delta.content) {\n                for (const contentElement of data.delta.content){\n                    if (contentElement.index in snapshot.content) {\n                        let currentContent = snapshot.content[contentElement.index];\n                        snapshot.content[contentElement.index] = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateContent).call(this, contentElement, currentContent);\n                    } else {\n                        snapshot.content[contentElement.index] = contentElement;\n                        // This is a new element\n                        newContent.push(contentElement);\n                    }\n                }\n            }\n            return [\n                snapshot,\n                newContent\n            ];\n        case \"thread.message.in_progress\":\n        case \"thread.message.completed\":\n        case \"thread.message.incomplete\":\n            //No changes on other thread events\n            if (snapshot) {\n                return [\n                    snapshot,\n                    newContent\n                ];\n            } else {\n                throw Error(\"Received thread message event with no existing snapshot\");\n            }\n    }\n    throw Error(\"Tried to accumulate a non-message event\");\n}, _AssistantStream_accumulateContent = function _AssistantStream_accumulateContent(contentElement, currentContent) {\n    return _a.accumulateDelta(currentContent, contentElement);\n}, _AssistantStream_handleRun = function _AssistantStream_handleRun(event) {\n    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AssistantStream_currentRunSnapshot, event.data, \"f\");\n    switch(event.event){\n        case \"thread.run.created\":\n            break;\n        case \"thread.run.queued\":\n            break;\n        case \"thread.run.in_progress\":\n            break;\n        case \"thread.run.requires_action\":\n        case \"thread.run.cancelled\":\n        case \"thread.run.failed\":\n        case \"thread.run.completed\":\n        case \"thread.run.expired\":\n        case \"thread.run.incomplete\":\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AssistantStream_finalRun, event.data, \"f\");\n            if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentToolCall, \"f\")) {\n                this._emit(\"toolCallDone\", (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AssistantStream_currentToolCall, \"f\"));\n                (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AssistantStream_currentToolCall, undefined, \"f\");\n            }\n            break;\n        case \"thread.run.cancelling\":\n            break;\n    }\n};\nfunction assertNever(_x) {} //# sourceMappingURL=AssistantStream.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/AssistantStream.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/ChatCompletionRunner.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionRunner.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionRunner: () => (/* binding */ ChatCompletionRunner)\n/* harmony export */ });\n/* harmony import */ var _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractChatCompletionRunner.mjs */ \"(rsc)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\");\n/* harmony import */ var _chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chatCompletionUtils.mjs */ \"(rsc)/./node_modules/openai/lib/chatCompletionUtils.mjs\");\n\n\nclass ChatCompletionRunner extends _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractChatCompletionRunner {\n    static runTools(client, params, options) {\n        const runner = new ChatCompletionRunner();\n        const opts = {\n            ...options,\n            headers: {\n                ...options?.headers,\n                \"X-Stainless-Helper-Method\": \"runTools\"\n            }\n        };\n        runner._run(()=>runner._runTools(client, params, opts));\n        return runner;\n    }\n    _addMessage(message, emit = true) {\n        super._addMessage(message, emit);\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.content) {\n            this._emit(\"content\", message.content);\n        }\n    }\n} //# sourceMappingURL=ChatCompletionRunner.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblJ1bm5lci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1GO0FBQ3BCO0FBQ3hELE1BQU1FLDZCQUE2QkYsMkZBQTRCQTtJQUNsRSxPQUFPRyxTQUFTQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQ3JDLE1BQU1DLFNBQVMsSUFBSUw7UUFDbkIsTUFBTU0sT0FBTztZQUNULEdBQUdGLE9BQU87WUFDVkcsU0FBUztnQkFBRSxHQUFHSCxTQUFTRyxPQUFPO2dCQUFFLDZCQUE2QjtZQUFXO1FBQzVFO1FBQ0FGLE9BQU9HLElBQUksQ0FBQyxJQUFNSCxPQUFPSSxTQUFTLENBQUNQLFFBQVFDLFFBQVFHO1FBQ25ELE9BQU9EO0lBQ1g7SUFDQUssWUFBWUMsT0FBTyxFQUFFQyxPQUFPLElBQUksRUFBRTtRQUM5QixLQUFLLENBQUNGLFlBQVlDLFNBQVNDO1FBQzNCLElBQUliLDRFQUFrQkEsQ0FBQ1ksWUFBWUEsUUFBUUUsT0FBTyxFQUFFO1lBQ2hELElBQUksQ0FBQ0MsS0FBSyxDQUFDLFdBQVdILFFBQVFFLE9BQU87UUFDekM7SUFDSjtBQUNKLEVBQ0EsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblJ1bm5lci5tanM/MWUwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyLCB9IGZyb20gXCIuL0Fic3RyYWN0Q2hhdENvbXBsZXRpb25SdW5uZXIubWpzXCI7XG5pbXBvcnQgeyBpc0Fzc2lzdGFudE1lc3NhZ2UgfSBmcm9tIFwiLi9jaGF0Q29tcGxldGlvblV0aWxzLm1qc1wiO1xuZXhwb3J0IGNsYXNzIENoYXRDb21wbGV0aW9uUnVubmVyIGV4dGVuZHMgQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lciB7XG4gICAgc3RhdGljIHJ1blRvb2xzKGNsaWVudCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJ1bm5lciA9IG5ldyBDaGF0Q29tcGxldGlvblJ1bm5lcigpO1xuICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgJ1gtU3RhaW5sZXNzLUhlbHBlci1NZXRob2QnOiAncnVuVG9vbHMnIH0sXG4gICAgICAgIH07XG4gICAgICAgIHJ1bm5lci5fcnVuKCgpID0+IHJ1bm5lci5fcnVuVG9vbHMoY2xpZW50LCBwYXJhbXMsIG9wdHMpKTtcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICB9XG4gICAgX2FkZE1lc3NhZ2UobWVzc2FnZSwgZW1pdCA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIuX2FkZE1lc3NhZ2UobWVzc2FnZSwgZW1pdCk7XG4gICAgICAgIGlmIChpc0Fzc2lzdGFudE1lc3NhZ2UobWVzc2FnZSkgJiYgbWVzc2FnZS5jb250ZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0KCdjb250ZW50JywgbWVzc2FnZS5jb250ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNoYXRDb21wbGV0aW9uUnVubmVyLm1qcy5tYXAiXSwibmFtZXMiOlsiQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lciIsImlzQXNzaXN0YW50TWVzc2FnZSIsIkNoYXRDb21wbGV0aW9uUnVubmVyIiwicnVuVG9vbHMiLCJjbGllbnQiLCJwYXJhbXMiLCJvcHRpb25zIiwicnVubmVyIiwib3B0cyIsImhlYWRlcnMiLCJfcnVuIiwiX3J1blRvb2xzIiwiX2FkZE1lc3NhZ2UiLCJtZXNzYWdlIiwiZW1pdCIsImNvbnRlbnQiLCJfZW1pdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/ChatCompletionRunner.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/ChatCompletionStream.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionStream.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionStream: () => (/* binding */ ChatCompletionStream)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/./node_modules/openai/internal/tslib.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbstractChatCompletionRunner.mjs */ \"(rsc)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../streaming.mjs */ \"(rsc)/./node_modules/openai/streaming.mjs\");\n/* harmony import */ var _lib_parser_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/parser.mjs */ \"(rsc)/./node_modules/openai/lib/parser.mjs\");\n/* harmony import */ var _vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../_vendor/partial-json-parser/parser.mjs */ \"(rsc)/./node_modules/openai/_vendor/partial-json-parser/parser.mjs\");\nvar _ChatCompletionStream_instances, _ChatCompletionStream_params, _ChatCompletionStream_choiceEventStates, _ChatCompletionStream_currentChatCompletionSnapshot, _ChatCompletionStream_beginRequest, _ChatCompletionStream_getChoiceEventState, _ChatCompletionStream_addChunk, _ChatCompletionStream_emitToolCallDoneEvent, _ChatCompletionStream_emitContentDoneEvents, _ChatCompletionStream_endRequest, _ChatCompletionStream_getAutoParseableResponseFormat, _ChatCompletionStream_accumulateChatCompletion;\n\n\n\n\n\n\nclass ChatCompletionStream extends _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_2__.AbstractChatCompletionRunner {\n    constructor(params){\n        super();\n        _ChatCompletionStream_instances.add(this);\n        _ChatCompletionStream_params.set(this, void 0);\n        _ChatCompletionStream_choiceEventStates.set(this, void 0);\n        _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _ChatCompletionStream_params, params, \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\n    }\n    get currentChatCompletionSnapshot() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n    }\n    /**\n     * Intended for use on the frontend, consuming a stream produced with\n     * `.toReadableStream()` on the backend.\n     *\n     * Note that messages sent to the model do not appear in `.on('message')`\n     * in this context.\n     */ static fromReadableStream(stream) {\n        const runner = new ChatCompletionStream(null);\n        runner._run(()=>runner._fromReadableStream(stream));\n        return runner;\n    }\n    static createChatCompletion(client, params, options) {\n        const runner = new ChatCompletionStream(params);\n        runner._run(()=>runner._runChatCompletion(client, {\n                ...params,\n                stream: true\n            }, {\n                ...options,\n                headers: {\n                    ...options?.headers,\n                    \"X-Stainless-Helper-Method\": \"stream\"\n                }\n            }));\n        return runner;\n    }\n    async _createChatCompletion(client, params, options) {\n        super._createChatCompletion;\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        const stream = await client.chat.completions.create({\n            ...params,\n            stream: true\n        }, {\n            ...options,\n            signal: this.controller.signal\n        });\n        this._connected();\n        for await (const chunk of stream){\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError();\n        }\n        return this._addChatCompletion((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    async _fromReadableStream(readableStream, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        this._connected();\n        const stream = _streaming_mjs__WEBPACK_IMPORTED_MODULE_3__.Stream.fromReadableStream(readableStream, this.controller);\n        let chatId;\n        for await (const chunk of stream){\n            if (chatId && chatId !== chunk.id) {\n                // A new request has been made.\n                this._addChatCompletion((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n            chatId = chunk.id;\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError();\n        }\n        return this._addChatCompletion((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    [(_ChatCompletionStream_params = new WeakMap(), _ChatCompletionStream_choiceEventStates = new WeakMap(), _ChatCompletionStream_currentChatCompletionSnapshot = new WeakMap(), _ChatCompletionStream_instances = new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest() {\n        if (this.ended) return;\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n    }, _ChatCompletionStream_getChoiceEventState = function _ChatCompletionStream_getChoiceEventState(choice) {\n        let state = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index];\n        if (state) {\n            return state;\n        }\n        state = {\n            content_done: false,\n            refusal_done: false,\n            logprobs_content_done: false,\n            logprobs_refusal_done: false,\n            done_tool_calls: new Set(),\n            current_tool_call_index: null\n        };\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index] = state;\n        return state;\n    }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk(chunk) {\n        if (this.ended) return;\n        const completion = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);\n        this._emit(\"chunk\", chunk, completion);\n        for (const choice of chunk.choices){\n            const choiceSnapshot = completion.choices[choice.index];\n            if (choice.delta.content != null && choiceSnapshot.message?.role === \"assistant\" && choiceSnapshot.message?.content) {\n                this._emit(\"content\", choice.delta.content, choiceSnapshot.message.content);\n                this._emit(\"content.delta\", {\n                    delta: choice.delta.content,\n                    snapshot: choiceSnapshot.message.content,\n                    parsed: choiceSnapshot.message.parsed\n                });\n            }\n            if (choice.delta.refusal != null && choiceSnapshot.message?.role === \"assistant\" && choiceSnapshot.message?.refusal) {\n                this._emit(\"refusal.delta\", {\n                    delta: choice.delta.refusal,\n                    snapshot: choiceSnapshot.message.refusal\n                });\n            }\n            if (choice.logprobs?.content != null && choiceSnapshot.message?.role === \"assistant\") {\n                this._emit(\"logprobs.content.delta\", {\n                    content: choice.logprobs?.content,\n                    snapshot: choiceSnapshot.logprobs?.content ?? []\n                });\n            }\n            if (choice.logprobs?.refusal != null && choiceSnapshot.message?.role === \"assistant\") {\n                this._emit(\"logprobs.refusal.delta\", {\n                    refusal: choice.logprobs?.refusal,\n                    snapshot: choiceSnapshot.logprobs?.refusal ?? []\n                });\n            }\n            const state = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n            if (choiceSnapshot.finish_reason) {\n                (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\n                if (state.current_tool_call_index != null) {\n                    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\n                }\n            }\n            for (const toolCall of choice.delta.tool_calls ?? []){\n                if (state.current_tool_call_index !== toolCall.index) {\n                    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\n                    // new tool call started, the previous one is done\n                    if (state.current_tool_call_index != null) {\n                        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\n                    }\n                }\n                state.current_tool_call_index = toolCall.index;\n            }\n            for (const toolCallDelta of choice.delta.tool_calls ?? []){\n                const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallDelta.index];\n                if (!toolCallSnapshot?.type) {\n                    continue;\n                }\n                if (toolCallSnapshot?.type === \"function\") {\n                    this._emit(\"tool_calls.function.arguments.delta\", {\n                        name: toolCallSnapshot.function?.name,\n                        index: toolCallDelta.index,\n                        arguments: toolCallSnapshot.function.arguments,\n                        parsed_arguments: toolCallSnapshot.function.parsed_arguments,\n                        arguments_delta: toolCallDelta.function?.arguments ?? \"\"\n                    });\n                } else {\n                    assertNever(toolCallSnapshot?.type);\n                }\n            }\n        }\n    }, _ChatCompletionStream_emitToolCallDoneEvent = function _ChatCompletionStream_emitToolCallDoneEvent(choiceSnapshot, toolCallIndex) {\n        const state = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n        if (state.done_tool_calls.has(toolCallIndex)) {\n            // we've already fired the done event\n            return;\n        }\n        const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallIndex];\n        if (!toolCallSnapshot) {\n            throw new Error(\"no tool call snapshot\");\n        }\n        if (!toolCallSnapshot.type) {\n            throw new Error(\"tool call snapshot missing `type`\");\n        }\n        if (toolCallSnapshot.type === \"function\") {\n            const inputTool = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_params, \"f\")?.tools?.find((tool)=>tool.type === \"function\" && tool.function.name === toolCallSnapshot.function.name);\n            this._emit(\"tool_calls.function.arguments.done\", {\n                name: toolCallSnapshot.function.name,\n                index: toolCallIndex,\n                arguments: toolCallSnapshot.function.arguments,\n                parsed_arguments: (0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.isAutoParsableTool)(inputTool) ? inputTool.$parseRaw(toolCallSnapshot.function.arguments) : inputTool?.function.strict ? JSON.parse(toolCallSnapshot.function.arguments) : null\n            });\n        } else {\n            assertNever(toolCallSnapshot.type);\n        }\n    }, _ChatCompletionStream_emitContentDoneEvents = function _ChatCompletionStream_emitContentDoneEvents(choiceSnapshot) {\n        const state = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n        if (choiceSnapshot.message.content && !state.content_done) {\n            state.content_done = true;\n            const responseFormat = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this);\n            this._emit(\"content.done\", {\n                content: choiceSnapshot.message.content,\n                parsed: responseFormat ? responseFormat.$parseRaw(choiceSnapshot.message.content) : null\n            });\n        }\n        if (choiceSnapshot.message.refusal && !state.refusal_done) {\n            state.refusal_done = true;\n            this._emit(\"refusal.done\", {\n                refusal: choiceSnapshot.message.refusal\n            });\n        }\n        if (choiceSnapshot.logprobs?.content && !state.logprobs_content_done) {\n            state.logprobs_content_done = true;\n            this._emit(\"logprobs.content.done\", {\n                content: choiceSnapshot.logprobs.content\n            });\n        }\n        if (choiceSnapshot.logprobs?.refusal && !state.logprobs_refusal_done) {\n            state.logprobs_refusal_done = true;\n            this._emit(\"logprobs.refusal.done\", {\n                refusal: choiceSnapshot.logprobs.refusal\n            });\n        }\n    }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest() {\n        if (this.ended) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`stream has ended, this shouldn't happen`);\n        }\n        const snapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        if (!snapshot) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`request ended without sending any chunks`);\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\n        return finalizeChatCompletion(snapshot, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_params, \"f\"));\n    }, _ChatCompletionStream_getAutoParseableResponseFormat = function _ChatCompletionStream_getAutoParseableResponseFormat() {\n        const responseFormat = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_params, \"f\")?.response_format;\n        if ((0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.isAutoParsableResponseFormat)(responseFormat)) {\n            return responseFormat;\n        }\n        return null;\n    }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion(chunk) {\n        var _a, _b, _c, _d;\n        let snapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        const { choices, ...rest } = chunk;\n        if (!snapshot) {\n            snapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _ChatCompletionStream_currentChatCompletionSnapshot, {\n                ...rest,\n                choices: []\n            }, \"f\");\n        } else {\n            Object.assign(snapshot, rest);\n        }\n        for (const { delta, finish_reason, index, logprobs = null, ...other } of chunk.choices){\n            let choice = snapshot.choices[index];\n            if (!choice) {\n                choice = snapshot.choices[index] = {\n                    finish_reason,\n                    index,\n                    message: {},\n                    logprobs,\n                    ...other\n                };\n            }\n            if (logprobs) {\n                if (!choice.logprobs) {\n                    choice.logprobs = Object.assign({}, logprobs);\n                } else {\n                    const { content, refusal, ...rest } = logprobs;\n                    assertIsEmpty(rest);\n                    Object.assign(choice.logprobs, rest);\n                    if (content) {\n                        (_a = choice.logprobs).content ?? (_a.content = []);\n                        choice.logprobs.content.push(...content);\n                    }\n                    if (refusal) {\n                        (_b = choice.logprobs).refusal ?? (_b.refusal = []);\n                        choice.logprobs.refusal.push(...refusal);\n                    }\n                }\n            }\n            if (finish_reason) {\n                choice.finish_reason = finish_reason;\n                if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_params, \"f\") && (0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.hasAutoParseableInput)((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_params, \"f\"))) {\n                    if (finish_reason === \"length\") {\n                        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.LengthFinishReasonError();\n                    }\n                    if (finish_reason === \"content_filter\") {\n                        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ContentFilterFinishReasonError();\n                    }\n                }\n            }\n            Object.assign(choice, other);\n            if (!delta) continue; // Shouldn't happen; just in case.\n            const { content, refusal, function_call, role, tool_calls, ...rest } = delta;\n            assertIsEmpty(rest);\n            Object.assign(choice.message, rest);\n            if (refusal) {\n                choice.message.refusal = (choice.message.refusal || \"\") + refusal;\n            }\n            if (role) choice.message.role = role;\n            if (function_call) {\n                if (!choice.message.function_call) {\n                    choice.message.function_call = function_call;\n                } else {\n                    if (function_call.name) choice.message.function_call.name = function_call.name;\n                    if (function_call.arguments) {\n                        (_c = choice.message.function_call).arguments ?? (_c.arguments = \"\");\n                        choice.message.function_call.arguments += function_call.arguments;\n                    }\n                }\n            }\n            if (content) {\n                choice.message.content = (choice.message.content || \"\") + content;\n                if (!choice.message.refusal && (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this)) {\n                    choice.message.parsed = (0,_vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_5__.partialParse)(choice.message.content);\n                }\n            }\n            if (tool_calls) {\n                if (!choice.message.tool_calls) choice.message.tool_calls = [];\n                for (const { index, id, type, function: fn, ...rest } of tool_calls){\n                    const tool_call = (_d = choice.message.tool_calls)[index] ?? (_d[index] = {});\n                    Object.assign(tool_call, rest);\n                    if (id) tool_call.id = id;\n                    if (type) tool_call.type = type;\n                    if (fn) tool_call.function ?? (tool_call.function = {\n                        name: fn.name ?? \"\",\n                        arguments: \"\"\n                    });\n                    if (fn?.name) tool_call.function.name = fn.name;\n                    if (fn?.arguments) {\n                        tool_call.function.arguments += fn.arguments;\n                        if ((0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.shouldParseToolCall)((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ChatCompletionStream_params, \"f\"), tool_call)) {\n                            tool_call.function.parsed_arguments = (0,_vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_5__.partialParse)(tool_call.function.arguments);\n                        }\n                    }\n                }\n            }\n        }\n        return snapshot;\n    }, Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        this.on(\"chunk\", (chunk)=>{\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(chunk);\n            } else {\n                pushQueue.push(chunk);\n            }\n        });\n        this.on(\"end\", ()=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on(\"abort\", (err)=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on(\"error\", (err)=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async ()=>{\n                if (!pushQueue.length) {\n                    if (done) {\n                        return {\n                            value: undefined,\n                            done: true\n                        };\n                    }\n                    return new Promise((resolve, reject)=>readQueue.push({\n                            resolve,\n                            reject\n                        })).then((chunk)=>chunk ? {\n                            value: chunk,\n                            done: false\n                        } : {\n                            value: undefined,\n                            done: true\n                        });\n                }\n                const chunk = pushQueue.shift();\n                return {\n                    value: chunk,\n                    done: false\n                };\n            },\n            return: async ()=>{\n                this.abort();\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n        };\n    }\n    toReadableStream() {\n        const stream = new _streaming_mjs__WEBPACK_IMPORTED_MODULE_3__.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n}\nfunction finalizeChatCompletion(snapshot, params) {\n    const { id, choices, created, model, system_fingerprint, ...rest } = snapshot;\n    const completion = {\n        ...rest,\n        id,\n        choices: choices.map(({ message, finish_reason, index, logprobs, ...choiceRest })=>{\n            if (!finish_reason) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing finish_reason for choice ${index}`);\n            }\n            const { content = null, function_call, tool_calls, ...messageRest } = message;\n            const role = message.role; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.\n            if (!role) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing role for choice ${index}`);\n            }\n            if (function_call) {\n                const { arguments: args, name } = function_call;\n                if (args == null) {\n                    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing function_call.arguments for choice ${index}`);\n                }\n                if (!name) {\n                    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing function_call.name for choice ${index}`);\n                }\n                return {\n                    ...choiceRest,\n                    message: {\n                        content,\n                        function_call: {\n                            arguments: args,\n                            name\n                        },\n                        role,\n                        refusal: message.refusal ?? null\n                    },\n                    finish_reason,\n                    index,\n                    logprobs\n                };\n            }\n            if (tool_calls) {\n                return {\n                    ...choiceRest,\n                    index,\n                    finish_reason,\n                    logprobs,\n                    message: {\n                        ...messageRest,\n                        role,\n                        content,\n                        refusal: message.refusal ?? null,\n                        tool_calls: tool_calls.map((tool_call, i)=>{\n                            const { function: fn, type, id, ...toolRest } = tool_call;\n                            const { arguments: args, name, ...fnRest } = fn || {};\n                            if (id == null) {\n                                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].id\\n${str(snapshot)}`);\n                            }\n                            if (type == null) {\n                                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].type\\n${str(snapshot)}`);\n                            }\n                            if (name == null) {\n                                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].function.name\\n${str(snapshot)}`);\n                            }\n                            if (args == null) {\n                                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].function.arguments\\n${str(snapshot)}`);\n                            }\n                            return {\n                                ...toolRest,\n                                id,\n                                type,\n                                function: {\n                                    ...fnRest,\n                                    name,\n                                    arguments: args\n                                }\n                            };\n                        })\n                    }\n                };\n            }\n            return {\n                ...choiceRest,\n                message: {\n                    ...messageRest,\n                    content,\n                    role,\n                    refusal: message.refusal ?? null\n                },\n                finish_reason,\n                index,\n                logprobs\n            };\n        }),\n        created,\n        model,\n        object: \"chat.completion\",\n        ...system_fingerprint ? {\n            system_fingerprint\n        } : {}\n    };\n    return (0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.maybeParseChatCompletion)(completion, params);\n}\nfunction str(x) {\n    return JSON.stringify(x);\n}\n/**\n * Ensures the given argument is an empty object, useful for\n * asserting that all known properties on an object have been\n * destructured.\n */ function assertIsEmpty(obj) {\n    return;\n}\nfunction assertNever(_x) {} //# sourceMappingURL=ChatCompletionStream.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/ChatCompletionStream.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionStreamingRunner: () => (/* binding */ ChatCompletionStreamingRunner)\n/* harmony export */ });\n/* harmony import */ var _ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ChatCompletionStream.mjs */ \"(rsc)/./node_modules/openai/lib/ChatCompletionStream.mjs\");\n\nclass ChatCompletionStreamingRunner extends _ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionStream {\n    static fromReadableStream(stream) {\n        const runner = new ChatCompletionStreamingRunner(null);\n        runner._run(()=>runner._fromReadableStream(stream));\n        return runner;\n    }\n    static runTools(client, params, options) {\n        const runner = new ChatCompletionStreamingRunner(// @ts-expect-error TODO these types are incompatible\n        params);\n        const opts = {\n            ...options,\n            headers: {\n                ...options?.headers,\n                \"X-Stainless-Helper-Method\": \"runTools\"\n            }\n        };\n        runner._run(()=>runner._runTools(client, params, opts));\n        return runner;\n    }\n} //# sourceMappingURL=ChatCompletionStreamingRunner.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0U7QUFDM0QsTUFBTUMsc0NBQXNDRCwyRUFBb0JBO0lBQ25FLE9BQU9FLG1CQUFtQkMsTUFBTSxFQUFFO1FBQzlCLE1BQU1DLFNBQVMsSUFBSUgsOEJBQThCO1FBQ2pERyxPQUFPQyxJQUFJLENBQUMsSUFBTUQsT0FBT0UsbUJBQW1CLENBQUNIO1FBQzdDLE9BQU9DO0lBQ1g7SUFDQSxPQUFPRyxTQUFTQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQ3JDLE1BQU1OLFNBQVMsSUFBSUgsOEJBQ25CLHFEQUFxRDtRQUNyRFE7UUFDQSxNQUFNRSxPQUFPO1lBQ1QsR0FBR0QsT0FBTztZQUNWRSxTQUFTO2dCQUFFLEdBQUdGLFNBQVNFLE9BQU87Z0JBQUUsNkJBQTZCO1lBQVc7UUFDNUU7UUFDQVIsT0FBT0MsSUFBSSxDQUFDLElBQU1ELE9BQU9TLFNBQVMsQ0FBQ0wsUUFBUUMsUUFBUUU7UUFDbkQsT0FBT1A7SUFDWDtBQUNKLEVBQ0EsMERBQTBEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lci5tanM/YjRlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGF0Q29tcGxldGlvblN0cmVhbSB9IGZyb20gXCIuL0NoYXRDb21wbGV0aW9uU3RyZWFtLm1qc1wiO1xuZXhwb3J0IGNsYXNzIENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyIGV4dGVuZHMgQ2hhdENvbXBsZXRpb25TdHJlYW0ge1xuICAgIHN0YXRpYyBmcm9tUmVhZGFibGVTdHJlYW0oc3RyZWFtKSB7XG4gICAgICAgIGNvbnN0IHJ1bm5lciA9IG5ldyBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lcihudWxsKTtcbiAgICAgICAgcnVubmVyLl9ydW4oKCkgPT4gcnVubmVyLl9mcm9tUmVhZGFibGVTdHJlYW0oc3RyZWFtKSk7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgfVxuICAgIHN0YXRpYyBydW5Ub29scyhjbGllbnQsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBydW5uZXIgPSBuZXcgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIoXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ETyB0aGVzZSB0eXBlcyBhcmUgaW5jb21wYXRpYmxlXG4gICAgICAgIHBhcmFtcyk7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAuLi5vcHRpb25zPy5oZWFkZXJzLCAnWC1TdGFpbmxlc3MtSGVscGVyLU1ldGhvZCc6ICdydW5Ub29scycgfSxcbiAgICAgICAgfTtcbiAgICAgICAgcnVubmVyLl9ydW4oKCkgPT4gcnVubmVyLl9ydW5Ub29scyhjbGllbnQsIHBhcmFtcywgb3B0cykpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLm1qcy5tYXAiXSwibmFtZXMiOlsiQ2hhdENvbXBsZXRpb25TdHJlYW0iLCJDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lciIsImZyb21SZWFkYWJsZVN0cmVhbSIsInN0cmVhbSIsInJ1bm5lciIsIl9ydW4iLCJfZnJvbVJlYWRhYmxlU3RyZWFtIiwicnVuVG9vbHMiLCJjbGllbnQiLCJwYXJhbXMiLCJvcHRpb25zIiwib3B0cyIsImhlYWRlcnMiLCJfcnVuVG9vbHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/EventStream.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/lib/EventStream.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventStream: () => (/* binding */ EventStream)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/./node_modules/openai/internal/tslib.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\nvar _EventStream_instances, _EventStream_connectedPromise, _EventStream_resolveConnectedPromise, _EventStream_rejectConnectedPromise, _EventStream_endPromise, _EventStream_resolveEndPromise, _EventStream_rejectEndPromise, _EventStream_listeners, _EventStream_ended, _EventStream_errored, _EventStream_aborted, _EventStream_catchingPromiseCreated, _EventStream_handleError;\n\n\nclass EventStream {\n    constructor(){\n        _EventStream_instances.add(this);\n        this.controller = new AbortController();\n        _EventStream_connectedPromise.set(this, void 0);\n        _EventStream_resolveConnectedPromise.set(this, ()=>{});\n        _EventStream_rejectConnectedPromise.set(this, ()=>{});\n        _EventStream_endPromise.set(this, void 0);\n        _EventStream_resolveEndPromise.set(this, ()=>{});\n        _EventStream_rejectEndPromise.set(this, ()=>{});\n        _EventStream_listeners.set(this, {});\n        _EventStream_ended.set(this, false);\n        _EventStream_errored.set(this, false);\n        _EventStream_aborted.set(this, false);\n        _EventStream_catchingPromiseCreated.set(this, false);\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _EventStream_connectedPromise, new Promise((resolve, reject)=>{\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _EventStream_resolveConnectedPromise, resolve, \"f\");\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _EventStream_rejectConnectedPromise, reject, \"f\");\n        }), \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _EventStream_endPromise, new Promise((resolve, reject)=>{\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _EventStream_resolveEndPromise, resolve, \"f\");\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _EventStream_rejectEndPromise, reject, \"f\");\n        }), \"f\");\n        // Don't let these promises cause unhandled rejection errors.\n        // we will manually cause an unhandled rejection error later\n        // if the user hasn't registered any error listener or called\n        // any promise-returning method.\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_connectedPromise, \"f\").catch(()=>{});\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_endPromise, \"f\").catch(()=>{});\n    }\n    _run(executor) {\n        // Unfortunately if we call `executor()` immediately we get runtime errors about\n        // references to `this` before the `super()` constructor call returns.\n        setTimeout(()=>{\n            executor().then(()=>{\n                this._emitFinal();\n                this._emit(\"end\");\n            }, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_instances, \"m\", _EventStream_handleError).bind(this));\n        }, 0);\n    }\n    _connected() {\n        if (this.ended) return;\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_resolveConnectedPromise, \"f\").call(this);\n        this._emit(\"connect\");\n    }\n    get ended() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_ended, \"f\");\n    }\n    get errored() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_errored, \"f\");\n    }\n    get aborted() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_aborted, \"f\");\n    }\n    abort() {\n        this.controller.abort();\n    }\n    /**\n     * Adds the listener function to the end of the listeners array for the event.\n     * No checks are made to see if the listener has already been added. Multiple calls passing\n     * the same combination of event and listener will result in the listener being added, and\n     * called, multiple times.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */ on(event, listener) {\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_listeners, \"f\")[event] || ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_listeners, \"f\")[event] = []);\n        listeners.push({\n            listener\n        });\n        return this;\n    }\n    /**\n     * Removes the specified listener from the listener array for the event.\n     * off() will remove, at most, one instance of a listener from the listener array. If any single\n     * listener has been added multiple times to the listener array for the specified event, then\n     * off() must be called multiple times to remove each instance.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */ off(event, listener) {\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_listeners, \"f\")[event];\n        if (!listeners) return this;\n        const index = listeners.findIndex((l)=>l.listener === listener);\n        if (index >= 0) listeners.splice(index, 1);\n        return this;\n    }\n    /**\n     * Adds a one-time listener function for the event. The next time the event is triggered,\n     * this listener is removed and then invoked.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */ once(event, listener) {\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_listeners, \"f\")[event] || ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_listeners, \"f\")[event] = []);\n        listeners.push({\n            listener,\n            once: true\n        });\n        return this;\n    }\n    /**\n     * This is similar to `.once()`, but returns a Promise that resolves the next time\n     * the event is triggered, instead of calling a listener callback.\n     * @returns a Promise that resolves the next time given event is triggered,\n     * or rejects if an error is emitted.  (If you request the 'error' event,\n     * returns a promise that resolves with the error).\n     *\n     * Example:\n     *\n     *   const message = await stream.emitted('message') // rejects if the stream errors\n     */ emitted(event) {\n        return new Promise((resolve, reject)=>{\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _EventStream_catchingPromiseCreated, true, \"f\");\n            if (event !== \"error\") this.once(\"error\", reject);\n            this.once(event, resolve);\n        });\n    }\n    async done() {\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _EventStream_catchingPromiseCreated, true, \"f\");\n        await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_endPromise, \"f\");\n    }\n    _emit(event, ...args) {\n        // make sure we don't emit any events after end\n        if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_ended, \"f\")) {\n            return;\n        }\n        if (event === \"end\") {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _EventStream_ended, true, \"f\");\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_resolveEndPromise, \"f\").call(this);\n        }\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_listeners, \"f\")[event];\n        if (listeners) {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_listeners, \"f\")[event] = listeners.filter((l)=>!l.once);\n            listeners.forEach(({ listener })=>listener(...args));\n        }\n        if (event === \"abort\") {\n            const error = args[0];\n            if (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                Promise.reject(error);\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_rejectConnectedPromise, \"f\").call(this, error);\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit(\"end\");\n            return;\n        }\n        if (event === \"error\") {\n            // NOTE: _emit('error', error) should only be called from #handleError().\n            const error = args[0];\n            if (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n                // If you are seeing stack traces here, make sure to handle errors via either:\n                // - runner.on('error', () => ...)\n                // - await runner.done()\n                // - await runner.finalChatCompletion()\n                // - etc.\n                Promise.reject(error);\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_rejectConnectedPromise, \"f\").call(this, error);\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _EventStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit(\"end\");\n        }\n    }\n    _emitFinal() {}\n}\n_EventStream_connectedPromise = new WeakMap(), _EventStream_resolveConnectedPromise = new WeakMap(), _EventStream_rejectConnectedPromise = new WeakMap(), _EventStream_endPromise = new WeakMap(), _EventStream_resolveEndPromise = new WeakMap(), _EventStream_rejectEndPromise = new WeakMap(), _EventStream_listeners = new WeakMap(), _EventStream_ended = new WeakMap(), _EventStream_errored = new WeakMap(), _EventStream_aborted = new WeakMap(), _EventStream_catchingPromiseCreated = new WeakMap(), _EventStream_instances = new WeakSet(), _EventStream_handleError = function _EventStream_handleError(error) {\n    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _EventStream_errored, true, \"f\");\n    if (error instanceof Error && error.name === \"AbortError\") {\n        error = new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError();\n    }\n    if (error instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError) {\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _EventStream_aborted, true, \"f\");\n        return this._emit(\"abort\", error);\n    }\n    if (error instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError) {\n        return this._emit(\"error\", error);\n    }\n    if (error instanceof Error) {\n        const openAIError = new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(error.message);\n        // @ts-ignore\n        openAIError.cause = error;\n        return this._emit(\"error\", openAIError);\n    }\n    return this._emit(\"error\", new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(String(error)));\n}; //# sourceMappingURL=EventStream.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/EventStream.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/ResponsesParser.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/lib/ResponsesParser.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addOutputText: () => (/* binding */ addOutputText),\n/* harmony export */   hasAutoParseableInput: () => (/* binding */ hasAutoParseableInput),\n/* harmony export */   isAutoParsableTool: () => (/* binding */ isAutoParsableTool),\n/* harmony export */   makeParseableResponseTool: () => (/* binding */ makeParseableResponseTool),\n/* harmony export */   maybeParseResponse: () => (/* binding */ maybeParseResponse),\n/* harmony export */   parseResponse: () => (/* binding */ parseResponse),\n/* harmony export */   shouldParseToolCall: () => (/* binding */ shouldParseToolCall),\n/* harmony export */   validateInputTools: () => (/* binding */ validateInputTools)\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _lib_parser_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/parser.mjs */ \"(rsc)/./node_modules/openai/lib/parser.mjs\");\n\n\nfunction maybeParseResponse(response, params) {\n    if (!params || !hasAutoParseableInput(params)) {\n        return {\n            ...response,\n            output_parsed: null,\n            output: response.output.map((item)=>{\n                if (item.type === \"function_call\") {\n                    return {\n                        ...item,\n                        parsed_arguments: null\n                    };\n                }\n                if (item.type === \"message\") {\n                    return {\n                        ...item,\n                        content: item.content.map((content)=>({\n                                ...content,\n                                parsed: null\n                            }))\n                    };\n                } else {\n                    return item;\n                }\n            })\n        };\n    }\n    return parseResponse(response, params);\n}\nfunction parseResponse(response, params) {\n    const output = response.output.map((item)=>{\n        if (item.type === \"function_call\") {\n            return {\n                ...item,\n                parsed_arguments: parseToolCall(params, item)\n            };\n        }\n        if (item.type === \"message\") {\n            const content = item.content.map((content)=>{\n                if (content.type === \"output_text\") {\n                    return {\n                        ...content,\n                        parsed: parseTextFormat(params, content.text)\n                    };\n                }\n                return content;\n            });\n            return {\n                ...item,\n                content\n            };\n        }\n        return item;\n    });\n    const parsed = Object.assign({}, response, {\n        output\n    });\n    if (!Object.getOwnPropertyDescriptor(response, \"output_text\")) {\n        addOutputText(parsed);\n    }\n    Object.defineProperty(parsed, \"output_parsed\", {\n        enumerable: true,\n        get () {\n            for (const output of parsed.output){\n                if (output.type !== \"message\") {\n                    continue;\n                }\n                for (const content of output.content){\n                    if (content.type === \"output_text\" && content.parsed !== null) {\n                        return content.parsed;\n                    }\n                }\n            }\n            return null;\n        }\n    });\n    return parsed;\n}\nfunction parseTextFormat(params, content) {\n    if (params.text?.format?.type !== \"json_schema\") {\n        return null;\n    }\n    if (\"$parseRaw\" in params.text?.format) {\n        const text_format = params.text?.format;\n        return text_format.$parseRaw(content);\n    }\n    return JSON.parse(content);\n}\nfunction hasAutoParseableInput(params) {\n    if ((0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_1__.isAutoParsableResponseFormat)(params.text?.format)) {\n        return true;\n    }\n    return false;\n}\nfunction makeParseableResponseTool(tool, { parser, callback }) {\n    const obj = {\n        ...tool\n    };\n    Object.defineProperties(obj, {\n        $brand: {\n            value: \"auto-parseable-tool\",\n            enumerable: false\n        },\n        $parseRaw: {\n            value: parser,\n            enumerable: false\n        },\n        $callback: {\n            value: callback,\n            enumerable: false\n        }\n    });\n    return obj;\n}\nfunction isAutoParsableTool(tool) {\n    return tool?.[\"$brand\"] === \"auto-parseable-tool\";\n}\nfunction getInputToolByName(input_tools, name) {\n    return input_tools.find((tool)=>tool.type === \"function\" && tool.name === name);\n}\nfunction parseToolCall(params, toolCall) {\n    const inputTool = getInputToolByName(params.tools ?? [], toolCall.name);\n    return {\n        ...toolCall,\n        ...toolCall,\n        parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.arguments) : inputTool?.strict ? JSON.parse(toolCall.arguments) : null\n    };\n}\nfunction shouldParseToolCall(params, toolCall) {\n    if (!params) {\n        return false;\n    }\n    const inputTool = getInputToolByName(params.tools ?? [], toolCall.name);\n    return isAutoParsableTool(inputTool) || inputTool?.strict || false;\n}\nfunction validateInputTools(tools) {\n    for (const tool of tools ?? []){\n        if (tool.type !== \"function\") {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``);\n        }\n        if (tool.function.strict !== true) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`);\n        }\n    }\n}\nfunction addOutputText(rsp) {\n    const texts = [];\n    for (const output of rsp.output){\n        if (output.type !== \"message\") {\n            continue;\n        }\n        for (const content of output.content){\n            if (content.type === \"output_text\") {\n                texts.push(content.text);\n            }\n        }\n    }\n    rsp.output_text = texts.join(\"\");\n} //# sourceMappingURL=ResponsesParser.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9SZXNwb25zZXNQYXJzZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBMkM7QUFDc0I7QUFDMUQsU0FBU0UsbUJBQW1CQyxRQUFRLEVBQUVDLE1BQU07SUFDL0MsSUFBSSxDQUFDQSxVQUFVLENBQUNDLHNCQUFzQkQsU0FBUztRQUMzQyxPQUFPO1lBQ0gsR0FBR0QsUUFBUTtZQUNYRyxlQUFlO1lBQ2ZDLFFBQVFKLFNBQVNJLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLENBQUNDO2dCQUN6QixJQUFJQSxLQUFLQyxJQUFJLEtBQUssaUJBQWlCO29CQUMvQixPQUFPO3dCQUNILEdBQUdELElBQUk7d0JBQ1BFLGtCQUFrQjtvQkFDdEI7Z0JBQ0o7Z0JBQ0EsSUFBSUYsS0FBS0MsSUFBSSxLQUFLLFdBQVc7b0JBQ3pCLE9BQU87d0JBQ0gsR0FBR0QsSUFBSTt3QkFDUEcsU0FBU0gsS0FBS0csT0FBTyxDQUFDSixHQUFHLENBQUMsQ0FBQ0ksVUFBYTtnQ0FDcEMsR0FBR0EsT0FBTztnQ0FDVkMsUUFBUTs0QkFDWjtvQkFDSjtnQkFDSixPQUNLO29CQUNELE9BQU9KO2dCQUNYO1lBQ0o7UUFDSjtJQUNKO0lBQ0EsT0FBT0ssY0FBY1gsVUFBVUM7QUFDbkM7QUFDTyxTQUFTVSxjQUFjWCxRQUFRLEVBQUVDLE1BQU07SUFDMUMsTUFBTUcsU0FBU0osU0FBU0ksTUFBTSxDQUFDQyxHQUFHLENBQUMsQ0FBQ0M7UUFDaEMsSUFBSUEsS0FBS0MsSUFBSSxLQUFLLGlCQUFpQjtZQUMvQixPQUFPO2dCQUNILEdBQUdELElBQUk7Z0JBQ1BFLGtCQUFrQkksY0FBY1gsUUFBUUs7WUFDNUM7UUFDSjtRQUNBLElBQUlBLEtBQUtDLElBQUksS0FBSyxXQUFXO1lBQ3pCLE1BQU1FLFVBQVVILEtBQUtHLE9BQU8sQ0FBQ0osR0FBRyxDQUFDLENBQUNJO2dCQUM5QixJQUFJQSxRQUFRRixJQUFJLEtBQUssZUFBZTtvQkFDaEMsT0FBTzt3QkFDSCxHQUFHRSxPQUFPO3dCQUNWQyxRQUFRRyxnQkFBZ0JaLFFBQVFRLFFBQVFLLElBQUk7b0JBQ2hEO2dCQUNKO2dCQUNBLE9BQU9MO1lBQ1g7WUFDQSxPQUFPO2dCQUNILEdBQUdILElBQUk7Z0JBQ1BHO1lBQ0o7UUFDSjtRQUNBLE9BQU9IO0lBQ1g7SUFDQSxNQUFNSSxTQUFTSyxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHaEIsVUFBVTtRQUFFSTtJQUFPO0lBQ3BELElBQUksQ0FBQ1csT0FBT0Usd0JBQXdCLENBQUNqQixVQUFVLGdCQUFnQjtRQUMzRGtCLGNBQWNSO0lBQ2xCO0lBQ0FLLE9BQU9JLGNBQWMsQ0FBQ1QsUUFBUSxpQkFBaUI7UUFDM0NVLFlBQVk7UUFDWkM7WUFDSSxLQUFLLE1BQU1qQixVQUFVTSxPQUFPTixNQUFNLENBQUU7Z0JBQ2hDLElBQUlBLE9BQU9HLElBQUksS0FBSyxXQUFXO29CQUMzQjtnQkFDSjtnQkFDQSxLQUFLLE1BQU1FLFdBQVdMLE9BQU9LLE9BQU8sQ0FBRTtvQkFDbEMsSUFBSUEsUUFBUUYsSUFBSSxLQUFLLGlCQUFpQkUsUUFBUUMsTUFBTSxLQUFLLE1BQU07d0JBQzNELE9BQU9ELFFBQVFDLE1BQU07b0JBQ3pCO2dCQUNKO1lBQ0o7WUFDQSxPQUFPO1FBQ1g7SUFDSjtJQUNBLE9BQU9BO0FBQ1g7QUFDQSxTQUFTRyxnQkFBZ0JaLE1BQU0sRUFBRVEsT0FBTztJQUNwQyxJQUFJUixPQUFPYSxJQUFJLEVBQUVRLFFBQVFmLFNBQVMsZUFBZTtRQUM3QyxPQUFPO0lBQ1g7SUFDQSxJQUFJLGVBQWVOLE9BQU9hLElBQUksRUFBRVEsUUFBUTtRQUNwQyxNQUFNQyxjQUFjdEIsT0FBT2EsSUFBSSxFQUFFUTtRQUNqQyxPQUFPQyxZQUFZQyxTQUFTLENBQUNmO0lBQ2pDO0lBQ0EsT0FBT2dCLEtBQUtDLEtBQUssQ0FBQ2pCO0FBQ3RCO0FBQ08sU0FBU1Asc0JBQXNCRCxNQUFNO0lBQ3hDLElBQUlILDZFQUE0QkEsQ0FBQ0csT0FBT2EsSUFBSSxFQUFFUSxTQUFTO1FBQ25ELE9BQU87SUFDWDtJQUNBLE9BQU87QUFDWDtBQUNPLFNBQVNLLDBCQUEwQkMsSUFBSSxFQUFFLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFHO0lBQ2pFLE1BQU1DLE1BQU07UUFBRSxHQUFHSCxJQUFJO0lBQUM7SUFDdEJiLE9BQU9pQixnQkFBZ0IsQ0FBQ0QsS0FBSztRQUN6QkUsUUFBUTtZQUNKQyxPQUFPO1lBQ1BkLFlBQVk7UUFDaEI7UUFDQUksV0FBVztZQUNQVSxPQUFPTDtZQUNQVCxZQUFZO1FBQ2hCO1FBQ0FlLFdBQVc7WUFDUEQsT0FBT0o7WUFDUFYsWUFBWTtRQUNoQjtJQUNKO0lBQ0EsT0FBT1c7QUFDWDtBQUNPLFNBQVNLLG1CQUFtQlIsSUFBSTtJQUNuQyxPQUFPQSxNQUFNLENBQUMsU0FBUyxLQUFLO0FBQ2hDO0FBQ0EsU0FBU1MsbUJBQW1CQyxXQUFXLEVBQUVDLElBQUk7SUFDekMsT0FBT0QsWUFBWUUsSUFBSSxDQUFDLENBQUNaLE9BQVNBLEtBQUtyQixJQUFJLEtBQUssY0FBY3FCLEtBQUtXLElBQUksS0FBS0E7QUFDaEY7QUFDQSxTQUFTM0IsY0FBY1gsTUFBTSxFQUFFd0MsUUFBUTtJQUNuQyxNQUFNQyxZQUFZTCxtQkFBbUJwQyxPQUFPMEMsS0FBSyxJQUFJLEVBQUUsRUFBRUYsU0FBU0YsSUFBSTtJQUN0RSxPQUFPO1FBQ0gsR0FBR0UsUUFBUTtRQUNYLEdBQUdBLFFBQVE7UUFDWGpDLGtCQUFrQjRCLG1CQUFtQk0sYUFBYUEsVUFBVWxCLFNBQVMsQ0FBQ2lCLFNBQVNHLFNBQVMsSUFDbEZGLFdBQVdHLFNBQVNwQixLQUFLQyxLQUFLLENBQUNlLFNBQVNHLFNBQVMsSUFDN0M7SUFDZDtBQUNKO0FBQ08sU0FBU0Usb0JBQW9CN0MsTUFBTSxFQUFFd0MsUUFBUTtJQUNoRCxJQUFJLENBQUN4QyxRQUFRO1FBQ1QsT0FBTztJQUNYO0lBQ0EsTUFBTXlDLFlBQVlMLG1CQUFtQnBDLE9BQU8wQyxLQUFLLElBQUksRUFBRSxFQUFFRixTQUFTRixJQUFJO0lBQ3RFLE9BQU9ILG1CQUFtQk0sY0FBY0EsV0FBV0csVUFBVTtBQUNqRTtBQUNPLFNBQVNFLG1CQUFtQkosS0FBSztJQUNwQyxLQUFLLE1BQU1mLFFBQVFlLFNBQVMsRUFBRSxDQUFFO1FBQzVCLElBQUlmLEtBQUtyQixJQUFJLEtBQUssWUFBWTtZQUMxQixNQUFNLElBQUlWLG1EQUFXQSxDQUFDLENBQUMsd0VBQXdFLEVBQUUrQixLQUFLckIsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNsSDtRQUNBLElBQUlxQixLQUFLb0IsUUFBUSxDQUFDSCxNQUFNLEtBQUssTUFBTTtZQUMvQixNQUFNLElBQUloRCxtREFBV0EsQ0FBQyxDQUFDLE1BQU0sRUFBRStCLEtBQUtvQixRQUFRLENBQUNULElBQUksQ0FBQywwRkFBMEYsQ0FBQztRQUNqSjtJQUNKO0FBQ0o7QUFDTyxTQUFTckIsY0FBYytCLEdBQUc7SUFDN0IsTUFBTUMsUUFBUSxFQUFFO0lBQ2hCLEtBQUssTUFBTTlDLFVBQVU2QyxJQUFJN0MsTUFBTSxDQUFFO1FBQzdCLElBQUlBLE9BQU9HLElBQUksS0FBSyxXQUFXO1lBQzNCO1FBQ0o7UUFDQSxLQUFLLE1BQU1FLFdBQVdMLE9BQU9LLE9BQU8sQ0FBRTtZQUNsQyxJQUFJQSxRQUFRRixJQUFJLEtBQUssZUFBZTtnQkFDaEMyQyxNQUFNQyxJQUFJLENBQUMxQyxRQUFRSyxJQUFJO1lBQzNCO1FBQ0o7SUFDSjtJQUNBbUMsSUFBSUcsV0FBVyxHQUFHRixNQUFNRyxJQUFJLENBQUM7QUFDakMsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL1Jlc3BvbnNlc1BhcnNlci5tanM/NjAyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcGVuQUlFcnJvciB9IGZyb20gXCIuLi9lcnJvci5tanNcIjtcbmltcG9ydCB7IGlzQXV0b1BhcnNhYmxlUmVzcG9uc2VGb3JtYXQgfSBmcm9tIFwiLi4vbGliL3BhcnNlci5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBtYXliZVBhcnNlUmVzcG9uc2UocmVzcG9uc2UsIHBhcmFtcykge1xuICAgIGlmICghcGFyYW1zIHx8ICFoYXNBdXRvUGFyc2VhYmxlSW5wdXQocGFyYW1zKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucmVzcG9uc2UsXG4gICAgICAgICAgICBvdXRwdXRfcGFyc2VkOiBudWxsLFxuICAgICAgICAgICAgb3V0cHV0OiByZXNwb25zZS5vdXRwdXQubWFwKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2Z1bmN0aW9uX2NhbGwnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkX2FyZ3VtZW50czogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaXRlbS5jb250ZW50Lm1hcCgoY29udGVudCkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VSZXNwb25zZShyZXNwb25zZSwgcGFyYW1zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJlc3BvbnNlKHJlc3BvbnNlLCBwYXJhbXMpIHtcbiAgICBjb25zdCBvdXRwdXQgPSByZXNwb25zZS5vdXRwdXQubWFwKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdmdW5jdGlvbl9jYWxsJykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgICAgIHBhcnNlZF9hcmd1bWVudHM6IHBhcnNlVG9vbENhbGwocGFyYW1zLCBpdGVtKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gaXRlbS5jb250ZW50Lm1hcCgoY29udGVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50LnR5cGUgPT09ICdvdXRwdXRfdGV4dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWQ6IHBhcnNlVGV4dEZvcm1hdChwYXJhbXMsIGNvbnRlbnQudGV4dCksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSk7XG4gICAgY29uc3QgcGFyc2VkID0gT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UsIHsgb3V0cHV0IH0pO1xuICAgIGlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyZXNwb25zZSwgJ291dHB1dF90ZXh0JykpIHtcbiAgICAgICAgYWRkT3V0cHV0VGV4dChwYXJzZWQpO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocGFyc2VkLCAnb3V0cHV0X3BhcnNlZCcsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBvdXRwdXQgb2YgcGFyc2VkLm91dHB1dCkge1xuICAgICAgICAgICAgICAgIGlmIChvdXRwdXQudHlwZSAhPT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNvbnRlbnQgb2Ygb3V0cHV0LmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQudHlwZSA9PT0gJ291dHB1dF90ZXh0JyAmJiBjb250ZW50LnBhcnNlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQucGFyc2VkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnNlZDtcbn1cbmZ1bmN0aW9uIHBhcnNlVGV4dEZvcm1hdChwYXJhbXMsIGNvbnRlbnQpIHtcbiAgICBpZiAocGFyYW1zLnRleHQ/LmZvcm1hdD8udHlwZSAhPT0gJ2pzb25fc2NoZW1hJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKCckcGFyc2VSYXcnIGluIHBhcmFtcy50ZXh0Py5mb3JtYXQpIHtcbiAgICAgICAgY29uc3QgdGV4dF9mb3JtYXQgPSBwYXJhbXMudGV4dD8uZm9ybWF0O1xuICAgICAgICByZXR1cm4gdGV4dF9mb3JtYXQuJHBhcnNlUmF3KGNvbnRlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5wYXJzZShjb250ZW50KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNBdXRvUGFyc2VhYmxlSW5wdXQocGFyYW1zKSB7XG4gICAgaWYgKGlzQXV0b1BhcnNhYmxlUmVzcG9uc2VGb3JtYXQocGFyYW1zLnRleHQ/LmZvcm1hdCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUGFyc2VhYmxlUmVzcG9uc2VUb29sKHRvb2wsIHsgcGFyc2VyLCBjYWxsYmFjaywgfSkge1xuICAgIGNvbnN0IG9iaiA9IHsgLi4udG9vbCB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwge1xuICAgICAgICAkYnJhbmQ6IHtcbiAgICAgICAgICAgIHZhbHVlOiAnYXV0by1wYXJzZWFibGUtdG9vbCcsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgJHBhcnNlUmF3OiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VyLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgICRjYWxsYmFjazoge1xuICAgICAgICAgICAgdmFsdWU6IGNhbGxiYWNrLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0F1dG9QYXJzYWJsZVRvb2wodG9vbCkge1xuICAgIHJldHVybiB0b29sPy5bJyRicmFuZCddID09PSAnYXV0by1wYXJzZWFibGUtdG9vbCc7XG59XG5mdW5jdGlvbiBnZXRJbnB1dFRvb2xCeU5hbWUoaW5wdXRfdG9vbHMsIG5hbWUpIHtcbiAgICByZXR1cm4gaW5wdXRfdG9vbHMuZmluZCgodG9vbCkgPT4gdG9vbC50eXBlID09PSAnZnVuY3Rpb24nICYmIHRvb2wubmFtZSA9PT0gbmFtZSk7XG59XG5mdW5jdGlvbiBwYXJzZVRvb2xDYWxsKHBhcmFtcywgdG9vbENhbGwpIHtcbiAgICBjb25zdCBpbnB1dFRvb2wgPSBnZXRJbnB1dFRvb2xCeU5hbWUocGFyYW1zLnRvb2xzID8/IFtdLCB0b29sQ2FsbC5uYW1lKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi50b29sQ2FsbCxcbiAgICAgICAgLi4udG9vbENhbGwsXG4gICAgICAgIHBhcnNlZF9hcmd1bWVudHM6IGlzQXV0b1BhcnNhYmxlVG9vbChpbnB1dFRvb2wpID8gaW5wdXRUb29sLiRwYXJzZVJhdyh0b29sQ2FsbC5hcmd1bWVudHMpXG4gICAgICAgICAgICA6IGlucHV0VG9vbD8uc3RyaWN0ID8gSlNPTi5wYXJzZSh0b29sQ2FsbC5hcmd1bWVudHMpXG4gICAgICAgICAgICAgICAgOiBudWxsLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkUGFyc2VUb29sQ2FsbChwYXJhbXMsIHRvb2xDYWxsKSB7XG4gICAgaWYgKCFwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dFRvb2wgPSBnZXRJbnB1dFRvb2xCeU5hbWUocGFyYW1zLnRvb2xzID8/IFtdLCB0b29sQ2FsbC5uYW1lKTtcbiAgICByZXR1cm4gaXNBdXRvUGFyc2FibGVUb29sKGlucHV0VG9vbCkgfHwgaW5wdXRUb29sPy5zdHJpY3QgfHwgZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVJbnB1dFRvb2xzKHRvb2xzKSB7XG4gICAgZm9yIChjb25zdCB0b29sIG9mIHRvb2xzID8/IFtdKSB7XG4gICAgICAgIGlmICh0b29sLnR5cGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgQ3VycmVudGx5IG9ubHkgXFxgZnVuY3Rpb25cXGAgdG9vbCB0eXBlcyBzdXBwb3J0IGF1dG8tcGFyc2luZzsgUmVjZWl2ZWQgXFxgJHt0b29sLnR5cGV9XFxgYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvb2wuZnVuY3Rpb24uc3RyaWN0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYFRoZSBcXGAke3Rvb2wuZnVuY3Rpb24ubmFtZX1cXGAgdG9vbCBpcyBub3QgbWFya2VkIHdpdGggXFxgc3RyaWN0OiB0cnVlXFxgLiBPbmx5IHN0cmljdCBmdW5jdGlvbiB0b29scyBjYW4gYmUgYXV0by1wYXJzZWRgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBhZGRPdXRwdXRUZXh0KHJzcCkge1xuICAgIGNvbnN0IHRleHRzID0gW107XG4gICAgZm9yIChjb25zdCBvdXRwdXQgb2YgcnNwLm91dHB1dCkge1xuICAgICAgICBpZiAob3V0cHV0LnR5cGUgIT09ICdtZXNzYWdlJykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBjb250ZW50IG9mIG91dHB1dC5jb250ZW50KSB7XG4gICAgICAgICAgICBpZiAoY29udGVudC50eXBlID09PSAnb3V0cHV0X3RleHQnKSB7XG4gICAgICAgICAgICAgICAgdGV4dHMucHVzaChjb250ZW50LnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJzcC5vdXRwdXRfdGV4dCA9IHRleHRzLmpvaW4oJycpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVzcG9uc2VzUGFyc2VyLm1qcy5tYXAiXSwibmFtZXMiOlsiT3BlbkFJRXJyb3IiLCJpc0F1dG9QYXJzYWJsZVJlc3BvbnNlRm9ybWF0IiwibWF5YmVQYXJzZVJlc3BvbnNlIiwicmVzcG9uc2UiLCJwYXJhbXMiLCJoYXNBdXRvUGFyc2VhYmxlSW5wdXQiLCJvdXRwdXRfcGFyc2VkIiwib3V0cHV0IiwibWFwIiwiaXRlbSIsInR5cGUiLCJwYXJzZWRfYXJndW1lbnRzIiwiY29udGVudCIsInBhcnNlZCIsInBhcnNlUmVzcG9uc2UiLCJwYXJzZVRvb2xDYWxsIiwicGFyc2VUZXh0Rm9ybWF0IiwidGV4dCIsIk9iamVjdCIsImFzc2lnbiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImFkZE91dHB1dFRleHQiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJmb3JtYXQiLCJ0ZXh0X2Zvcm1hdCIsIiRwYXJzZVJhdyIsIkpTT04iLCJwYXJzZSIsIm1ha2VQYXJzZWFibGVSZXNwb25zZVRvb2wiLCJ0b29sIiwicGFyc2VyIiwiY2FsbGJhY2siLCJvYmoiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiJGJyYW5kIiwidmFsdWUiLCIkY2FsbGJhY2siLCJpc0F1dG9QYXJzYWJsZVRvb2wiLCJnZXRJbnB1dFRvb2xCeU5hbWUiLCJpbnB1dF90b29scyIsIm5hbWUiLCJmaW5kIiwidG9vbENhbGwiLCJpbnB1dFRvb2wiLCJ0b29scyIsImFyZ3VtZW50cyIsInN0cmljdCIsInNob3VsZFBhcnNlVG9vbENhbGwiLCJ2YWxpZGF0ZUlucHV0VG9vbHMiLCJmdW5jdGlvbiIsInJzcCIsInRleHRzIiwicHVzaCIsIm91dHB1dF90ZXh0Iiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/ResponsesParser.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/RunnableFunction.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/lib/RunnableFunction.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParsingToolFunction: () => (/* binding */ ParsingToolFunction),\n/* harmony export */   isRunnableFunctionWithParse: () => (/* binding */ isRunnableFunctionWithParse)\n/* harmony export */ });\nfunction isRunnableFunctionWithParse(fn) {\n    return typeof fn.parse === \"function\";\n}\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n */ class ParsingToolFunction {\n    constructor(input){\n        this.type = \"function\";\n        this.function = input;\n    }\n} //# sourceMappingURL=RunnableFunction.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9SdW5uYWJsZUZ1bmN0aW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLFNBQVNBLDRCQUE0QkMsRUFBRTtJQUMxQyxPQUFPLE9BQU9BLEdBQUdDLEtBQUssS0FBSztBQUMvQjtBQUNBOzs7Q0FHQyxHQUNNLE1BQU1DO0lBQ1RDLFlBQVlDLEtBQUssQ0FBRTtRQUNmLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDQyxRQUFRLEdBQUdGO0lBQ3BCO0FBQ0osRUFDQSw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL1J1bm5hYmxlRnVuY3Rpb24ubWpzP2E2YjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzUnVubmFibGVGdW5jdGlvbldpdGhQYXJzZShmbikge1xuICAgIHJldHVybiB0eXBlb2YgZm4ucGFyc2UgPT09ICdmdW5jdGlvbic7XG59XG4vKipcbiAqIFRoaXMgaXMgaGVscGVyIGNsYXNzIGZvciBwYXNzaW5nIGEgYGZ1bmN0aW9uYCBhbmQgYHBhcnNlYCB3aGVyZSB0aGUgYGZ1bmN0aW9uYFxuICogYXJndW1lbnQgdHlwZSBtYXRjaGVzIHRoZSBgcGFyc2VgIHJldHVybiB0eXBlLlxuICovXG5leHBvcnQgY2xhc3MgUGFyc2luZ1Rvb2xGdW5jdGlvbiB7XG4gICAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2Z1bmN0aW9uJztcbiAgICAgICAgdGhpcy5mdW5jdGlvbiA9IGlucHV0O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJ1bm5hYmxlRnVuY3Rpb24ubWpzLm1hcCJdLCJuYW1lcyI6WyJpc1J1bm5hYmxlRnVuY3Rpb25XaXRoUGFyc2UiLCJmbiIsInBhcnNlIiwiUGFyc2luZ1Rvb2xGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwiaW5wdXQiLCJ0eXBlIiwiZnVuY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/RunnableFunction.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/Util.mjs":
/*!******************************************!*\
  !*** ./node_modules/openai/lib/Util.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allSettledWithThrow: () => (/* binding */ allSettledWithThrow)\n/* harmony export */ });\n/**\n * Like `Promise.allSettled()` but throws an error if any promises are rejected.\n */ const allSettledWithThrow = async (promises)=>{\n    const results = await Promise.allSettled(promises);\n    const rejected = results.filter((result)=>result.status === \"rejected\");\n    if (rejected.length) {\n        for (const result of rejected){\n            console.error(result.reason);\n        }\n        throw new Error(`${rejected.length} promise(s) failed - see the above errors`);\n    }\n    // Note: TS was complaining about using `.filter().map()` here for some reason\n    const values = [];\n    for (const result of results){\n        if (result.status === \"fulfilled\") {\n            values.push(result.value);\n        }\n    }\n    return values;\n}; //# sourceMappingURL=Util.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9VdGlsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FDTSxNQUFNQSxzQkFBc0IsT0FBT0M7SUFDdEMsTUFBTUMsVUFBVSxNQUFNQyxRQUFRQyxVQUFVLENBQUNIO0lBQ3pDLE1BQU1JLFdBQVdILFFBQVFJLE1BQU0sQ0FBQyxDQUFDQyxTQUFXQSxPQUFPQyxNQUFNLEtBQUs7SUFDOUQsSUFBSUgsU0FBU0ksTUFBTSxFQUFFO1FBQ2pCLEtBQUssTUFBTUYsVUFBVUYsU0FBVTtZQUMzQkssUUFBUUMsS0FBSyxDQUFDSixPQUFPSyxNQUFNO1FBQy9CO1FBQ0EsTUFBTSxJQUFJQyxNQUFNLENBQUMsRUFBRVIsU0FBU0ksTUFBTSxDQUFDLHlDQUF5QyxDQUFDO0lBQ2pGO0lBQ0EsOEVBQThFO0lBQzlFLE1BQU1LLFNBQVMsRUFBRTtJQUNqQixLQUFLLE1BQU1QLFVBQVVMLFFBQVM7UUFDMUIsSUFBSUssT0FBT0MsTUFBTSxLQUFLLGFBQWE7WUFDL0JNLE9BQU9DLElBQUksQ0FBQ1IsT0FBT1MsS0FBSztRQUM1QjtJQUNKO0lBQ0EsT0FBT0Y7QUFDWCxFQUFFLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9VdGlsLm1qcz9jOGQ4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGlrZSBgUHJvbWlzZS5hbGxTZXR0bGVkKClgIGJ1dCB0aHJvd3MgYW4gZXJyb3IgaWYgYW55IHByb21pc2VzIGFyZSByZWplY3RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGFsbFNldHRsZWRXaXRoVGhyb3cgPSBhc3luYyAocHJvbWlzZXMpID0+IHtcbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKHByb21pc2VzKTtcbiAgICBjb25zdCByZWplY3RlZCA9IHJlc3VsdHMuZmlsdGVyKChyZXN1bHQpID0+IHJlc3VsdC5zdGF0dXMgPT09ICdyZWplY3RlZCcpO1xuICAgIGlmIChyZWplY3RlZC5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVqZWN0ZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IocmVzdWx0LnJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3JlamVjdGVkLmxlbmd0aH0gcHJvbWlzZShzKSBmYWlsZWQgLSBzZWUgdGhlIGFib3ZlIGVycm9yc2ApO1xuICAgIH1cbiAgICAvLyBOb3RlOiBUUyB3YXMgY29tcGxhaW5pbmcgYWJvdXQgdXNpbmcgYC5maWx0ZXIoKS5tYXAoKWAgaGVyZSBmb3Igc29tZSByZWFzb25cbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiByZXN1bHRzKSB7XG4gICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSAnZnVsZmlsbGVkJykge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2gocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVV0aWwubWpzLm1hcCJdLCJuYW1lcyI6WyJhbGxTZXR0bGVkV2l0aFRocm93IiwicHJvbWlzZXMiLCJyZXN1bHRzIiwiUHJvbWlzZSIsImFsbFNldHRsZWQiLCJyZWplY3RlZCIsImZpbHRlciIsInJlc3VsdCIsInN0YXR1cyIsImxlbmd0aCIsImNvbnNvbGUiLCJlcnJvciIsInJlYXNvbiIsIkVycm9yIiwidmFsdWVzIiwicHVzaCIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/Util.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/chatCompletionUtils.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/openai/lib/chatCompletionUtils.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAssistantMessage: () => (/* binding */ isAssistantMessage),\n/* harmony export */   isPresent: () => (/* binding */ isPresent),\n/* harmony export */   isToolMessage: () => (/* binding */ isToolMessage)\n/* harmony export */ });\nconst isAssistantMessage = (message)=>{\n    return message?.role === \"assistant\";\n};\nconst isToolMessage = (message)=>{\n    return message?.role === \"tool\";\n};\nfunction isPresent(obj) {\n    return obj != null;\n} //# sourceMappingURL=chatCompletionUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9jaGF0Q29tcGxldGlvblV0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxNQUFNQSxxQkFBcUIsQ0FBQ0M7SUFDL0IsT0FBT0EsU0FBU0MsU0FBUztBQUM3QixFQUFFO0FBQ0ssTUFBTUMsZ0JBQWdCLENBQUNGO0lBQzFCLE9BQU9BLFNBQVNDLFNBQVM7QUFDN0IsRUFBRTtBQUNLLFNBQVNFLFVBQVVDLEdBQUc7SUFDekIsT0FBT0EsT0FBTztBQUNsQixFQUNBLGdEQUFnRCIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9saWIvY2hhdENvbXBsZXRpb25VdGlscy5tanM/NzJhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaXNBc3Npc3RhbnRNZXNzYWdlID0gKG1lc3NhZ2UpID0+IHtcbiAgICByZXR1cm4gbWVzc2FnZT8ucm9sZSA9PT0gJ2Fzc2lzdGFudCc7XG59O1xuZXhwb3J0IGNvbnN0IGlzVG9vbE1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgIHJldHVybiBtZXNzYWdlPy5yb2xlID09PSAndG9vbCc7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJlc2VudChvYmopIHtcbiAgICByZXR1cm4gb2JqICE9IG51bGw7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGF0Q29tcGxldGlvblV0aWxzLm1qcy5tYXAiXSwibmFtZXMiOlsiaXNBc3Npc3RhbnRNZXNzYWdlIiwibWVzc2FnZSIsInJvbGUiLCJpc1Rvb2xNZXNzYWdlIiwiaXNQcmVzZW50Iiwib2JqIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/chatCompletionUtils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/parser.mjs":
/*!********************************************!*\
  !*** ./node_modules/openai/lib/parser.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasAutoParseableInput: () => (/* binding */ hasAutoParseableInput),\n/* harmony export */   isAutoParsableResponseFormat: () => (/* binding */ isAutoParsableResponseFormat),\n/* harmony export */   isAutoParsableTool: () => (/* binding */ isAutoParsableTool),\n/* harmony export */   makeParseableResponseFormat: () => (/* binding */ makeParseableResponseFormat),\n/* harmony export */   makeParseableTextFormat: () => (/* binding */ makeParseableTextFormat),\n/* harmony export */   makeParseableTool: () => (/* binding */ makeParseableTool),\n/* harmony export */   maybeParseChatCompletion: () => (/* binding */ maybeParseChatCompletion),\n/* harmony export */   parseChatCompletion: () => (/* binding */ parseChatCompletion),\n/* harmony export */   shouldParseToolCall: () => (/* binding */ shouldParseToolCall),\n/* harmony export */   validateInputTools: () => (/* binding */ validateInputTools)\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n\nfunction makeParseableResponseFormat(response_format, parser) {\n    const obj = {\n        ...response_format\n    };\n    Object.defineProperties(obj, {\n        $brand: {\n            value: \"auto-parseable-response-format\",\n            enumerable: false\n        },\n        $parseRaw: {\n            value: parser,\n            enumerable: false\n        }\n    });\n    return obj;\n}\nfunction makeParseableTextFormat(response_format, parser) {\n    const obj = {\n        ...response_format\n    };\n    Object.defineProperties(obj, {\n        $brand: {\n            value: \"auto-parseable-response-format\",\n            enumerable: false\n        },\n        $parseRaw: {\n            value: parser,\n            enumerable: false\n        }\n    });\n    return obj;\n}\nfunction isAutoParsableResponseFormat(response_format) {\n    return response_format?.[\"$brand\"] === \"auto-parseable-response-format\";\n}\nfunction makeParseableTool(tool, { parser, callback }) {\n    const obj = {\n        ...tool\n    };\n    Object.defineProperties(obj, {\n        $brand: {\n            value: \"auto-parseable-tool\",\n            enumerable: false\n        },\n        $parseRaw: {\n            value: parser,\n            enumerable: false\n        },\n        $callback: {\n            value: callback,\n            enumerable: false\n        }\n    });\n    return obj;\n}\nfunction isAutoParsableTool(tool) {\n    return tool?.[\"$brand\"] === \"auto-parseable-tool\";\n}\nfunction maybeParseChatCompletion(completion, params) {\n    if (!params || !hasAutoParseableInput(params)) {\n        return {\n            ...completion,\n            choices: completion.choices.map((choice)=>({\n                    ...choice,\n                    message: {\n                        ...choice.message,\n                        parsed: null,\n                        ...choice.message.tool_calls ? {\n                            tool_calls: choice.message.tool_calls\n                        } : undefined\n                    }\n                }))\n        };\n    }\n    return parseChatCompletion(completion, params);\n}\nfunction parseChatCompletion(completion, params) {\n    const choices = completion.choices.map((choice)=>{\n        if (choice.finish_reason === \"length\") {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.LengthFinishReasonError();\n        }\n        if (choice.finish_reason === \"content_filter\") {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.ContentFilterFinishReasonError();\n        }\n        return {\n            ...choice,\n            message: {\n                ...choice.message,\n                ...choice.message.tool_calls ? {\n                    tool_calls: choice.message.tool_calls?.map((toolCall)=>parseToolCall(params, toolCall)) ?? undefined\n                } : undefined,\n                parsed: choice.message.content && !choice.message.refusal ? parseResponseFormat(params, choice.message.content) : null\n            }\n        };\n    });\n    return {\n        ...completion,\n        choices\n    };\n}\nfunction parseResponseFormat(params, content) {\n    if (params.response_format?.type !== \"json_schema\") {\n        return null;\n    }\n    if (params.response_format?.type === \"json_schema\") {\n        if (\"$parseRaw\" in params.response_format) {\n            const response_format = params.response_format;\n            return response_format.$parseRaw(content);\n        }\n        return JSON.parse(content);\n    }\n    return null;\n}\nfunction parseToolCall(params, toolCall) {\n    const inputTool = params.tools?.find((inputTool)=>inputTool.function?.name === toolCall.function.name);\n    return {\n        ...toolCall,\n        function: {\n            ...toolCall.function,\n            parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments) : inputTool?.function.strict ? JSON.parse(toolCall.function.arguments) : null\n        }\n    };\n}\nfunction shouldParseToolCall(params, toolCall) {\n    if (!params) {\n        return false;\n    }\n    const inputTool = params.tools?.find((inputTool)=>inputTool.function?.name === toolCall.function.name);\n    return isAutoParsableTool(inputTool) || inputTool?.function.strict || false;\n}\nfunction hasAutoParseableInput(params) {\n    if (isAutoParsableResponseFormat(params.response_format)) {\n        return true;\n    }\n    return params.tools?.some((t)=>isAutoParsableTool(t) || t.type === \"function\" && t.function.strict === true) ?? false;\n}\nfunction validateInputTools(tools) {\n    for (const tool of tools ?? []){\n        if (tool.type !== \"function\") {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``);\n        }\n        if (tool.function.strict !== true) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`);\n        }\n    }\n} //# sourceMappingURL=parser.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/parser.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/responses/ResponseStream.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/openai/lib/responses/ResponseStream.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResponseStream: () => (/* binding */ ResponseStream)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../internal/tslib.mjs */ \"(rsc)/./node_modules/openai/internal/tslib.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _EventStream_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../EventStream.mjs */ \"(rsc)/./node_modules/openai/lib/EventStream.mjs\");\n/* harmony import */ var _ResponsesParser_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ResponsesParser.mjs */ \"(rsc)/./node_modules/openai/lib/ResponsesParser.mjs\");\nvar _ResponseStream_instances, _ResponseStream_params, _ResponseStream_currentResponseSnapshot, _ResponseStream_finalResponse, _ResponseStream_beginRequest, _ResponseStream_addEvent, _ResponseStream_endRequest, _ResponseStream_accumulateResponse;\n\n\n\n\nclass ResponseStream extends _EventStream_mjs__WEBPACK_IMPORTED_MODULE_2__.EventStream {\n    constructor(params){\n        super();\n        _ResponseStream_instances.add(this);\n        _ResponseStream_params.set(this, void 0);\n        _ResponseStream_currentResponseSnapshot.set(this, void 0);\n        _ResponseStream_finalResponse.set(this, void 0);\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _ResponseStream_params, params, \"f\");\n    }\n    static createResponse(client, params, options) {\n        const runner = new ResponseStream(params);\n        runner._run(()=>runner._createOrRetrieveResponse(client, params, {\n                ...options,\n                headers: {\n                    ...options?.headers,\n                    \"X-Stainless-Helper-Method\": \"stream\"\n                }\n            }));\n        return runner;\n    }\n    async _createOrRetrieveResponse(client, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ResponseStream_instances, \"m\", _ResponseStream_beginRequest).call(this);\n        let stream;\n        let starting_after = null;\n        if (\"response_id\" in params) {\n            stream = await client.responses.retrieve(params.response_id, {\n                stream: true\n            }, {\n                ...options,\n                signal: this.controller.signal,\n                stream: true\n            });\n            starting_after = params.starting_after ?? null;\n        } else {\n            stream = await client.responses.create({\n                ...params,\n                stream: true\n            }, {\n                ...options,\n                signal: this.controller.signal\n            });\n        }\n        this._connected();\n        for await (const event of stream){\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ResponseStream_instances, \"m\", _ResponseStream_addEvent).call(this, event, starting_after);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError();\n        }\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ResponseStream_instances, \"m\", _ResponseStream_endRequest).call(this);\n    }\n    [(_ResponseStream_params = new WeakMap(), _ResponseStream_currentResponseSnapshot = new WeakMap(), _ResponseStream_finalResponse = new WeakMap(), _ResponseStream_instances = new WeakSet(), _ResponseStream_beginRequest = function _ResponseStream_beginRequest() {\n        if (this.ended) return;\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _ResponseStream_currentResponseSnapshot, undefined, \"f\");\n    }, _ResponseStream_addEvent = function _ResponseStream_addEvent(event, starting_after) {\n        if (this.ended) return;\n        const maybeEmit = (name, event)=>{\n            if (starting_after == null || event.sequence_number > starting_after) {\n                this._emit(name, event);\n            }\n        };\n        const response = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ResponseStream_instances, \"m\", _ResponseStream_accumulateResponse).call(this, event);\n        maybeEmit(\"event\", event);\n        switch(event.type){\n            case \"response.output_text.delta\":\n                {\n                    const output = response.output[event.output_index];\n                    if (!output) {\n                        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing output at index ${event.output_index}`);\n                    }\n                    if (output.type === \"message\") {\n                        const content = output.content[event.content_index];\n                        if (!content) {\n                            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing content at index ${event.content_index}`);\n                        }\n                        if (content.type !== \"output_text\") {\n                            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`expected content to be 'output_text', got ${content.type}`);\n                        }\n                        maybeEmit(\"response.output_text.delta\", {\n                            ...event,\n                            snapshot: content.text\n                        });\n                    }\n                    break;\n                }\n            case \"response.function_call_arguments.delta\":\n                {\n                    const output = response.output[event.output_index];\n                    if (!output) {\n                        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing output at index ${event.output_index}`);\n                    }\n                    if (output.type === \"function_call\") {\n                        maybeEmit(\"response.function_call_arguments.delta\", {\n                            ...event,\n                            snapshot: output.arguments\n                        });\n                    }\n                    break;\n                }\n            default:\n                maybeEmit(event.type, event);\n                break;\n        }\n    }, _ResponseStream_endRequest = function _ResponseStream_endRequest() {\n        if (this.ended) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`stream has ended, this shouldn't happen`);\n        }\n        const snapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ResponseStream_currentResponseSnapshot, \"f\");\n        if (!snapshot) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`request ended without sending any events`);\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _ResponseStream_currentResponseSnapshot, undefined, \"f\");\n        const parsedResponse = finalizeResponse(snapshot, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ResponseStream_params, \"f\"));\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _ResponseStream_finalResponse, parsedResponse, \"f\");\n        return parsedResponse;\n    }, _ResponseStream_accumulateResponse = function _ResponseStream_accumulateResponse(event) {\n        let snapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ResponseStream_currentResponseSnapshot, \"f\");\n        if (!snapshot) {\n            if (event.type !== \"response.created\") {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`When snapshot hasn't been set yet, expected 'response.created' event, got ${event.type}`);\n            }\n            snapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _ResponseStream_currentResponseSnapshot, event.response, \"f\");\n            return snapshot;\n        }\n        switch(event.type){\n            case \"response.output_item.added\":\n                {\n                    snapshot.output.push(event.item);\n                    break;\n                }\n            case \"response.content_part.added\":\n                {\n                    const output = snapshot.output[event.output_index];\n                    if (!output) {\n                        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing output at index ${event.output_index}`);\n                    }\n                    if (output.type === \"message\") {\n                        output.content.push(event.part);\n                    }\n                    break;\n                }\n            case \"response.output_text.delta\":\n                {\n                    const output = snapshot.output[event.output_index];\n                    if (!output) {\n                        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing output at index ${event.output_index}`);\n                    }\n                    if (output.type === \"message\") {\n                        const content = output.content[event.content_index];\n                        if (!content) {\n                            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing content at index ${event.content_index}`);\n                        }\n                        if (content.type !== \"output_text\") {\n                            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`expected content to be 'output_text', got ${content.type}`);\n                        }\n                        content.text += event.delta;\n                    }\n                    break;\n                }\n            case \"response.function_call_arguments.delta\":\n                {\n                    const output = snapshot.output[event.output_index];\n                    if (!output) {\n                        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing output at index ${event.output_index}`);\n                    }\n                    if (output.type === \"function_call\") {\n                        output.arguments += event.delta;\n                    }\n                    break;\n                }\n            case \"response.completed\":\n                {\n                    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _ResponseStream_currentResponseSnapshot, event.response, \"f\");\n                    break;\n                }\n        }\n        return snapshot;\n    }, Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        this.on(\"event\", (event)=>{\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(event);\n            } else {\n                pushQueue.push(event);\n            }\n        });\n        this.on(\"end\", ()=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on(\"abort\", (err)=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on(\"error\", (err)=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async ()=>{\n                if (!pushQueue.length) {\n                    if (done) {\n                        return {\n                            value: undefined,\n                            done: true\n                        };\n                    }\n                    return new Promise((resolve, reject)=>readQueue.push({\n                            resolve,\n                            reject\n                        })).then((event)=>event ? {\n                            value: event,\n                            done: false\n                        } : {\n                            value: undefined,\n                            done: true\n                        });\n                }\n                const event = pushQueue.shift();\n                return {\n                    value: event,\n                    done: false\n                };\n            },\n            return: async ()=>{\n                this.abort();\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n        };\n    }\n    /**\n     * @returns a promise that resolves with the final Response, or rejects\n     * if an error occurred or the stream ended prematurely without producing a REsponse.\n     */ async finalResponse() {\n        await this.done();\n        const response = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _ResponseStream_finalResponse, \"f\");\n        if (!response) throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"stream ended without producing a ChatCompletion\");\n        return response;\n    }\n}\nfunction finalizeResponse(snapshot, params) {\n    return (0,_ResponsesParser_mjs__WEBPACK_IMPORTED_MODULE_3__.maybeParseResponse)(snapshot, params);\n} //# sourceMappingURL=ResponseStream.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/responses/ResponseStream.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/audio/audio.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/audio/audio.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Audio: () => (/* binding */ Audio)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _speech_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./speech.mjs */ \"(rsc)/./node_modules/openai/resources/audio/speech.mjs\");\n/* harmony import */ var _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transcriptions.mjs */ \"(rsc)/./node_modules/openai/resources/audio/transcriptions.mjs\");\n/* harmony import */ var _translations_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./translations.mjs */ \"(rsc)/./node_modules/openai/resources/audio/translations.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass Audio extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.transcriptions = new _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_2__.Transcriptions(this._client);\n        this.translations = new _translations_mjs__WEBPACK_IMPORTED_MODULE_3__.Translations(this._client);\n        this.speech = new _speech_mjs__WEBPACK_IMPORTED_MODULE_1__.Speech(this._client);\n    }\n}\nAudio.Transcriptions = _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_2__.Transcriptions;\nAudio.Translations = _translations_mjs__WEBPACK_IMPORTED_MODULE_3__.Translations;\nAudio.Speech = _speech_mjs__WEBPACK_IMPORTED_MODULE_1__.Speech; //# sourceMappingURL=audio.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby9hdWRpby5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDaEM7QUFDWjtBQUNKO0FBQ29CO0FBQ0g7QUFDRDtBQUNIO0FBQzVDLE1BQU1PLGNBQWNQLDJEQUFXQTtJQUNsQ1EsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLGNBQWMsR0FBRyxJQUFJUCwrREFBZ0MsQ0FBQyxJQUFJLENBQUNRLE9BQU87UUFDdkUsSUFBSSxDQUFDQyxZQUFZLEdBQUcsSUFBSVAsMkRBQTRCLENBQUMsSUFBSSxDQUFDTSxPQUFPO1FBQ2pFLElBQUksQ0FBQ0UsTUFBTSxHQUFHLElBQUlaLCtDQUFnQixDQUFDLElBQUksQ0FBQ1UsT0FBTztJQUNuRDtBQUNKO0FBQ0FKLE1BQU1ILGNBQWMsR0FBR0EsK0RBQWNBO0FBQ3JDRyxNQUFNRCxZQUFZLEdBQUdBLDJEQUFZQTtBQUNqQ0MsTUFBTUwsTUFBTSxHQUFHQSwrQ0FBTUEsRUFDckIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby9hdWRpby5tanM/ZGE1NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIFNwZWVjaEFQSSBmcm9tIFwiLi9zcGVlY2gubWpzXCI7XG5pbXBvcnQgeyBTcGVlY2ggfSBmcm9tIFwiLi9zcGVlY2gubWpzXCI7XG5pbXBvcnQgKiBhcyBUcmFuc2NyaXB0aW9uc0FQSSBmcm9tIFwiLi90cmFuc2NyaXB0aW9ucy5tanNcIjtcbmltcG9ydCB7IFRyYW5zY3JpcHRpb25zLCB9IGZyb20gXCIuL3RyYW5zY3JpcHRpb25zLm1qc1wiO1xuaW1wb3J0ICogYXMgVHJhbnNsYXRpb25zQVBJIGZyb20gXCIuL3RyYW5zbGF0aW9ucy5tanNcIjtcbmltcG9ydCB7IFRyYW5zbGF0aW9ucywgfSBmcm9tIFwiLi90cmFuc2xhdGlvbnMubWpzXCI7XG5leHBvcnQgY2xhc3MgQXVkaW8gZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudHJhbnNjcmlwdGlvbnMgPSBuZXcgVHJhbnNjcmlwdGlvbnNBUEkuVHJhbnNjcmlwdGlvbnModGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy50cmFuc2xhdGlvbnMgPSBuZXcgVHJhbnNsYXRpb25zQVBJLlRyYW5zbGF0aW9ucyh0aGlzLl9jbGllbnQpO1xuICAgICAgICB0aGlzLnNwZWVjaCA9IG5ldyBTcGVlY2hBUEkuU3BlZWNoKHRoaXMuX2NsaWVudCk7XG4gICAgfVxufVxuQXVkaW8uVHJhbnNjcmlwdGlvbnMgPSBUcmFuc2NyaXB0aW9ucztcbkF1ZGlvLlRyYW5zbGF0aW9ucyA9IFRyYW5zbGF0aW9ucztcbkF1ZGlvLlNwZWVjaCA9IFNwZWVjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1ZGlvLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJTcGVlY2hBUEkiLCJTcGVlY2giLCJUcmFuc2NyaXB0aW9uc0FQSSIsIlRyYW5zY3JpcHRpb25zIiwiVHJhbnNsYXRpb25zQVBJIiwiVHJhbnNsYXRpb25zIiwiQXVkaW8iLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsInRyYW5zY3JpcHRpb25zIiwiX2NsaWVudCIsInRyYW5zbGF0aW9ucyIsInNwZWVjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/audio/audio.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/audio/speech.mjs":
/*!********************************************************!*\
  !*** ./node_modules/openai/resources/audio/speech.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Speech: () => (/* binding */ Speech)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Speech extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Generates audio from the input text.\n     *\n     * @example\n     * ```ts\n     * const speech = await client.audio.speech.create({\n     *   input: 'input',\n     *   model: 'string',\n     *   voice: 'ash',\n     * });\n     *\n     * const content = await speech.blob();\n     * console.log(content);\n     * ```\n     */ create(body, options) {\n        return this._client.post(\"/audio/speech\", {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_1__.buildHeaders)([\n                {\n                    Accept: \"application/octet-stream\"\n                },\n                options?.headers\n            ]),\n            __binaryResponse: true\n        });\n    }\n} //# sourceMappingURL=speech.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby9zcGVlY2gubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNGQUFzRjtBQUNoQztBQUNJO0FBQ25ELE1BQU1FLGVBQWVGLDJEQUFXQTtJQUNuQzs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNERyxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsaUJBQWlCO1lBQ3RDSDtZQUNBLEdBQUdDLE9BQU87WUFDVkcsU0FBU1AsbUVBQVlBLENBQUM7Z0JBQUM7b0JBQUVRLFFBQVE7Z0JBQTJCO2dCQUFHSixTQUFTRzthQUFRO1lBQ2hGRSxrQkFBa0I7UUFDdEI7SUFDSjtBQUNKLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby9zcGVlY2gubWpzPzljYjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBidWlsZEhlYWRlcnMgfSBmcm9tIFwiLi4vLi4vaW50ZXJuYWwvaGVhZGVycy5tanNcIjtcbmV4cG9ydCBjbGFzcyBTcGVlY2ggZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGF1ZGlvIGZyb20gdGhlIGlucHV0IHRleHQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3Qgc3BlZWNoID0gYXdhaXQgY2xpZW50LmF1ZGlvLnNwZWVjaC5jcmVhdGUoe1xuICAgICAqICAgaW5wdXQ6ICdpbnB1dCcsXG4gICAgICogICBtb2RlbDogJ3N0cmluZycsXG4gICAgICogICB2b2ljZTogJ2FzaCcsXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBjb25zdCBjb250ZW50ID0gYXdhaXQgc3BlZWNoLmJsb2IoKTtcbiAgICAgKiBjb25zb2xlLmxvZyhjb250ZW50KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9hdWRpby9zcGVlY2gnLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbeyBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIH0sIG9wdGlvbnM/LmhlYWRlcnNdKSxcbiAgICAgICAgICAgIF9fYmluYXJ5UmVzcG9uc2U6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwZWVjaC5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiYnVpbGRIZWFkZXJzIiwiU3BlZWNoIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsImhlYWRlcnMiLCJBY2NlcHQiLCJfX2JpbmFyeVJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/audio/speech.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/audio/transcriptions.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/openai/resources/audio/transcriptions.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transcriptions: () => (/* binding */ Transcriptions)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../internal/uploads.mjs */ \"(rsc)/./node_modules/openai/internal/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Transcriptions extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(body, options) {\n        return this._client.post(\"/audio/transcriptions\", (0,_internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options,\n            stream: body.stream ?? false,\n            __metadata: {\n                model: body.model\n            }\n        }, this._client));\n    }\n} //# sourceMappingURL=transcriptions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2NyaXB0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ2hDO0FBQ21CO0FBQ2xFLE1BQU1FLHVCQUF1QkYsMkRBQVdBO0lBQzNDRyxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMseUJBQXlCTixrRkFBMkJBLENBQUM7WUFDMUVHO1lBQ0EsR0FBR0MsT0FBTztZQUNWRyxRQUFRSixLQUFLSSxNQUFNLElBQUk7WUFDdkJDLFlBQVk7Z0JBQUVDLE9BQU9OLEtBQUtNLEtBQUs7WUFBQztRQUNwQyxHQUFHLElBQUksQ0FBQ0osT0FBTztJQUNuQjtBQUNKLEVBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2NyaXB0aW9ucy5tanM/NWZjOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IG11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCIuLi8uLi9pbnRlcm5hbC91cGxvYWRzLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFRyYW5zY3JpcHRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2F1ZGlvL3RyYW5zY3JpcHRpb25zJywgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgc3RyZWFtOiBib2R5LnN0cmVhbSA/PyBmYWxzZSxcbiAgICAgICAgICAgIF9fbWV0YWRhdGE6IHsgbW9kZWw6IGJvZHkubW9kZWwgfSxcbiAgICAgICAgfSwgdGhpcy5fY2xpZW50KSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNjcmlwdGlvbnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyIsIlRyYW5zY3JpcHRpb25zIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsInN0cmVhbSIsIl9fbWV0YWRhdGEiLCJtb2RlbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/audio/transcriptions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/audio/translations.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/openai/resources/audio/translations.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Translations: () => (/* binding */ Translations)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../internal/uploads.mjs */ \"(rsc)/./node_modules/openai/internal/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Translations extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(body, options) {\n        return this._client.post(\"/audio/translations\", (0,_internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options,\n            __metadata: {\n                model: body.model\n            }\n        }, this._client));\n    }\n} //# sourceMappingURL=translations.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2xhdGlvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNGQUFzRjtBQUNoQztBQUNtQjtBQUNsRSxNQUFNRSxxQkFBcUJGLDJEQUFXQTtJQUN6Q0csT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLHVCQUF1Qk4sa0ZBQTJCQSxDQUFDO1lBQUVHO1lBQU0sR0FBR0MsT0FBTztZQUFFRyxZQUFZO2dCQUFFQyxPQUFPTCxLQUFLSyxLQUFLO1lBQUM7UUFBRSxHQUFHLElBQUksQ0FBQ0gsT0FBTztJQUNySjtBQUNKLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2xhdGlvbnMubWpzPzRjMWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vaW50ZXJuYWwvdXBsb2Fkcy5tanNcIjtcbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGlvbnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvYXVkaW8vdHJhbnNsYXRpb25zJywgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHsgYm9keSwgLi4ub3B0aW9ucywgX19tZXRhZGF0YTogeyBtb2RlbDogYm9keS5tb2RlbCB9IH0sIHRoaXMuX2NsaWVudCkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zbGF0aW9ucy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwibXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zIiwiVHJhbnNsYXRpb25zIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsIl9fbWV0YWRhdGEiLCJtb2RlbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/audio/translations.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/batches.mjs":
/*!***************************************************!*\
  !*** ./node_modules/openai/resources/batches.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Batches: () => (/* binding */ Batches)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Batches extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates and executes a batch from an uploaded file of requests\n     */ create(body, options) {\n        return this._client.post(\"/batches\", {\n            body,\n            ...options\n        });\n    }\n    /**\n     * Retrieves a batch.\n     */ retrieve(batchID, options) {\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/batches/${batchID}`, options);\n    }\n    /**\n     * List your organization's batches.\n     */ list(query = {}, options) {\n        return this._client.getAPIList(\"/batches\", _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.CursorPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Cancels an in-progress batch. The batch will be in status `cancelling` for up to\n     * 10 minutes, before changing to `cancelled`, where it will have partial results\n     * (if any) available in the output file.\n     */ cancel(batchID, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/batches/${batchID}/cancel`, options);\n    }\n} //# sourceMappingURL=batches.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iYXRjaGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ25DO0FBQ0M7QUFDRjtBQUMzQyxNQUFNRyxnQkFBZ0JILDJEQUFXQTtJQUNwQzs7S0FFQyxHQUNESSxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsWUFBWTtZQUFFSDtZQUFNLEdBQUdDLE9BQU87UUFBQztJQUM1RDtJQUNBOztLQUVDLEdBQ0RHLFNBQVNDLE9BQU8sRUFBRUosT0FBTyxFQUFFO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNJLEdBQUcsQ0FBQ1QsMERBQUssQ0FBQyxTQUFTLEVBQUVRLFFBQVEsQ0FBQyxFQUFFSjtJQUN4RDtJQUNBOztLQUVDLEdBQ0RNLEtBQUtDLFFBQVEsQ0FBQyxDQUFDLEVBQUVQLE9BQU8sRUFBRTtRQUN0QixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDTyxVQUFVLENBQUMsWUFBYWIsNERBQVVBLEVBQUc7WUFBRVk7WUFBTyxHQUFHUCxPQUFPO1FBQUM7SUFDakY7SUFDQTs7OztLQUlDLEdBQ0RTLE9BQU9MLE9BQU8sRUFBRUosT0FBTyxFQUFFO1FBQ3JCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQ04sMERBQUssQ0FBQyxTQUFTLEVBQUVRLFFBQVEsT0FBTyxDQUFDLEVBQUVKO0lBQ2hFO0FBQ0osRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JhdGNoZXMubWpzP2M0OTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uL2NvcmUvcGFnaW5hdGlvbi5tanNcIjtcbmltcG9ydCB7IHBhdGggfSBmcm9tIFwiLi4vaW50ZXJuYWwvdXRpbHMvcGF0aC5tanNcIjtcbmV4cG9ydCBjbGFzcyBCYXRjaGVzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGV4ZWN1dGVzIGEgYmF0Y2ggZnJvbSBhbiB1cGxvYWRlZCBmaWxlIG9mIHJlcXVlc3RzXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvYmF0Y2hlcycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgYmF0Y2guXG4gICAgICovXG4gICAgcmV0cmlldmUoYmF0Y2hJRCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChwYXRoIGAvYmF0Y2hlcy8ke2JhdGNoSUR9YCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpc3QgeW91ciBvcmdhbml6YXRpb24ncyBiYXRjaGVzLlxuICAgICAqL1xuICAgIGxpc3QocXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoJy9iYXRjaGVzJywgKEN1cnNvclBhZ2UpLCB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIGFuIGluLXByb2dyZXNzIGJhdGNoLiBUaGUgYmF0Y2ggd2lsbCBiZSBpbiBzdGF0dXMgYGNhbmNlbGxpbmdgIGZvciB1cCB0b1xuICAgICAqIDEwIG1pbnV0ZXMsIGJlZm9yZSBjaGFuZ2luZyB0byBgY2FuY2VsbGVkYCwgd2hlcmUgaXQgd2lsbCBoYXZlIHBhcnRpYWwgcmVzdWx0c1xuICAgICAqIChpZiBhbnkpIGF2YWlsYWJsZSBpbiB0aGUgb3V0cHV0IGZpbGUuXG4gICAgICovXG4gICAgY2FuY2VsKGJhdGNoSUQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KHBhdGggYC9iYXRjaGVzLyR7YmF0Y2hJRH0vY2FuY2VsYCwgb3B0aW9ucyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmF0Y2hlcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ3Vyc29yUGFnZSIsInBhdGgiLCJCYXRjaGVzIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsInJldHJpZXZlIiwiYmF0Y2hJRCIsImdldCIsImxpc3QiLCJxdWVyeSIsImdldEFQSUxpc3QiLCJjYW5jZWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/batches.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/assistants.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/openai/resources/beta/assistants.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Assistants: () => (/* binding */ Assistants)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\nclass Assistants extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Create an assistant with a model and instructions.\n     *\n     * @example\n     * ```ts\n     * const assistant = await client.beta.assistants.create({\n     *   model: 'gpt-4o',\n     * });\n     * ```\n     */ create(body, options) {\n        return this._client.post(\"/assistants\", {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Retrieves an assistant.\n     *\n     * @example\n     * ```ts\n     * const assistant = await client.beta.assistants.retrieve(\n     *   'assistant_id',\n     * );\n     * ```\n     */ retrieve(assistantID, options) {\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/assistants/${assistantID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Modifies an assistant.\n     *\n     * @example\n     * ```ts\n     * const assistant = await client.beta.assistants.update(\n     *   'assistant_id',\n     * );\n     * ```\n     */ update(assistantID, body, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/assistants/${assistantID}`, {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Returns a list of assistants.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const assistant of client.beta.assistants.list()) {\n     *   // ...\n     * }\n     * ```\n     */ list(query = {}, options) {\n        return this._client.getAPIList(\"/assistants\", _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.CursorPage, {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Delete an assistant.\n     *\n     * @example\n     * ```ts\n     * const assistantDeleted =\n     *   await client.beta.assistants.delete('assistant_id');\n     * ```\n     */ delete(assistantID, options) {\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/assistants/${assistantID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n} //# sourceMappingURL=assistants.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2Fzc2lzdGFudHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ2hDO0FBQ0M7QUFDRztBQUNMO0FBQzlDLE1BQU1JLG1CQUFtQkosMkRBQVdBO0lBQ3ZDOzs7Ozs7Ozs7S0FTQyxHQUNESyxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsZUFBZTtZQUNwQ0g7WUFDQSxHQUFHQyxPQUFPO1lBQ1ZHLFNBQVNSLG1FQUFZQSxDQUFDO2dCQUFDO29CQUFFLGVBQWU7Z0JBQWdCO2dCQUFHSyxTQUFTRzthQUFRO1FBQ2hGO0lBQ0o7SUFDQTs7Ozs7Ozs7O0tBU0MsR0FDREMsU0FBU0MsV0FBVyxFQUFFTCxPQUFPLEVBQUU7UUFDM0IsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0ssR0FBRyxDQUFDViwwREFBSyxDQUFDLFlBQVksRUFBRVMsWUFBWSxDQUFDLEVBQUU7WUFDdkQsR0FBR0wsT0FBTztZQUNWRyxTQUFTUixtRUFBWUEsQ0FBQztnQkFBQztvQkFBRSxlQUFlO2dCQUFnQjtnQkFBR0ssU0FBU0c7YUFBUTtRQUNoRjtJQUNKO0lBQ0E7Ozs7Ozs7OztLQVNDLEdBQ0RJLE9BQU9GLFdBQVcsRUFBRU4sSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDL0IsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDTiwwREFBSyxDQUFDLFlBQVksRUFBRVMsWUFBWSxDQUFDLEVBQUU7WUFDeEROO1lBQ0EsR0FBR0MsT0FBTztZQUNWRyxTQUFTUixtRUFBWUEsQ0FBQztnQkFBQztvQkFBRSxlQUFlO2dCQUFnQjtnQkFBR0ssU0FBU0c7YUFBUTtRQUNoRjtJQUNKO0lBQ0E7Ozs7Ozs7Ozs7S0FVQyxHQUNESyxLQUFLQyxRQUFRLENBQUMsQ0FBQyxFQUFFVCxPQUFPLEVBQUU7UUFDdEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ1MsVUFBVSxDQUFDLGVBQWdCaEIsNERBQVVBLEVBQUc7WUFDeERlO1lBQ0EsR0FBR1QsT0FBTztZQUNWRyxTQUFTUixtRUFBWUEsQ0FBQztnQkFBQztvQkFBRSxlQUFlO2dCQUFnQjtnQkFBR0ssU0FBU0c7YUFBUTtRQUNoRjtJQUNKO0lBQ0E7Ozs7Ozs7O0tBUUMsR0FDRFEsT0FBT04sV0FBVyxFQUFFTCxPQUFPLEVBQUU7UUFDekIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ1UsTUFBTSxDQUFDZiwwREFBSyxDQUFDLFlBQVksRUFBRVMsWUFBWSxDQUFDLEVBQUU7WUFDMUQsR0FBR0wsT0FBTztZQUNWRyxTQUFTUixtRUFBWUEsQ0FBQztnQkFBQztvQkFBRSxlQUFlO2dCQUFnQjtnQkFBR0ssU0FBU0c7YUFBUTtRQUNoRjtJQUNKO0FBQ0osRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvYXNzaXN0YW50cy5tanM/NDUzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tIFwiLi4vLi4vY29yZS9wYWdpbmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgYnVpbGRIZWFkZXJzIH0gZnJvbSBcIi4uLy4uL2ludGVybmFsL2hlYWRlcnMubWpzXCI7XG5pbXBvcnQgeyBwYXRoIH0gZnJvbSBcIi4uLy4uL2ludGVybmFsL3V0aWxzL3BhdGgubWpzXCI7XG5leHBvcnQgY2xhc3MgQXNzaXN0YW50cyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gYXNzaXN0YW50IHdpdGggYSBtb2RlbCBhbmQgaW5zdHJ1Y3Rpb25zLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IGFzc2lzdGFudCA9IGF3YWl0IGNsaWVudC5iZXRhLmFzc2lzdGFudHMuY3JlYXRlKHtcbiAgICAgKiAgIG1vZGVsOiAnZ3B0LTRvJyxcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9hc3Npc3RhbnRzJywge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW3sgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInIH0sIG9wdGlvbnM/LmhlYWRlcnNdKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhbiBhc3Npc3RhbnQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3QgYXNzaXN0YW50ID0gYXdhaXQgY2xpZW50LmJldGEuYXNzaXN0YW50cy5yZXRyaWV2ZShcbiAgICAgKiAgICdhc3Npc3RhbnRfaWQnLFxuICAgICAqICk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcmV0cmlldmUoYXNzaXN0YW50SUQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQocGF0aCBgL2Fzc2lzdGFudHMvJHthc3Npc3RhbnRJRH1gLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFt7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJyB9LCBvcHRpb25zPy5oZWFkZXJzXSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb2RpZmllcyBhbiBhc3Npc3RhbnQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3QgYXNzaXN0YW50ID0gYXdhaXQgY2xpZW50LmJldGEuYXNzaXN0YW50cy51cGRhdGUoXG4gICAgICogICAnYXNzaXN0YW50X2lkJyxcbiAgICAgKiApO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHVwZGF0ZShhc3Npc3RhbnRJRCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QocGF0aCBgL2Fzc2lzdGFudHMvJHthc3Npc3RhbnRJRH1gLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicgfSwgb3B0aW9ucz8uaGVhZGVyc10pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgYXNzaXN0YW50cy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiAvLyBBdXRvbWF0aWNhbGx5IGZldGNoZXMgbW9yZSBwYWdlcyBhcyBuZWVkZWQuXG4gICAgICogZm9yIGF3YWl0IChjb25zdCBhc3Npc3RhbnQgb2YgY2xpZW50LmJldGEuYXNzaXN0YW50cy5saXN0KCkpIHtcbiAgICAgKiAgIC8vIC4uLlxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBsaXN0KHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvYXNzaXN0YW50cycsIChDdXJzb3JQYWdlKSwge1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFt7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJyB9LCBvcHRpb25zPy5oZWFkZXJzXSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYW4gYXNzaXN0YW50LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IGFzc2lzdGFudERlbGV0ZWQgPVxuICAgICAqICAgYXdhaXQgY2xpZW50LmJldGEuYXNzaXN0YW50cy5kZWxldGUoJ2Fzc2lzdGFudF9pZCcpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGRlbGV0ZShhc3Npc3RhbnRJRCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShwYXRoIGAvYXNzaXN0YW50cy8ke2Fzc2lzdGFudElEfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW3sgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInIH0sIG9wdGlvbnM/LmhlYWRlcnNdKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXNzaXN0YW50cy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ3Vyc29yUGFnZSIsImJ1aWxkSGVhZGVycyIsInBhdGgiLCJBc3Npc3RhbnRzIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsImhlYWRlcnMiLCJyZXRyaWV2ZSIsImFzc2lzdGFudElEIiwiZ2V0IiwidXBkYXRlIiwibGlzdCIsInF1ZXJ5IiwiZ2V0QVBJTGlzdCIsImRlbGV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/assistants.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/beta.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/resources/beta/beta.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Beta: () => (/* binding */ Beta)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _assistants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assistants.mjs */ \"(rsc)/./node_modules/openai/resources/beta/assistants.mjs\");\n/* harmony import */ var _realtime_realtime_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./realtime/realtime.mjs */ \"(rsc)/./node_modules/openai/resources/beta/realtime/realtime.mjs\");\n/* harmony import */ var _threads_threads_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./threads/threads.mjs */ \"(rsc)/./node_modules/openai/resources/beta/threads/threads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass Beta extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.realtime = new _realtime_realtime_mjs__WEBPACK_IMPORTED_MODULE_2__.Realtime(this._client);\n        this.assistants = new _assistants_mjs__WEBPACK_IMPORTED_MODULE_1__.Assistants(this._client);\n        this.threads = new _threads_threads_mjs__WEBPACK_IMPORTED_MODULE_3__.Threads(this._client);\n    }\n}\nBeta.Realtime = _realtime_realtime_mjs__WEBPACK_IMPORTED_MODULE_2__.Realtime;\nBeta.Assistants = _assistants_mjs__WEBPACK_IMPORTED_MODULE_1__.Assistants;\nBeta.Threads = _threads_threads_mjs__WEBPACK_IMPORTED_MODULE_3__.Threads; //# sourceMappingURL=beta.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2JldGEubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ2hDO0FBQ0o7QUFDSDtBQUNRO0FBQ0g7QUFDQTtBQUNIO0FBQzFDLE1BQU1PLGFBQWFQLDJEQUFXQTtJQUNqQ1EsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJUCw0REFBb0IsQ0FBQyxJQUFJLENBQUNRLE9BQU87UUFDckQsSUFBSSxDQUFDQyxVQUFVLEdBQUcsSUFBSVgsdURBQXdCLENBQUMsSUFBSSxDQUFDVSxPQUFPO1FBQzNELElBQUksQ0FBQ0UsT0FBTyxHQUFHLElBQUlSLHlEQUFrQixDQUFDLElBQUksQ0FBQ00sT0FBTztJQUN0RDtBQUNKO0FBQ0FKLEtBQUtILFFBQVEsR0FBR0EsNERBQVFBO0FBQ3hCRyxLQUFLTCxVQUFVLEdBQUdBLHVEQUFVQTtBQUM1QkssS0FBS0QsT0FBTyxHQUFHQSx5REFBT0EsRUFDdEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2JldGEubWpzP2Y5MjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBBc3Npc3RhbnRzQVBJIGZyb20gXCIuL2Fzc2lzdGFudHMubWpzXCI7XG5pbXBvcnQgeyBBc3Npc3RhbnRzLCB9IGZyb20gXCIuL2Fzc2lzdGFudHMubWpzXCI7XG5pbXBvcnQgKiBhcyBSZWFsdGltZUFQSSBmcm9tIFwiLi9yZWFsdGltZS9yZWFsdGltZS5tanNcIjtcbmltcG9ydCB7IFJlYWx0aW1lLCB9IGZyb20gXCIuL3JlYWx0aW1lL3JlYWx0aW1lLm1qc1wiO1xuaW1wb3J0ICogYXMgVGhyZWFkc0FQSSBmcm9tIFwiLi90aHJlYWRzL3RocmVhZHMubWpzXCI7XG5pbXBvcnQgeyBUaHJlYWRzLCB9IGZyb20gXCIuL3RocmVhZHMvdGhyZWFkcy5tanNcIjtcbmV4cG9ydCBjbGFzcyBCZXRhIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnJlYWx0aW1lID0gbmV3IFJlYWx0aW1lQVBJLlJlYWx0aW1lKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMuYXNzaXN0YW50cyA9IG5ldyBBc3Npc3RhbnRzQVBJLkFzc2lzdGFudHModGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy50aHJlYWRzID0gbmV3IFRocmVhZHNBUEkuVGhyZWFkcyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbn1cbkJldGEuUmVhbHRpbWUgPSBSZWFsdGltZTtcbkJldGEuQXNzaXN0YW50cyA9IEFzc2lzdGFudHM7XG5CZXRhLlRocmVhZHMgPSBUaHJlYWRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmV0YS5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQXNzaXN0YW50c0FQSSIsIkFzc2lzdGFudHMiLCJSZWFsdGltZUFQSSIsIlJlYWx0aW1lIiwiVGhyZWFkc0FQSSIsIlRocmVhZHMiLCJCZXRhIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJyZWFsdGltZSIsIl9jbGllbnQiLCJhc3Npc3RhbnRzIiwidGhyZWFkcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/beta.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/realtime/realtime.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/realtime/realtime.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Realtime: () => (/* binding */ Realtime)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _sessions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sessions.mjs */ \"(rsc)/./node_modules/openai/resources/beta/realtime/sessions.mjs\");\n/* harmony import */ var _transcription_sessions_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transcription-sessions.mjs */ \"(rsc)/./node_modules/openai/resources/beta/realtime/transcription-sessions.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass Realtime extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.sessions = new _sessions_mjs__WEBPACK_IMPORTED_MODULE_1__.Sessions(this._client);\n        this.transcriptionSessions = new _transcription_sessions_mjs__WEBPACK_IMPORTED_MODULE_2__.TranscriptionSessions(this._client);\n    }\n}\nRealtime.Sessions = _sessions_mjs__WEBPACK_IMPORTED_MODULE_1__.Sessions;\nRealtime.TranscriptionSessions = _transcription_sessions_mjs__WEBPACK_IMPORTED_MODULE_2__.TranscriptionSessions; //# sourceMappingURL=realtime.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3JlYWx0aW1lL3JlYWx0aW1lLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsc0ZBQXNGO0FBQzdCO0FBQ1g7QUFDSDtBQUM4QjtBQUNIO0FBQy9ELE1BQU1LLGlCQUFpQkwsMkRBQVdBO0lBQ3JDTSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlQLG1EQUFvQixDQUFDLElBQUksQ0FBQ1EsT0FBTztRQUNyRCxJQUFJLENBQUNDLHFCQUFxQixHQUFHLElBQUlQLDhFQUE4QyxDQUFDLElBQUksQ0FBQ00sT0FBTztJQUNoRztBQUNKO0FBQ0FKLFNBQVNILFFBQVEsR0FBR0EsbURBQVFBO0FBQzVCRyxTQUFTRCxxQkFBcUIsR0FBR0EsOEVBQXFCQSxFQUN0RCxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvcmVhbHRpbWUvcmVhbHRpbWUubWpzP2I1YjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBTZXNzaW9uc0FQSSBmcm9tIFwiLi9zZXNzaW9ucy5tanNcIjtcbmltcG9ydCB7IFNlc3Npb25zLCB9IGZyb20gXCIuL3Nlc3Npb25zLm1qc1wiO1xuaW1wb3J0ICogYXMgVHJhbnNjcmlwdGlvblNlc3Npb25zQVBJIGZyb20gXCIuL3RyYW5zY3JpcHRpb24tc2Vzc2lvbnMubWpzXCI7XG5pbXBvcnQgeyBUcmFuc2NyaXB0aW9uU2Vzc2lvbnMsIH0gZnJvbSBcIi4vdHJhbnNjcmlwdGlvbi1zZXNzaW9ucy5tanNcIjtcbmV4cG9ydCBjbGFzcyBSZWFsdGltZSBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5zZXNzaW9ucyA9IG5ldyBTZXNzaW9uc0FQSS5TZXNzaW9ucyh0aGlzLl9jbGllbnQpO1xuICAgICAgICB0aGlzLnRyYW5zY3JpcHRpb25TZXNzaW9ucyA9IG5ldyBUcmFuc2NyaXB0aW9uU2Vzc2lvbnNBUEkuVHJhbnNjcmlwdGlvblNlc3Npb25zKHRoaXMuX2NsaWVudCk7XG4gICAgfVxufVxuUmVhbHRpbWUuU2Vzc2lvbnMgPSBTZXNzaW9ucztcblJlYWx0aW1lLlRyYW5zY3JpcHRpb25TZXNzaW9ucyA9IFRyYW5zY3JpcHRpb25TZXNzaW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWx0aW1lLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJTZXNzaW9uc0FQSSIsIlNlc3Npb25zIiwiVHJhbnNjcmlwdGlvblNlc3Npb25zQVBJIiwiVHJhbnNjcmlwdGlvblNlc3Npb25zIiwiUmVhbHRpbWUiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsInNlc3Npb25zIiwiX2NsaWVudCIsInRyYW5zY3JpcHRpb25TZXNzaW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/realtime/realtime.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/realtime/sessions.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/realtime/sessions.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Sessions: () => (/* binding */ Sessions)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Sessions extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Create an ephemeral API token for use in client-side applications with the\n     * Realtime API. Can be configured with the same session parameters as the\n     * `session.update` client event.\n     *\n     * It responds with a session object, plus a `client_secret` key which contains a\n     * usable ephemeral API token that can be used to authenticate browser clients for\n     * the Realtime API.\n     *\n     * @example\n     * ```ts\n     * const session =\n     *   await client.beta.realtime.sessions.create();\n     * ```\n     */ create(body, options) {\n        return this._client.post(\"/realtime/sessions\", {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_1__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n} //# sourceMappingURL=sessions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3JlYWx0aW1lL3Nlc3Npb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxzRkFBc0Y7QUFDN0I7QUFDSTtBQUN0RCxNQUFNRSxpQkFBaUJGLDJEQUFXQTtJQUNyQzs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNERyxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsc0JBQXNCO1lBQzNDSDtZQUNBLEdBQUdDLE9BQU87WUFDVkcsU0FBU1AsbUVBQVlBLENBQUM7Z0JBQUM7b0JBQUUsZUFBZTtnQkFBZ0I7Z0JBQUdJLFNBQVNHO2FBQVE7UUFDaEY7SUFDSjtBQUNKLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3JlYWx0aW1lL3Nlc3Npb25zLm1qcz9iNWRjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi9jb3JlL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgYnVpbGRIZWFkZXJzIH0gZnJvbSBcIi4uLy4uLy4uL2ludGVybmFsL2hlYWRlcnMubWpzXCI7XG5leHBvcnQgY2xhc3MgU2Vzc2lvbnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIGVwaGVtZXJhbCBBUEkgdG9rZW4gZm9yIHVzZSBpbiBjbGllbnQtc2lkZSBhcHBsaWNhdGlvbnMgd2l0aCB0aGVcbiAgICAgKiBSZWFsdGltZSBBUEkuIENhbiBiZSBjb25maWd1cmVkIHdpdGggdGhlIHNhbWUgc2Vzc2lvbiBwYXJhbWV0ZXJzIGFzIHRoZVxuICAgICAqIGBzZXNzaW9uLnVwZGF0ZWAgY2xpZW50IGV2ZW50LlxuICAgICAqXG4gICAgICogSXQgcmVzcG9uZHMgd2l0aCBhIHNlc3Npb24gb2JqZWN0LCBwbHVzIGEgYGNsaWVudF9zZWNyZXRgIGtleSB3aGljaCBjb250YWlucyBhXG4gICAgICogdXNhYmxlIGVwaGVtZXJhbCBBUEkgdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCB0byBhdXRoZW50aWNhdGUgYnJvd3NlciBjbGllbnRzIGZvclxuICAgICAqIHRoZSBSZWFsdGltZSBBUEkuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3Qgc2Vzc2lvbiA9XG4gICAgICogICBhd2FpdCBjbGllbnQuYmV0YS5yZWFsdGltZS5zZXNzaW9ucy5jcmVhdGUoKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9yZWFsdGltZS9zZXNzaW9ucycsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFt7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJyB9LCBvcHRpb25zPy5oZWFkZXJzXSksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlc3Npb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJidWlsZEhlYWRlcnMiLCJTZXNzaW9ucyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJoZWFkZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/realtime/sessions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/realtime/transcription-sessions.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/openai/resources/beta/realtime/transcription-sessions.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TranscriptionSessions: () => (/* binding */ TranscriptionSessions)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass TranscriptionSessions extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Create an ephemeral API token for use in client-side applications with the\n     * Realtime API specifically for realtime transcriptions. Can be configured with\n     * the same session parameters as the `transcription_session.update` client event.\n     *\n     * It responds with a session object, plus a `client_secret` key which contains a\n     * usable ephemeral API token that can be used to authenticate browser clients for\n     * the Realtime API.\n     *\n     * @example\n     * ```ts\n     * const transcriptionSession =\n     *   await client.beta.realtime.transcriptionSessions.create();\n     * ```\n     */ create(body, options) {\n        return this._client.post(\"/realtime/transcription_sessions\", {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_1__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n} //# sourceMappingURL=transcription-sessions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3JlYWx0aW1lL3RyYW5zY3JpcHRpb24tc2Vzc2lvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNGQUFzRjtBQUM3QjtBQUNJO0FBQ3RELE1BQU1FLDhCQUE4QkYsMkRBQVdBO0lBQ2xEOzs7Ozs7Ozs7Ozs7OztLQWNDLEdBQ0RHLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxvQ0FBb0M7WUFDekRIO1lBQ0EsR0FBR0MsT0FBTztZQUNWRyxTQUFTUCxtRUFBWUEsQ0FBQztnQkFBQztvQkFBRSxlQUFlO2dCQUFnQjtnQkFBR0ksU0FBU0c7YUFBUTtRQUNoRjtJQUNKO0FBQ0osRUFDQSxtREFBbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvcmVhbHRpbWUvdHJhbnNjcmlwdGlvbi1zZXNzaW9ucy5tanM/NTgyMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IGJ1aWxkSGVhZGVycyB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcm5hbC9oZWFkZXJzLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFRyYW5zY3JpcHRpb25TZXNzaW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gZXBoZW1lcmFsIEFQSSB0b2tlbiBmb3IgdXNlIGluIGNsaWVudC1zaWRlIGFwcGxpY2F0aW9ucyB3aXRoIHRoZVxuICAgICAqIFJlYWx0aW1lIEFQSSBzcGVjaWZpY2FsbHkgZm9yIHJlYWx0aW1lIHRyYW5zY3JpcHRpb25zLiBDYW4gYmUgY29uZmlndXJlZCB3aXRoXG4gICAgICogdGhlIHNhbWUgc2Vzc2lvbiBwYXJhbWV0ZXJzIGFzIHRoZSBgdHJhbnNjcmlwdGlvbl9zZXNzaW9uLnVwZGF0ZWAgY2xpZW50IGV2ZW50LlxuICAgICAqXG4gICAgICogSXQgcmVzcG9uZHMgd2l0aCBhIHNlc3Npb24gb2JqZWN0LCBwbHVzIGEgYGNsaWVudF9zZWNyZXRgIGtleSB3aGljaCBjb250YWlucyBhXG4gICAgICogdXNhYmxlIGVwaGVtZXJhbCBBUEkgdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCB0byBhdXRoZW50aWNhdGUgYnJvd3NlciBjbGllbnRzIGZvclxuICAgICAqIHRoZSBSZWFsdGltZSBBUEkuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3QgdHJhbnNjcmlwdGlvblNlc3Npb24gPVxuICAgICAqICAgYXdhaXQgY2xpZW50LmJldGEucmVhbHRpbWUudHJhbnNjcmlwdGlvblNlc3Npb25zLmNyZWF0ZSgpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3JlYWx0aW1lL3RyYW5zY3JpcHRpb25fc2Vzc2lvbnMnLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicgfSwgb3B0aW9ucz8uaGVhZGVyc10pLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2NyaXB0aW9uLXNlc3Npb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJidWlsZEhlYWRlcnMiLCJUcmFuc2NyaXB0aW9uU2Vzc2lvbnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0IiwiaGVhZGVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/realtime/transcription-sessions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/threads/messages.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/messages.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Messages: () => (/* binding */ Messages)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */ class Messages extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Create a message.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */ create(threadID, body, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/threads/${threadID}/messages`, {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Retrieve a message.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */ retrieve(messageID, params, options) {\n        const { thread_id } = params;\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/threads/${thread_id}/messages/${messageID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Modifies a message.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */ update(messageID, params, options) {\n        const { thread_id, ...body } = params;\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/threads/${thread_id}/messages/${messageID}`, {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Returns a list of messages for a given thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */ list(threadID, query = {}, options) {\n        return this._client.getAPIList(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/threads/${threadID}/messages`, _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.CursorPage, {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Deletes a message.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */ delete(messageID, params, options) {\n        const { thread_id } = params;\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/threads/${thread_id}/messages/${messageID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n} //# sourceMappingURL=messages.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvbWVzc2FnZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQzdCO0FBQ0M7QUFDRztBQUNMO0FBQ3hEOztDQUVDLEdBQ00sTUFBTUksaUJBQWlCSiwyREFBV0E7SUFDckM7Ozs7S0FJQyxHQUNESyxPQUFPQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQzVCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQ1AsMERBQUssQ0FBQyxTQUFTLEVBQUVHLFNBQVMsU0FBUyxDQUFDLEVBQUU7WUFDM0RDO1lBQ0EsR0FBR0MsT0FBTztZQUNWRyxTQUFTVCxtRUFBWUEsQ0FBQztnQkFBQztvQkFBRSxlQUFlO2dCQUFnQjtnQkFBR00sU0FBU0c7YUFBUTtRQUNoRjtJQUNKO0lBQ0E7Ozs7S0FJQyxHQUNEQyxTQUFTQyxTQUFTLEVBQUVDLE1BQU0sRUFBRU4sT0FBTyxFQUFFO1FBQ2pDLE1BQU0sRUFBRU8sU0FBUyxFQUFFLEdBQUdEO1FBQ3RCLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUNPLEdBQUcsQ0FBQ2IsMERBQUssQ0FBQyxTQUFTLEVBQUVZLFVBQVUsVUFBVSxFQUFFRixVQUFVLENBQUMsRUFBRTtZQUN4RSxHQUFHTCxPQUFPO1lBQ1ZHLFNBQVNULG1FQUFZQSxDQUFDO2dCQUFDO29CQUFFLGVBQWU7Z0JBQWdCO2dCQUFHTSxTQUFTRzthQUFRO1FBQ2hGO0lBQ0o7SUFDQTs7OztLQUlDLEdBQ0RNLE9BQU9KLFNBQVMsRUFBRUMsTUFBTSxFQUFFTixPQUFPLEVBQUU7UUFDL0IsTUFBTSxFQUFFTyxTQUFTLEVBQUUsR0FBR1IsTUFBTSxHQUFHTztRQUMvQixPQUFPLElBQUksQ0FBQ0wsT0FBTyxDQUFDQyxJQUFJLENBQUNQLDBEQUFLLENBQUMsU0FBUyxFQUFFWSxVQUFVLFVBQVUsRUFBRUYsVUFBVSxDQUFDLEVBQUU7WUFDekVOO1lBQ0EsR0FBR0MsT0FBTztZQUNWRyxTQUFTVCxtRUFBWUEsQ0FBQztnQkFBQztvQkFBRSxlQUFlO2dCQUFnQjtnQkFBR00sU0FBU0c7YUFBUTtRQUNoRjtJQUNKO0lBQ0E7Ozs7S0FJQyxHQUNETyxLQUFLWixRQUFRLEVBQUVhLFFBQVEsQ0FBQyxDQUFDLEVBQUVYLE9BQU8sRUFBRTtRQUNoQyxPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDVyxVQUFVLENBQUNqQiwwREFBSyxDQUFDLFNBQVMsRUFBRUcsU0FBUyxTQUFTLENBQUMsRUFBR0wsNERBQVVBLEVBQUc7WUFDL0VrQjtZQUNBLEdBQUdYLE9BQU87WUFDVkcsU0FBU1QsbUVBQVlBLENBQUM7Z0JBQUM7b0JBQUUsZUFBZTtnQkFBZ0I7Z0JBQUdNLFNBQVNHO2FBQVE7UUFDaEY7SUFDSjtJQUNBOzs7O0tBSUMsR0FDRFUsT0FBT1IsU0FBUyxFQUFFQyxNQUFNLEVBQUVOLE9BQU8sRUFBRTtRQUMvQixNQUFNLEVBQUVPLFNBQVMsRUFBRSxHQUFHRDtRQUN0QixPQUFPLElBQUksQ0FBQ0wsT0FBTyxDQUFDWSxNQUFNLENBQUNsQiwwREFBSyxDQUFDLFNBQVMsRUFBRVksVUFBVSxVQUFVLEVBQUVGLFVBQVUsQ0FBQyxFQUFFO1lBQzNFLEdBQUdMLE9BQU87WUFDVkcsU0FBU1QsbUVBQVlBLENBQUM7Z0JBQUM7b0JBQUUsZUFBZTtnQkFBZ0I7Z0JBQUdNLFNBQVNHO2FBQVE7UUFDaEY7SUFDSjtBQUNKLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvbWVzc2FnZXMubWpzPzA1ZGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvcGFnaW5hdGlvbi5tanNcIjtcbmltcG9ydCB7IGJ1aWxkSGVhZGVycyB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcm5hbC9oZWFkZXJzLm1qc1wiO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcm5hbC91dGlscy9wYXRoLm1qc1wiO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICovXG5leHBvcnQgY2xhc3MgTWVzc2FnZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbWVzc2FnZS5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIFRoZSBBc3Npc3RhbnRzIEFQSSBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHRoZSBSZXNwb25zZXMgQVBJXG4gICAgICovXG4gICAgY3JlYXRlKHRocmVhZElELCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChwYXRoIGAvdGhyZWFkcy8ke3RocmVhZElEfS9tZXNzYWdlc2AsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFt7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJyB9LCBvcHRpb25zPy5oZWFkZXJzXSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSBhIG1lc3NhZ2UuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICAgICAqL1xuICAgIHJldHJpZXZlKG1lc3NhZ2VJRCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgdGhyZWFkX2lkIH0gPSBwYXJhbXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KHBhdGggYC90aHJlYWRzLyR7dGhyZWFkX2lkfS9tZXNzYWdlcy8ke21lc3NhZ2VJRH1gLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFt7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJyB9LCBvcHRpb25zPy5oZWFkZXJzXSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb2RpZmllcyBhIG1lc3NhZ2UuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICAgICAqL1xuICAgIHVwZGF0ZShtZXNzYWdlSUQsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHRocmVhZF9pZCwgLi4uYm9keSB9ID0gcGFyYW1zO1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QocGF0aCBgL3RocmVhZHMvJHt0aHJlYWRfaWR9L21lc3NhZ2VzLyR7bWVzc2FnZUlEfWAsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFt7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJyB9LCBvcHRpb25zPy5oZWFkZXJzXSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBtZXNzYWdlcyBmb3IgYSBnaXZlbiB0aHJlYWQuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICAgICAqL1xuICAgIGxpc3QodGhyZWFkSUQsIHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KHBhdGggYC90aHJlYWRzLyR7dGhyZWFkSUR9L21lc3NhZ2VzYCwgKEN1cnNvclBhZ2UpLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW3sgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInIH0sIG9wdGlvbnM/LmhlYWRlcnNdKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYSBtZXNzYWdlLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgVGhlIEFzc2lzdGFudHMgQVBJIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgdGhlIFJlc3BvbnNlcyBBUElcbiAgICAgKi9cbiAgICBkZWxldGUobWVzc2FnZUlELCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyB0aHJlYWRfaWQgfSA9IHBhcmFtcztcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUocGF0aCBgL3RocmVhZHMvJHt0aHJlYWRfaWR9L21lc3NhZ2VzLyR7bWVzc2FnZUlEfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW3sgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInIH0sIG9wdGlvbnM/LmhlYWRlcnNdKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVzc2FnZXMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkN1cnNvclBhZ2UiLCJidWlsZEhlYWRlcnMiLCJwYXRoIiwiTWVzc2FnZXMiLCJjcmVhdGUiLCJ0aHJlYWRJRCIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJoZWFkZXJzIiwicmV0cmlldmUiLCJtZXNzYWdlSUQiLCJwYXJhbXMiLCJ0aHJlYWRfaWQiLCJnZXQiLCJ1cGRhdGUiLCJsaXN0IiwicXVlcnkiLCJnZXRBUElMaXN0IiwiZGVsZXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/threads/messages.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/threads/runs/runs.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/runs/runs.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runs: () => (/* binding */ Runs)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _steps_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./steps.mjs */ \"(rsc)/./node_modules/openai/resources/beta/threads/runs/steps.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n/* harmony import */ var _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../lib/AssistantStream.mjs */ \"(rsc)/./node_modules/openai/lib/AssistantStream.mjs\");\n/* harmony import */ var _internal_utils_sleep_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../internal/utils/sleep.mjs */ \"(rsc)/./node_modules/openai/internal/utils/sleep.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\n\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */ class Runs extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.steps = new _steps_mjs__WEBPACK_IMPORTED_MODULE_1__.Steps(this._client);\n    }\n    create(threadID, params, options) {\n        const { include, ...body } = params;\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_6__.path`/threads/${threadID}/runs`, {\n            query: {\n                include\n            },\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ]),\n            stream: params.stream ?? false\n        });\n    }\n    /**\n     * Retrieves a run.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */ retrieve(runID, params, options) {\n        const { thread_id } = params;\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_6__.path`/threads/${thread_id}/runs/${runID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Modifies a run.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */ update(runID, params, options) {\n        const { thread_id, ...body } = params;\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_6__.path`/threads/${thread_id}/runs/${runID}`, {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Returns a list of runs belonging to a thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */ list(threadID, query = {}, options) {\n        return this._client.getAPIList(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_6__.path`/threads/${threadID}/runs`, _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage, {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Cancels a run that is `in_progress`.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */ cancel(runID, params, options) {\n        const { thread_id } = params;\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_6__.path`/threads/${thread_id}/runs/${runID}/cancel`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * A helper to create a run an poll for a terminal state. More information on Run\n     * lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */ async createAndPoll(threadId, body, options) {\n        const run = await this.create(threadId, body, options);\n        return await this.poll(run.id, {\n            thread_id: threadId\n        }, options);\n    }\n    /**\n     * Create a Run stream\n     *\n     * @deprecated use `stream` instead\n     */ createAndStream(threadId, body, options) {\n        return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_4__.AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\n    }\n    /**\n     * A helper to poll a run status until it reaches a terminal state. More\n     * information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */ async poll(runId, params, options) {\n        const headers = (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n            options?.headers,\n            {\n                \"X-Stainless-Poll-Helper\": \"true\",\n                \"X-Stainless-Custom-Poll-Interval\": options?.pollIntervalMs?.toString() ?? undefined\n            }\n        ]);\n        while(true){\n            const { data: run, response } = await this.retrieve(runId, params, {\n                ...options,\n                headers: {\n                    ...options?.headers,\n                    ...headers\n                }\n            }).withResponse();\n            switch(run.status){\n                //If we are in any sort of intermediate state we poll\n                case \"queued\":\n                case \"in_progress\":\n                case \"cancelling\":\n                    let sleepInterval = 5000;\n                    if (options?.pollIntervalMs) {\n                        sleepInterval = options.pollIntervalMs;\n                    } else {\n                        const headerInterval = response.headers.get(\"openai-poll-after-ms\");\n                        if (headerInterval) {\n                            const headerIntervalMs = parseInt(headerInterval);\n                            if (!isNaN(headerIntervalMs)) {\n                                sleepInterval = headerIntervalMs;\n                            }\n                        }\n                    }\n                    await (0,_internal_utils_sleep_mjs__WEBPACK_IMPORTED_MODULE_5__.sleep)(sleepInterval);\n                    break;\n                //We return the run in any terminal state.\n                case \"requires_action\":\n                case \"incomplete\":\n                case \"cancelled\":\n                case \"completed\":\n                case \"failed\":\n                case \"expired\":\n                    return run;\n            }\n        }\n    }\n    /**\n     * Create a Run stream\n     */ stream(threadId, body, options) {\n        return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_4__.AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\n    }\n    submitToolOutputs(runID, params, options) {\n        const { thread_id, ...body } = params;\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_6__.path`/threads/${thread_id}/runs/${runID}/submit_tool_outputs`, {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ]),\n            stream: params.stream ?? false\n        });\n    }\n    /**\n     * A helper to submit a tool output to a run and poll for a terminal run state.\n     * More information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */ async submitToolOutputsAndPoll(runId, params, options) {\n        const run = await this.submitToolOutputs(runId, params, options);\n        return await this.poll(run.id, params, options);\n    }\n    /**\n     * Submit the tool outputs from a previous run and stream the run to a terminal\n     * state. More information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */ submitToolOutputsStream(runId, params, options) {\n        return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_4__.AssistantStream.createToolAssistantStream(runId, this._client.beta.threads.runs, params, options);\n    }\n}\nRuns.Steps = _steps_mjs__WEBPACK_IMPORTED_MODULE_1__.Steps; //# sourceMappingURL=runs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/threads/runs/runs.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/threads/runs/steps.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/runs/steps.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Steps: () => (/* binding */ Steps)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */ class Steps extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Retrieves a run step.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */ retrieve(stepID, params, options) {\n        const { thread_id, run_id, ...query } = params;\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/threads/${thread_id}/runs/${run_id}/steps/${stepID}`, {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Returns a list of run steps belonging to a run.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */ list(runID, params, options) {\n        const { thread_id, ...query } = params;\n        return this._client.getAPIList(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/threads/${thread_id}/runs/${runID}/steps`, _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.CursorPage, {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n} //# sourceMappingURL=steps.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvcnVucy9zdGVwcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDMUI7QUFDQztBQUNHO0FBQ0w7QUFDM0Q7O0NBRUMsR0FDTSxNQUFNSSxjQUFjSiwyREFBV0E7SUFDbEM7Ozs7S0FJQyxHQUNESyxTQUFTQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzlCLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsT0FBTyxHQUFHSjtRQUN4QyxPQUFPLElBQUksQ0FBQ0ssT0FBTyxDQUFDQyxHQUFHLENBQUNWLDBEQUFLLENBQUMsU0FBUyxFQUFFTSxVQUFVLE1BQU0sRUFBRUMsT0FBTyxPQUFPLEVBQUVKLE9BQU8sQ0FBQyxFQUFFO1lBQ2pGSztZQUNBLEdBQUdILE9BQU87WUFDVk0sU0FBU1osbUVBQVlBLENBQUM7Z0JBQUM7b0JBQUUsZUFBZTtnQkFBZ0I7Z0JBQUdNLFNBQVNNO2FBQVE7UUFDaEY7SUFDSjtJQUNBOzs7O0tBSUMsR0FDREMsS0FBS0MsS0FBSyxFQUFFVCxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUN6QixNQUFNLEVBQUVDLFNBQVMsRUFBRSxHQUFHRSxPQUFPLEdBQUdKO1FBQ2hDLE9BQU8sSUFBSSxDQUFDSyxPQUFPLENBQUNLLFVBQVUsQ0FBQ2QsMERBQUssQ0FBQyxTQUFTLEVBQUVNLFVBQVUsTUFBTSxFQUFFTyxNQUFNLE1BQU0sQ0FBQyxFQUFHZiw0REFBVUEsRUFBRztZQUMzRlU7WUFDQSxHQUFHSCxPQUFPO1lBQ1ZNLFNBQVNaLG1FQUFZQSxDQUFDO2dCQUFDO29CQUFFLGVBQWU7Z0JBQWdCO2dCQUFHTSxTQUFTTTthQUFRO1FBQ2hGO0lBQ0o7QUFDSixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL3J1bnMvc3RlcHMubWpzPzQ3ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvcmUvcGFnaW5hdGlvbi5tanNcIjtcbmltcG9ydCB7IGJ1aWxkSGVhZGVycyB9IGZyb20gXCIuLi8uLi8uLi8uLi9pbnRlcm5hbC9oZWFkZXJzLm1qc1wiO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gXCIuLi8uLi8uLi8uLi9pbnRlcm5hbC91dGlscy9wYXRoLm1qc1wiO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICovXG5leHBvcnQgY2xhc3MgU3RlcHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgcnVuIHN0ZXAuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICAgICAqL1xuICAgIHJldHJpZXZlKHN0ZXBJRCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgdGhyZWFkX2lkLCBydW5faWQsIC4uLnF1ZXJ5IH0gPSBwYXJhbXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KHBhdGggYC90aHJlYWRzLyR7dGhyZWFkX2lkfS9ydW5zLyR7cnVuX2lkfS9zdGVwcy8ke3N0ZXBJRH1gLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW3sgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInIH0sIG9wdGlvbnM/LmhlYWRlcnNdKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIHJ1biBzdGVwcyBiZWxvbmdpbmcgdG8gYSBydW4uXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICAgICAqL1xuICAgIGxpc3QocnVuSUQsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHRocmVhZF9pZCwgLi4ucXVlcnkgfSA9IHBhcmFtcztcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KHBhdGggYC90aHJlYWRzLyR7dGhyZWFkX2lkfS9ydW5zLyR7cnVuSUR9L3N0ZXBzYCwgKEN1cnNvclBhZ2UpLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW3sgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInIH0sIG9wdGlvbnM/LmhlYWRlcnNdKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RlcHMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkN1cnNvclBhZ2UiLCJidWlsZEhlYWRlcnMiLCJwYXRoIiwiU3RlcHMiLCJyZXRyaWV2ZSIsInN0ZXBJRCIsInBhcmFtcyIsIm9wdGlvbnMiLCJ0aHJlYWRfaWQiLCJydW5faWQiLCJxdWVyeSIsIl9jbGllbnQiLCJnZXQiLCJoZWFkZXJzIiwibGlzdCIsInJ1bklEIiwiZ2V0QVBJTGlzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/threads/runs/steps.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/threads/threads.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/threads.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Threads: () => (/* binding */ Threads)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _messages_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./messages.mjs */ \"(rsc)/./node_modules/openai/resources/beta/threads/messages.mjs\");\n/* harmony import */ var _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./runs/runs.mjs */ \"(rsc)/./node_modules/openai/resources/beta/threads/runs/runs.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n/* harmony import */ var _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../lib/AssistantStream.mjs */ \"(rsc)/./node_modules/openai/lib/AssistantStream.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\n\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */ class Threads extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.runs = new _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_2__.Runs(this._client);\n        this.messages = new _messages_mjs__WEBPACK_IMPORTED_MODULE_1__.Messages(this._client);\n    }\n    /**\n     * Create a thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */ create(body = {}, options) {\n        return this._client.post(\"/threads\", {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Retrieves a thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */ retrieve(threadID, options) {\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/threads/${threadID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Modifies a thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */ update(threadID, body, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/threads/${threadID}`, {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Delete a thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */ delete(threadID, options) {\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/threads/${threadID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    createAndRun(body, options) {\n        return this._client.post(\"/threads/runs\", {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ]),\n            stream: body.stream ?? false\n        });\n    }\n    /**\n     * A helper to create a thread, start a run and then poll for a terminal state.\n     * More information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */ async createAndRunPoll(body, options) {\n        const run = await this.createAndRun(body, options);\n        return await this.runs.poll(run.id, {\n            thread_id: run.thread_id\n        }, options);\n    }\n    /**\n     * Create a thread and stream the run back\n     */ createAndRunStream(body, options) {\n        return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_4__.AssistantStream.createThreadAssistantStream(body, this._client.beta.threads, options);\n    }\n}\nThreads.Runs = _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_2__.Runs;\nThreads.Messages = _messages_mjs__WEBPACK_IMPORTED_MODULE_1__.Messages; //# sourceMappingURL=threads.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvdGhyZWFkcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHNGQUFzRjtBQUM3QjtBQUNYO0FBQ0g7QUFDQTtBQUNIO0FBQ3FCO0FBQ007QUFDWDtBQUN4RDs7Q0FFQyxHQUNNLE1BQU1RLGdCQUFnQlIsMkRBQVdBO0lBQ3BDUyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUlSLGdEQUFZLENBQUMsSUFBSSxDQUFDUyxPQUFPO1FBQ3pDLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlaLG1EQUFvQixDQUFDLElBQUksQ0FBQ1csT0FBTztJQUN6RDtJQUNBOzs7O0tBSUMsR0FDREUsT0FBT0MsT0FBTyxDQUFDLENBQUMsRUFBRUMsT0FBTyxFQUFFO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDSixPQUFPLENBQUNLLElBQUksQ0FBQyxZQUFZO1lBQ2pDRjtZQUNBLEdBQUdDLE9BQU87WUFDVkUsU0FBU2IsbUVBQVlBLENBQUM7Z0JBQUM7b0JBQUUsZUFBZTtnQkFBZ0I7Z0JBQUdXLFNBQVNFO2FBQVE7UUFDaEY7SUFDSjtJQUNBOzs7O0tBSUMsR0FDREMsU0FBU0MsUUFBUSxFQUFFSixPQUFPLEVBQUU7UUFDeEIsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ1MsR0FBRyxDQUFDZCwwREFBSyxDQUFDLFNBQVMsRUFBRWEsU0FBUyxDQUFDLEVBQUU7WUFDakQsR0FBR0osT0FBTztZQUNWRSxTQUFTYixtRUFBWUEsQ0FBQztnQkFBQztvQkFBRSxlQUFlO2dCQUFnQjtnQkFBR1csU0FBU0U7YUFBUTtRQUNoRjtJQUNKO0lBQ0E7Ozs7S0FJQyxHQUNESSxPQUFPRixRQUFRLEVBQUVMLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQzVCLE9BQU8sSUFBSSxDQUFDSixPQUFPLENBQUNLLElBQUksQ0FBQ1YsMERBQUssQ0FBQyxTQUFTLEVBQUVhLFNBQVMsQ0FBQyxFQUFFO1lBQ2xETDtZQUNBLEdBQUdDLE9BQU87WUFDVkUsU0FBU2IsbUVBQVlBLENBQUM7Z0JBQUM7b0JBQUUsZUFBZTtnQkFBZ0I7Z0JBQUdXLFNBQVNFO2FBQVE7UUFDaEY7SUFDSjtJQUNBOzs7O0tBSUMsR0FDREssT0FBT0gsUUFBUSxFQUFFSixPQUFPLEVBQUU7UUFDdEIsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ1csTUFBTSxDQUFDaEIsMERBQUssQ0FBQyxTQUFTLEVBQUVhLFNBQVMsQ0FBQyxFQUFFO1lBQ3BELEdBQUdKLE9BQU87WUFDVkUsU0FBU2IsbUVBQVlBLENBQUM7Z0JBQUM7b0JBQUUsZUFBZTtnQkFBZ0I7Z0JBQUdXLFNBQVNFO2FBQVE7UUFDaEY7SUFDSjtJQUNBTSxhQUFhVCxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUN4QixPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUFDSyxJQUFJLENBQUMsaUJBQWlCO1lBQ3RDRjtZQUNBLEdBQUdDLE9BQU87WUFDVkUsU0FBU2IsbUVBQVlBLENBQUM7Z0JBQUM7b0JBQUUsZUFBZTtnQkFBZ0I7Z0JBQUdXLFNBQVNFO2FBQVE7WUFDNUVPLFFBQVFWLEtBQUtVLE1BQU0sSUFBSTtRQUMzQjtJQUNKO0lBQ0E7Ozs7S0FJQyxHQUNELE1BQU1DLGlCQUFpQlgsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEMsTUFBTVcsTUFBTSxNQUFNLElBQUksQ0FBQ0gsWUFBWSxDQUFDVCxNQUFNQztRQUMxQyxPQUFPLE1BQU0sSUFBSSxDQUFDTCxJQUFJLENBQUNpQixJQUFJLENBQUNELElBQUlFLEVBQUUsRUFBRTtZQUFFQyxXQUFXSCxJQUFJRyxTQUFTO1FBQUMsR0FBR2Q7SUFDdEU7SUFDQTs7S0FFQyxHQUNEZSxtQkFBbUJoQixJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUM5QixPQUFPVixxRUFBZUEsQ0FBQzBCLDJCQUEyQixDQUFDakIsTUFBTSxJQUFJLENBQUNILE9BQU8sQ0FBQ3FCLElBQUksQ0FBQ0MsT0FBTyxFQUFFbEI7SUFDeEY7QUFDSjtBQUNBUixRQUFRSixJQUFJLEdBQUdBLGdEQUFJQTtBQUNuQkksUUFBUU4sUUFBUSxHQUFHQSxtREFBUUEsRUFDM0Isb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvdGhyZWFkcy5tanM/Njc3MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIE1lc3NhZ2VzQVBJIGZyb20gXCIuL21lc3NhZ2VzLm1qc1wiO1xuaW1wb3J0IHsgTWVzc2FnZXMsIH0gZnJvbSBcIi4vbWVzc2FnZXMubWpzXCI7XG5pbXBvcnQgKiBhcyBSdW5zQVBJIGZyb20gXCIuL3J1bnMvcnVucy5tanNcIjtcbmltcG9ydCB7IFJ1bnMsIH0gZnJvbSBcIi4vcnVucy9ydW5zLm1qc1wiO1xuaW1wb3J0IHsgYnVpbGRIZWFkZXJzIH0gZnJvbSBcIi4uLy4uLy4uL2ludGVybmFsL2hlYWRlcnMubWpzXCI7XG5pbXBvcnQgeyBBc3Npc3RhbnRTdHJlYW0gfSBmcm9tIFwiLi4vLi4vLi4vbGliL0Fzc2lzdGFudFN0cmVhbS5tanNcIjtcbmltcG9ydCB7IHBhdGggfSBmcm9tIFwiLi4vLi4vLi4vaW50ZXJuYWwvdXRpbHMvcGF0aC5tanNcIjtcbi8qKlxuICogQGRlcHJlY2F0ZWQgVGhlIEFzc2lzdGFudHMgQVBJIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgdGhlIFJlc3BvbnNlcyBBUElcbiAqL1xuZXhwb3J0IGNsYXNzIFRocmVhZHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMucnVucyA9IG5ldyBSdW5zQVBJLlJ1bnModGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IG5ldyBNZXNzYWdlc0FQSS5NZXNzYWdlcyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSB0aHJlYWQuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvdGhyZWFkcycsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFt7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJyB9LCBvcHRpb25zPy5oZWFkZXJzXSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSB0aHJlYWQuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICAgICAqL1xuICAgIHJldHJpZXZlKHRocmVhZElELCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KHBhdGggYC90aHJlYWRzLyR7dGhyZWFkSUR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicgfSwgb3B0aW9ucz8uaGVhZGVyc10pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW9kaWZpZXMgYSB0aHJlYWQuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICAgICAqL1xuICAgIHVwZGF0ZSh0aHJlYWRJRCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QocGF0aCBgL3RocmVhZHMvJHt0aHJlYWRJRH1gLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicgfSwgb3B0aW9ucz8uaGVhZGVyc10pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgdGhyZWFkLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgVGhlIEFzc2lzdGFudHMgQVBJIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgdGhlIFJlc3BvbnNlcyBBUElcbiAgICAgKi9cbiAgICBkZWxldGUodGhyZWFkSUQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUocGF0aCBgL3RocmVhZHMvJHt0aHJlYWRJRH1gLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFt7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJyB9LCBvcHRpb25zPy5oZWFkZXJzXSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjcmVhdGVBbmRSdW4oYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy90aHJlYWRzL3J1bnMnLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicgfSwgb3B0aW9ucz8uaGVhZGVyc10pLFxuICAgICAgICAgICAgc3RyZWFtOiBib2R5LnN0cmVhbSA/PyBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgaGVscGVyIHRvIGNyZWF0ZSBhIHRocmVhZCwgc3RhcnQgYSBydW4gYW5kIHRoZW4gcG9sbCBmb3IgYSB0ZXJtaW5hbCBzdGF0ZS5cbiAgICAgKiBNb3JlIGluZm9ybWF0aW9uIG9uIFJ1biBsaWZlY3ljbGVzIGNhbiBiZSBmb3VuZCBoZXJlOlxuICAgICAqIGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2Fzc2lzdGFudHMvaG93LWl0LXdvcmtzL3J1bnMtYW5kLXJ1bi1zdGVwc1xuICAgICAqL1xuICAgIGFzeW5jIGNyZWF0ZUFuZFJ1blBvbGwoYm9keSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBydW4gPSBhd2FpdCB0aGlzLmNyZWF0ZUFuZFJ1bihib2R5LCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucnVucy5wb2xsKHJ1bi5pZCwgeyB0aHJlYWRfaWQ6IHJ1bi50aHJlYWRfaWQgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHRocmVhZCBhbmQgc3RyZWFtIHRoZSBydW4gYmFja1xuICAgICAqL1xuICAgIGNyZWF0ZUFuZFJ1blN0cmVhbShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBBc3Npc3RhbnRTdHJlYW0uY3JlYXRlVGhyZWFkQXNzaXN0YW50U3RyZWFtKGJvZHksIHRoaXMuX2NsaWVudC5iZXRhLnRocmVhZHMsIG9wdGlvbnMpO1xuICAgIH1cbn1cblRocmVhZHMuUnVucyA9IFJ1bnM7XG5UaHJlYWRzLk1lc3NhZ2VzID0gTWVzc2FnZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJlYWRzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJNZXNzYWdlc0FQSSIsIk1lc3NhZ2VzIiwiUnVuc0FQSSIsIlJ1bnMiLCJidWlsZEhlYWRlcnMiLCJBc3Npc3RhbnRTdHJlYW0iLCJwYXRoIiwiVGhyZWFkcyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwicnVucyIsIl9jbGllbnQiLCJtZXNzYWdlcyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwicG9zdCIsImhlYWRlcnMiLCJyZXRyaWV2ZSIsInRocmVhZElEIiwiZ2V0IiwidXBkYXRlIiwiZGVsZXRlIiwiY3JlYXRlQW5kUnVuIiwic3RyZWFtIiwiY3JlYXRlQW5kUnVuUG9sbCIsInJ1biIsInBvbGwiLCJpZCIsInRocmVhZF9pZCIsImNyZWF0ZUFuZFJ1blN0cmVhbSIsImNyZWF0ZVRocmVhZEFzc2lzdGFudFN0cmVhbSIsImJldGEiLCJ0aHJlYWRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/threads/threads.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/chat/chat.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/resources/chat/chat.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* binding */ Chat)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _completions_completions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./completions/completions.mjs */ \"(rsc)/./node_modules/openai/resources/chat/completions/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Chat extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.completions = new _completions_completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions(this._client);\n    }\n}\nChat.Completions = _completions_completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions; //# sourceMappingURL=chat.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2NoYXQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNGQUFzRjtBQUNoQztBQUNVO0FBQ0g7QUFDdEQsTUFBTUcsYUFBYUgsMkRBQVdBO0lBQ2pDSSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUlMLHFFQUEwQixDQUFDLElBQUksQ0FBQ00sT0FBTztJQUNsRTtBQUNKO0FBQ0FKLEtBQUtELFdBQVcsR0FBR0EscUVBQVdBLEVBQzlCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvY2hhdC9jaGF0Lm1qcz85MGMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9jb3JlL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgQ29tcGxldGlvbnNBUEkgZnJvbSBcIi4vY29tcGxldGlvbnMvY29tcGxldGlvbnMubWpzXCI7XG5pbXBvcnQgeyBDb21wbGV0aW9ucywgfSBmcm9tIFwiLi9jb21wbGV0aW9ucy9jb21wbGV0aW9ucy5tanNcIjtcbmV4cG9ydCBjbGFzcyBDaGF0IGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNvbXBsZXRpb25zID0gbmV3IENvbXBsZXRpb25zQVBJLkNvbXBsZXRpb25zKHRoaXMuX2NsaWVudCk7XG4gICAgfVxufVxuQ2hhdC5Db21wbGV0aW9ucyA9IENvbXBsZXRpb25zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhdC5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ29tcGxldGlvbnNBUEkiLCJDb21wbGV0aW9ucyIsIkNoYXQiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImNvbXBsZXRpb25zIiwiX2NsaWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/chat/chat.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/chat/completions/completions.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/openai/resources/chat/completions/completions.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionRunner: () => (/* reexport safe */ _lib_ChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_4__.ChatCompletionRunner),\n/* harmony export */   ChatCompletionStream: () => (/* reexport safe */ _lib_ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_6__.ChatCompletionStream),\n/* harmony export */   ChatCompletionStreamingRunner: () => (/* reexport safe */ _lib_ChatCompletionStreamingRunner_mjs__WEBPACK_IMPORTED_MODULE_5__.ChatCompletionStreamingRunner),\n/* harmony export */   Completions: () => (/* binding */ Completions),\n/* harmony export */   ParsingToolFunction: () => (/* reexport safe */ _lib_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_8__.ParsingToolFunction)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _messages_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./messages.mjs */ \"(rsc)/./node_modules/openai/resources/chat/completions/messages.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n/* harmony import */ var _lib_ChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../lib/ChatCompletionRunner.mjs */ \"(rsc)/./node_modules/openai/lib/ChatCompletionRunner.mjs\");\n/* harmony import */ var _lib_ChatCompletionStreamingRunner_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../lib/ChatCompletionStreamingRunner.mjs */ \"(rsc)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs\");\n/* harmony import */ var _lib_ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../lib/ChatCompletionStream.mjs */ \"(rsc)/./node_modules/openai/lib/ChatCompletionStream.mjs\");\n/* harmony import */ var _lib_parser_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../lib/parser.mjs */ \"(rsc)/./node_modules/openai/lib/parser.mjs\");\n/* harmony import */ var _lib_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../lib/RunnableFunction.mjs */ \"(rsc)/./node_modules/openai/lib/RunnableFunction.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\n\n\nclass Completions extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.messages = new _messages_mjs__WEBPACK_IMPORTED_MODULE_1__.Messages(this._client);\n    }\n    create(body, options) {\n        return this._client.post(\"/chat/completions\", {\n            body,\n            ...options,\n            stream: body.stream ?? false\n        });\n    }\n    /**\n     * Get a stored chat completion. Only Chat Completions that have been created with\n     * the `store` parameter set to `true` will be returned.\n     *\n     * @example\n     * ```ts\n     * const chatCompletion =\n     *   await client.chat.completions.retrieve('completion_id');\n     * ```\n     */ retrieve(completionID, options) {\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/chat/completions/${completionID}`, options);\n    }\n    /**\n     * Modify a stored chat completion. Only Chat Completions that have been created\n     * with the `store` parameter set to `true` can be modified. Currently, the only\n     * supported modification is to update the `metadata` field.\n     *\n     * @example\n     * ```ts\n     * const chatCompletion = await client.chat.completions.update(\n     *   'completion_id',\n     *   { metadata: { foo: 'string' } },\n     * );\n     * ```\n     */ update(completionID, body, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/chat/completions/${completionID}`, {\n            body,\n            ...options\n        });\n    }\n    /**\n     * List stored Chat Completions. Only Chat Completions that have been stored with\n     * the `store` parameter set to `true` will be returned.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const chatCompletion of client.chat.completions.list()) {\n     *   // ...\n     * }\n     * ```\n     */ list(query = {}, options) {\n        return this._client.getAPIList(\"/chat/completions\", _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Delete a stored chat completion. Only Chat Completions that have been created\n     * with the `store` parameter set to `true` can be deleted.\n     *\n     * @example\n     * ```ts\n     * const chatCompletionDeleted =\n     *   await client.chat.completions.delete('completion_id');\n     * ```\n     */ delete(completionID, options) {\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/chat/completions/${completionID}`, options);\n    }\n    parse(body, options) {\n        (0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_7__.validateInputTools)(body.tools);\n        return this._client.chat.completions.create(body, {\n            ...options,\n            headers: {\n                ...options?.headers,\n                \"X-Stainless-Helper-Method\": \"chat.completions.parse\"\n            }\n        })._thenUnwrap((completion)=>(0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_7__.parseChatCompletion)(completion, body));\n    }\n    runTools(body, options) {\n        if (body.stream) {\n            return _lib_ChatCompletionStreamingRunner_mjs__WEBPACK_IMPORTED_MODULE_5__.ChatCompletionStreamingRunner.runTools(this._client, body, options);\n        }\n        return _lib_ChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_4__.ChatCompletionRunner.runTools(this._client, body, options);\n    }\n    /**\n     * Creates a chat completion stream\n     */ stream(body, options) {\n        return _lib_ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_6__.ChatCompletionStream.createChatCompletion(this._client, body, options);\n    }\n}\n\n\n\n\nCompletions.Messages = _messages_mjs__WEBPACK_IMPORTED_MODULE_1__.Messages; //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/chat/completions/completions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/chat/completions/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/resources/chat/completions/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionRunner: () => (/* reexport safe */ _completions_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionRunner),\n/* harmony export */   ChatCompletionStream: () => (/* reexport safe */ _completions_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionStream),\n/* harmony export */   ChatCompletionStreamingRunner: () => (/* reexport safe */ _completions_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionStreamingRunner),\n/* harmony export */   Completions: () => (/* reexport safe */ _completions_mjs__WEBPACK_IMPORTED_MODULE_0__.Completions),\n/* harmony export */   Messages: () => (/* reexport safe */ _messages_mjs__WEBPACK_IMPORTED_MODULE_1__.Messages),\n/* harmony export */   ParsingToolFunction: () => (/* reexport safe */ _completions_mjs__WEBPACK_IMPORTED_MODULE_0__.ParsingToolFunction)\n/* harmony export */ });\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./completions.mjs */ \"(rsc)/./node_modules/openai/resources/chat/completions/completions.mjs\");\n/* harmony import */ var _messages_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./messages.mjs */ \"(rsc)/./node_modules/openai/resources/chat/completions/messages.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2NvbXBsZXRpb25zL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLHNGQUFzRjtBQUNyQztBQUNmO0FBQ1EsQ0FDMUMsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2NvbXBsZXRpb25zL2luZGV4Lm1qcz83ODU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5leHBvcnQgeyBDb21wbGV0aW9ucywgfSBmcm9tIFwiLi9jb21wbGV0aW9ucy5tanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbXBsZXRpb25zLm1qc1wiO1xuZXhwb3J0IHsgTWVzc2FnZXMgfSBmcm9tIFwiLi9tZXNzYWdlcy5tanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOlsiQ29tcGxldGlvbnMiLCJNZXNzYWdlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/chat/completions/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/chat/completions/messages.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/openai/resources/chat/completions/messages.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Messages: () => (/* binding */ Messages)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Messages extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Get the messages in a stored chat completion. Only Chat Completions that have\n     * been created with the `store` parameter set to `true` will be returned.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const chatCompletionStoreMessage of client.chat.completions.messages.list(\n     *   'completion_id',\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */ list(completionID, query = {}, options) {\n        return this._client.getAPIList(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/chat/completions/${completionID}/messages`, _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.CursorPage, {\n            query,\n            ...options\n        });\n    }\n} //# sourceMappingURL=messages.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2NvbXBsZXRpb25zL21lc3NhZ2VzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsc0ZBQXNGO0FBQzdCO0FBQ0M7QUFDRjtBQUNqRCxNQUFNRyxpQkFBaUJILDJEQUFXQTtJQUNyQzs7Ozs7Ozs7Ozs7OztLQWFDLEdBQ0RJLEtBQUtDLFlBQVksRUFBRUMsUUFBUSxDQUFDLENBQUMsRUFBRUMsT0FBTyxFQUFFO1FBQ3BDLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLFVBQVUsQ0FBQ1AsMERBQUssQ0FBQyxrQkFBa0IsRUFBRUcsYUFBYSxTQUFTLENBQUMsRUFBR0osNERBQVVBLEVBQUc7WUFBRUs7WUFBTyxHQUFHQyxPQUFPO1FBQUM7SUFDeEg7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvY2hhdC9jb21wbGV0aW9ucy9tZXNzYWdlcy5tanM/MjM0MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9wYWdpbmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcm5hbC91dGlscy9wYXRoLm1qc1wiO1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbWVzc2FnZXMgaW4gYSBzdG9yZWQgY2hhdCBjb21wbGV0aW9uLiBPbmx5IENoYXQgQ29tcGxldGlvbnMgdGhhdCBoYXZlXG4gICAgICogYmVlbiBjcmVhdGVkIHdpdGggdGhlIGBzdG9yZWAgcGFyYW1ldGVyIHNldCB0byBgdHJ1ZWAgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiAvLyBBdXRvbWF0aWNhbGx5IGZldGNoZXMgbW9yZSBwYWdlcyBhcyBuZWVkZWQuXG4gICAgICogZm9yIGF3YWl0IChjb25zdCBjaGF0Q29tcGxldGlvblN0b3JlTWVzc2FnZSBvZiBjbGllbnQuY2hhdC5jb21wbGV0aW9ucy5tZXNzYWdlcy5saXN0KFxuICAgICAqICAgJ2NvbXBsZXRpb25faWQnLFxuICAgICAqICkpIHtcbiAgICAgKiAgIC8vIC4uLlxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBsaXN0KGNvbXBsZXRpb25JRCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QocGF0aCBgL2NoYXQvY29tcGxldGlvbnMvJHtjb21wbGV0aW9uSUR9L21lc3NhZ2VzYCwgKEN1cnNvclBhZ2UpLCB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lc3NhZ2VzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDdXJzb3JQYWdlIiwicGF0aCIsIk1lc3NhZ2VzIiwibGlzdCIsImNvbXBsZXRpb25JRCIsInF1ZXJ5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJnZXRBUElMaXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/chat/completions/messages.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/chat/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/resources/chat/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* reexport safe */ _chat_mjs__WEBPACK_IMPORTED_MODULE_0__.Chat),\n/* harmony export */   Completions: () => (/* reexport safe */ _completions_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions)\n/* harmony export */ });\n/* harmony import */ var _chat_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chat.mjs */ \"(rsc)/./node_modules/openai/resources/chat/chat.mjs\");\n/* harmony import */ var _completions_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./completions/index.mjs */ \"(rsc)/./node_modules/openai/resources/chat/completions/index.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ3BEO0FBQ3FCLENBQ3ZELGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvY2hhdC9pbmRleC5tanM/NjIzZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuZXhwb3J0IHsgQ2hhdCB9IGZyb20gXCIuL2NoYXQubWpzXCI7XG5leHBvcnQgeyBDb21wbGV0aW9ucywgfSBmcm9tIFwiLi9jb21wbGV0aW9ucy9pbmRleC5tanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOlsiQ2hhdCIsIkNvbXBsZXRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/chat/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/completions.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/completions.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: () => (/* binding */ Completions)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Completions extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(body, options) {\n        return this._client.post(\"/completions\", {\n            body,\n            ...options,\n            stream: body.stream ?? false\n        });\n    }\n} //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jb21wbGV0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxzRkFBc0Y7QUFDbkM7QUFDNUMsTUFBTUMsb0JBQW9CRCwyREFBV0E7SUFDeENFLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxnQkFBZ0I7WUFBRUg7WUFBTSxHQUFHQyxPQUFPO1lBQUVHLFFBQVFKLEtBQUtJLE1BQU0sSUFBSTtRQUFNO0lBQzlGO0FBQ0osRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NvbXBsZXRpb25zLm1qcz9hNDgxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi9jb3JlL3Jlc291cmNlLm1qc1wiO1xuZXhwb3J0IGNsYXNzIENvbXBsZXRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2NvbXBsZXRpb25zJywgeyBib2R5LCAuLi5vcHRpb25zLCBzdHJlYW06IGJvZHkuc3RyZWFtID8/IGZhbHNlIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBsZXRpb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDb21wbGV0aW9ucyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJzdHJlYW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/completions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/containers/containers.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/containers/containers.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Containers: () => (/* binding */ Containers)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _files_files_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./files/files.mjs */ \"(rsc)/./node_modules/openai/resources/containers/files/files.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\nclass Containers extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.files = new _files_files_mjs__WEBPACK_IMPORTED_MODULE_1__.Files(this._client);\n    }\n    /**\n     * Create Container\n     */ create(body, options) {\n        return this._client.post(\"/containers\", {\n            body,\n            ...options\n        });\n    }\n    /**\n     * Retrieve Container\n     */ retrieve(containerID, options) {\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__.path`/containers/${containerID}`, options);\n    }\n    /**\n     * List Containers\n     */ list(query = {}, options) {\n        return this._client.getAPIList(\"/containers\", _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Delete Container\n     */ delete(containerID, options) {\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__.path`/containers/${containerID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n                {\n                    Accept: \"*/*\"\n                },\n                options?.headers\n            ])\n        });\n    }\n}\nContainers.Files = _files_files_mjs__WEBPACK_IMPORTED_MODULE_1__.Files; //# sourceMappingURL=containers.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jb250YWluZXJzL2NvbnRhaW5lcnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHNGQUFzRjtBQUNoQztBQUNSO0FBQ0g7QUFDWTtBQUNHO0FBQ0w7QUFDOUMsTUFBTU0sbUJBQW1CTiwyREFBV0E7SUFDdkNPLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSVIsbURBQWMsQ0FBQyxJQUFJLENBQUNTLE9BQU87SUFDaEQ7SUFDQTs7S0FFQyxHQUNEQyxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDSSxJQUFJLENBQUMsZUFBZTtZQUFFRjtZQUFNLEdBQUdDLE9BQU87UUFBQztJQUMvRDtJQUNBOztLQUVDLEdBQ0RFLFNBQVNDLFdBQVcsRUFBRUgsT0FBTyxFQUFFO1FBQzNCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNPLEdBQUcsQ0FBQ1osMERBQUssQ0FBQyxZQUFZLEVBQUVXLFlBQVksQ0FBQyxFQUFFSDtJQUMvRDtJQUNBOztLQUVDLEdBQ0RLLEtBQUtDLFFBQVEsQ0FBQyxDQUFDLEVBQUVOLE9BQU8sRUFBRTtRQUN0QixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDVSxVQUFVLENBQUMsZUFBZ0JqQiw0REFBVUEsRUFBRztZQUFFZ0I7WUFBTyxHQUFHTixPQUFPO1FBQUM7SUFDcEY7SUFDQTs7S0FFQyxHQUNEUSxPQUFPTCxXQUFXLEVBQUVILE9BQU8sRUFBRTtRQUN6QixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDVyxNQUFNLENBQUNoQiwwREFBSyxDQUFDLFlBQVksRUFBRVcsWUFBWSxDQUFDLEVBQUU7WUFDMUQsR0FBR0gsT0FBTztZQUNWUyxTQUFTbEIsbUVBQVlBLENBQUM7Z0JBQUM7b0JBQUVtQixRQUFRO2dCQUFNO2dCQUFHVixTQUFTUzthQUFRO1FBQy9EO0lBQ0o7QUFDSjtBQUNBaEIsV0FBV0osS0FBSyxHQUFHQSxtREFBS0EsRUFDeEIsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jb250YWluZXJzL2NvbnRhaW5lcnMubWpzPzlhM2MiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBGaWxlc0FQSSBmcm9tIFwiLi9maWxlcy9maWxlcy5tanNcIjtcbmltcG9ydCB7IEZpbGVzLCB9IGZyb20gXCIuL2ZpbGVzL2ZpbGVzLm1qc1wiO1xuaW1wb3J0IHsgQ3Vyc29yUGFnZSB9IGZyb20gXCIuLi8uLi9jb3JlL3BhZ2luYXRpb24ubWpzXCI7XG5pbXBvcnQgeyBidWlsZEhlYWRlcnMgfSBmcm9tIFwiLi4vLi4vaW50ZXJuYWwvaGVhZGVycy5tanNcIjtcbmltcG9ydCB7IHBhdGggfSBmcm9tIFwiLi4vLi4vaW50ZXJuYWwvdXRpbHMvcGF0aC5tanNcIjtcbmV4cG9ydCBjbGFzcyBDb250YWluZXJzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmZpbGVzID0gbmV3IEZpbGVzQVBJLkZpbGVzKHRoaXMuX2NsaWVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBDb250YWluZXJcbiAgICAgKi9cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9jb250YWluZXJzJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSBDb250YWluZXJcbiAgICAgKi9cbiAgICByZXRyaWV2ZShjb250YWluZXJJRCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChwYXRoIGAvY29udGFpbmVycy8ke2NvbnRhaW5lcklEfWAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaXN0IENvbnRhaW5lcnNcbiAgICAgKi9cbiAgICBsaXN0KHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvY29udGFpbmVycycsIChDdXJzb3JQYWdlKSwgeyBxdWVyeSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIENvbnRhaW5lclxuICAgICAqL1xuICAgIGRlbGV0ZShjb250YWluZXJJRCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShwYXRoIGAvY29udGFpbmVycy8ke2NvbnRhaW5lcklEfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW3sgQWNjZXB0OiAnKi8qJyB9LCBvcHRpb25zPy5oZWFkZXJzXSksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbkNvbnRhaW5lcnMuRmlsZXMgPSBGaWxlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRhaW5lcnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkZpbGVzQVBJIiwiRmlsZXMiLCJDdXJzb3JQYWdlIiwiYnVpbGRIZWFkZXJzIiwicGF0aCIsIkNvbnRhaW5lcnMiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImZpbGVzIiwiX2NsaWVudCIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwicG9zdCIsInJldHJpZXZlIiwiY29udGFpbmVySUQiLCJnZXQiLCJsaXN0IiwicXVlcnkiLCJnZXRBUElMaXN0IiwiZGVsZXRlIiwiaGVhZGVycyIsIkFjY2VwdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/containers/containers.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/containers/files/content.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/openai/resources/containers/files/content.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Content: () => (/* binding */ Content)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Content extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Retrieve Container File Content\n     */ retrieve(fileID, params, options) {\n        const { container_id } = params;\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/containers/${container_id}/files/${fileID}/content`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_1__.buildHeaders)([\n                {\n                    Accept: \"application/binary\"\n                },\n                options?.headers\n            ]),\n            __binaryResponse: true\n        });\n    }\n} //# sourceMappingURL=content.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jb250YWluZXJzL2ZpbGVzL2NvbnRlbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDN0I7QUFDSTtBQUNMO0FBQ2pELE1BQU1HLGdCQUFnQkgsMkRBQVdBO0lBQ3BDOztLQUVDLEdBQ0RJLFNBQVNDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDOUIsTUFBTSxFQUFFQyxZQUFZLEVBQUUsR0FBR0Y7UUFDekIsT0FBTyxJQUFJLENBQUNHLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDUiwwREFBSyxDQUFDLFlBQVksRUFBRU0sYUFBYSxPQUFPLEVBQUVILE9BQU8sUUFBUSxDQUFDLEVBQUU7WUFDaEYsR0FBR0UsT0FBTztZQUNWSSxTQUFTVixtRUFBWUEsQ0FBQztnQkFBQztvQkFBRVcsUUFBUTtnQkFBcUI7Z0JBQUdMLFNBQVNJO2FBQVE7WUFDMUVFLGtCQUFrQjtRQUN0QjtJQUNKO0FBQ0osRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NvbnRhaW5lcnMvZmlsZXMvY29udGVudC5tanM/YzQzOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IGJ1aWxkSGVhZGVycyB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcm5hbC9oZWFkZXJzLm1qc1wiO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcm5hbC91dGlscy9wYXRoLm1qc1wiO1xuZXhwb3J0IGNsYXNzIENvbnRlbnQgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgQ29udGFpbmVyIEZpbGUgQ29udGVudFxuICAgICAqL1xuICAgIHJldHJpZXZlKGZpbGVJRCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyX2lkIH0gPSBwYXJhbXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KHBhdGggYC9jb250YWluZXJzLyR7Y29udGFpbmVyX2lkfS9maWxlcy8ke2ZpbGVJRH0vY29udGVudGAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW3sgQWNjZXB0OiAnYXBwbGljYXRpb24vYmluYXJ5JyB9LCBvcHRpb25zPy5oZWFkZXJzXSksXG4gICAgICAgICAgICBfX2JpbmFyeVJlc3BvbnNlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZW50Lm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJidWlsZEhlYWRlcnMiLCJwYXRoIiwiQ29udGVudCIsInJldHJpZXZlIiwiZmlsZUlEIiwicGFyYW1zIiwib3B0aW9ucyIsImNvbnRhaW5lcl9pZCIsIl9jbGllbnQiLCJnZXQiLCJoZWFkZXJzIiwiQWNjZXB0IiwiX19iaW5hcnlSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/containers/files/content.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/containers/files/files.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/resources/containers/files/files.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Files: () => (/* binding */ Files)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _content_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./content.mjs */ \"(rsc)/./node_modules/openai/resources/containers/files/content.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n/* harmony import */ var _internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../internal/uploads.mjs */ \"(rsc)/./node_modules/openai/internal/uploads.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass Files extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.content = new _content_mjs__WEBPACK_IMPORTED_MODULE_1__.Content(this._client);\n    }\n    /**\n     * Create a Container File\n     *\n     * You can send either a multipart/form-data request with the raw file content, or\n     * a JSON request with a file ID.\n     */ create(containerID, body, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/containers/${containerID}/files`, (0,_internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_4__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }, this._client));\n    }\n    /**\n     * Retrieve Container File\n     */ retrieve(fileID, params, options) {\n        const { container_id } = params;\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/containers/${container_id}/files/${fileID}`, options);\n    }\n    /**\n     * List Container files\n     */ list(containerID, query = {}, options) {\n        return this._client.getAPIList(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/containers/${containerID}/files`, _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Delete Container File\n     */ delete(fileID, params, options) {\n        const { container_id } = params;\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/containers/${container_id}/files/${fileID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n                {\n                    Accept: \"*/*\"\n                },\n                options?.headers\n            ])\n        });\n    }\n}\nFiles.Content = _content_mjs__WEBPACK_IMPORTED_MODULE_1__.Content; //# sourceMappingURL=files.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jb250YWluZXJzL2ZpbGVzL2ZpbGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQzdCO0FBQ2I7QUFDSjtBQUNrQjtBQUNHO0FBQ2U7QUFDcEI7QUFDakQsTUFBTU8sY0FBY1AsMkRBQVdBO0lBQ2xDUSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlULGlEQUFrQixDQUFDLElBQUksQ0FBQ1UsT0FBTztJQUN0RDtJQUNBOzs7OztLQUtDLEdBQ0RDLE9BQU9DLFdBQVcsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDL0IsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ssSUFBSSxDQUFDViwwREFBSyxDQUFDLFlBQVksRUFBRU8sWUFBWSxNQUFNLENBQUMsRUFBRVIsa0ZBQTJCQSxDQUFDO1lBQUVTO1lBQU0sR0FBR0MsT0FBTztRQUFDLEdBQUcsSUFBSSxDQUFDSixPQUFPO0lBQ3BJO0lBQ0E7O0tBRUMsR0FDRE0sU0FBU0MsTUFBTSxFQUFFQyxNQUFNLEVBQUVKLE9BQU8sRUFBRTtRQUM5QixNQUFNLEVBQUVLLFlBQVksRUFBRSxHQUFHRDtRQUN6QixPQUFPLElBQUksQ0FBQ1IsT0FBTyxDQUFDVSxHQUFHLENBQUNmLDBEQUFLLENBQUMsWUFBWSxFQUFFYyxhQUFhLE9BQU8sRUFBRUYsT0FBTyxDQUFDLEVBQUVIO0lBQ2hGO0lBQ0E7O0tBRUMsR0FDRE8sS0FBS1QsV0FBVyxFQUFFVSxRQUFRLENBQUMsQ0FBQyxFQUFFUixPQUFPLEVBQUU7UUFDbkMsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ2EsVUFBVSxDQUFDbEIsMERBQUssQ0FBQyxZQUFZLEVBQUVPLFlBQVksTUFBTSxDQUFDLEVBQUdWLDREQUFVQSxFQUFHO1lBQ2xGb0I7WUFDQSxHQUFHUixPQUFPO1FBQ2Q7SUFDSjtJQUNBOztLQUVDLEdBQ0RVLE9BQU9QLE1BQU0sRUFBRUMsTUFBTSxFQUFFSixPQUFPLEVBQUU7UUFDNUIsTUFBTSxFQUFFSyxZQUFZLEVBQUUsR0FBR0Q7UUFDekIsT0FBTyxJQUFJLENBQUNSLE9BQU8sQ0FBQ2MsTUFBTSxDQUFDbkIsMERBQUssQ0FBQyxZQUFZLEVBQUVjLGFBQWEsT0FBTyxFQUFFRixPQUFPLENBQUMsRUFBRTtZQUMzRSxHQUFHSCxPQUFPO1lBQ1ZXLFNBQVN0QixtRUFBWUEsQ0FBQztnQkFBQztvQkFBRXVCLFFBQVE7Z0JBQU07Z0JBQUdaLFNBQVNXO2FBQVE7UUFDL0Q7SUFDSjtBQUNKO0FBQ0FuQixNQUFNTCxPQUFPLEdBQUdBLGlEQUFPQSxFQUN2QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NvbnRhaW5lcnMvZmlsZXMvZmlsZXMubWpzPzM2ZmUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBDb250ZW50QVBJIGZyb20gXCIuL2NvbnRlbnQubWpzXCI7XG5pbXBvcnQgeyBDb250ZW50IH0gZnJvbSBcIi4vY29udGVudC5tanNcIjtcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9wYWdpbmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgYnVpbGRIZWFkZXJzIH0gZnJvbSBcIi4uLy4uLy4uL2ludGVybmFsL2hlYWRlcnMubWpzXCI7XG5pbXBvcnQgeyBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vLi4vaW50ZXJuYWwvdXBsb2Fkcy5tanNcIjtcbmltcG9ydCB7IHBhdGggfSBmcm9tIFwiLi4vLi4vLi4vaW50ZXJuYWwvdXRpbHMvcGF0aC5tanNcIjtcbmV4cG9ydCBjbGFzcyBGaWxlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb250ZW50ID0gbmV3IENvbnRlbnRBUEkuQ29udGVudCh0aGlzLl9jbGllbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBDb250YWluZXIgRmlsZVxuICAgICAqXG4gICAgICogWW91IGNhbiBzZW5kIGVpdGhlciBhIG11bHRpcGFydC9mb3JtLWRhdGEgcmVxdWVzdCB3aXRoIHRoZSByYXcgZmlsZSBjb250ZW50LCBvclxuICAgICAqIGEgSlNPTiByZXF1ZXN0IHdpdGggYSBmaWxlIElELlxuICAgICAqL1xuICAgIGNyZWF0ZShjb250YWluZXJJRCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QocGF0aCBgL2NvbnRhaW5lcnMvJHtjb250YWluZXJJRH0vZmlsZXNgLCBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zIH0sIHRoaXMuX2NsaWVudCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSBDb250YWluZXIgRmlsZVxuICAgICAqL1xuICAgIHJldHJpZXZlKGZpbGVJRCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyX2lkIH0gPSBwYXJhbXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KHBhdGggYC9jb250YWluZXJzLyR7Y29udGFpbmVyX2lkfS9maWxlcy8ke2ZpbGVJRH1gLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlzdCBDb250YWluZXIgZmlsZXNcbiAgICAgKi9cbiAgICBsaXN0KGNvbnRhaW5lcklELCBxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdChwYXRoIGAvY29udGFpbmVycy8ke2NvbnRhaW5lcklEfS9maWxlc2AsIChDdXJzb3JQYWdlKSwge1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIENvbnRhaW5lciBGaWxlXG4gICAgICovXG4gICAgZGVsZXRlKGZpbGVJRCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyX2lkIH0gPSBwYXJhbXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKHBhdGggYC9jb250YWluZXJzLyR7Y29udGFpbmVyX2lkfS9maWxlcy8ke2ZpbGVJRH1gLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFt7IEFjY2VwdDogJyovKicgfSwgb3B0aW9ucz8uaGVhZGVyc10pLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5GaWxlcy5Db250ZW50ID0gQ29udGVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbGVzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDb250ZW50QVBJIiwiQ29udGVudCIsIkN1cnNvclBhZ2UiLCJidWlsZEhlYWRlcnMiLCJtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMiLCJwYXRoIiwiRmlsZXMiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImNvbnRlbnQiLCJfY2xpZW50IiwiY3JlYXRlIiwiY29udGFpbmVySUQiLCJib2R5Iiwib3B0aW9ucyIsInBvc3QiLCJyZXRyaWV2ZSIsImZpbGVJRCIsInBhcmFtcyIsImNvbnRhaW5lcl9pZCIsImdldCIsImxpc3QiLCJxdWVyeSIsImdldEFQSUxpc3QiLCJkZWxldGUiLCJoZWFkZXJzIiwiQWNjZXB0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/containers/files/files.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/embeddings.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/resources/embeddings.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* binding */ Embeddings)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _internal_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/utils.mjs */ \"(rsc)/./node_modules/openai/internal/utils.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Embeddings extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates an embedding vector representing the input text.\n     *\n     * @example\n     * ```ts\n     * const createEmbeddingResponse =\n     *   await client.embeddings.create({\n     *     input: 'The quick brown fox jumped over the lazy dog',\n     *     model: 'text-embedding-3-small',\n     *   });\n     * ```\n     */ create(body, options) {\n        const hasUserProvidedEncodingFormat = !!body.encoding_format;\n        // No encoding_format specified, defaulting to base64 for performance reasons\n        // See https://github.com/openai/openai-node/pull/1312\n        let encoding_format = hasUserProvidedEncodingFormat ? body.encoding_format : \"base64\";\n        if (hasUserProvidedEncodingFormat) {\n            (0,_internal_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.loggerFor)(this._client).debug(\"embeddings/user defined encoding_format:\", body.encoding_format);\n        }\n        const response = this._client.post(\"/embeddings\", {\n            body: {\n                ...body,\n                encoding_format: encoding_format\n            },\n            ...options\n        });\n        // if the user specified an encoding_format, return the response as-is\n        if (hasUserProvidedEncodingFormat) {\n            return response;\n        }\n        // in this stage, we are sure the user did not specify an encoding_format\n        // and we defaulted to base64 for performance reasons\n        // we are sure then that the response is base64 encoded, let's decode it\n        // the returned result will be a float32 array since this is OpenAI API's default encoding\n        (0,_internal_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.loggerFor)(this._client).debug(\"embeddings/decoding base64 embeddings from base64\");\n        return response._thenUnwrap((response)=>{\n            if (response && response.data) {\n                response.data.forEach((embeddingBase64Obj)=>{\n                    const embeddingBase64Str = embeddingBase64Obj.embedding;\n                    embeddingBase64Obj.embedding = (0,_internal_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.toFloat32Array)(embeddingBase64Str);\n                });\n            }\n            return response;\n        });\n    }\n} //# sourceMappingURL=embeddings.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9lbWJlZGRpbmdzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxzRkFBc0Y7QUFDbkM7QUFDZTtBQUMzRCxNQUFNRyxtQkFBbUJILDJEQUFXQTtJQUN2Qzs7Ozs7Ozs7Ozs7S0FXQyxHQUNESSxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixNQUFNQyxnQ0FBZ0MsQ0FBQyxDQUFDRixLQUFLRyxlQUFlO1FBQzVELDZFQUE2RTtRQUM3RSxzREFBc0Q7UUFDdEQsSUFBSUEsa0JBQWtCRCxnQ0FBZ0NGLEtBQUtHLGVBQWUsR0FBRztRQUM3RSxJQUFJRCwrQkFBK0I7WUFDL0JOLDhEQUFTQSxDQUFDLElBQUksQ0FBQ1EsT0FBTyxFQUFFQyxLQUFLLENBQUMsNENBQTRDTCxLQUFLRyxlQUFlO1FBQ2xHO1FBQ0EsTUFBTUcsV0FBVyxJQUFJLENBQUNGLE9BQU8sQ0FBQ0csSUFBSSxDQUFDLGVBQWU7WUFDOUNQLE1BQU07Z0JBQ0YsR0FBR0EsSUFBSTtnQkFDUEcsaUJBQWlCQTtZQUNyQjtZQUNBLEdBQUdGLE9BQU87UUFDZDtRQUNBLHNFQUFzRTtRQUN0RSxJQUFJQywrQkFBK0I7WUFDL0IsT0FBT0k7UUFDWDtRQUNBLHlFQUF5RTtRQUN6RSxxREFBcUQ7UUFDckQsd0VBQXdFO1FBQ3hFLDBGQUEwRjtRQUMxRlYsOERBQVNBLENBQUMsSUFBSSxDQUFDUSxPQUFPLEVBQUVDLEtBQUssQ0FBQztRQUM5QixPQUFPQyxTQUFTRSxXQUFXLENBQUMsQ0FBQ0Y7WUFDekIsSUFBSUEsWUFBWUEsU0FBU0csSUFBSSxFQUFFO2dCQUMzQkgsU0FBU0csSUFBSSxDQUFDQyxPQUFPLENBQUMsQ0FBQ0M7b0JBQ25CLE1BQU1DLHFCQUFxQkQsbUJBQW1CRSxTQUFTO29CQUN2REYsbUJBQW1CRSxTQUFTLEdBQUdoQixtRUFBY0EsQ0FBQ2U7Z0JBQ2xEO1lBQ0o7WUFDQSxPQUFPTjtRQUNYO0lBQ0o7QUFDSixFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvZW1iZWRkaW5ncy5tanM/ODc5MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IGxvZ2dlckZvciwgdG9GbG9hdDMyQXJyYXkgfSBmcm9tIFwiLi4vaW50ZXJuYWwvdXRpbHMubWpzXCI7XG5leHBvcnQgY2xhc3MgRW1iZWRkaW5ncyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGVtYmVkZGluZyB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBpbnB1dCB0ZXh0LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IGNyZWF0ZUVtYmVkZGluZ1Jlc3BvbnNlID1cbiAgICAgKiAgIGF3YWl0IGNsaWVudC5lbWJlZGRpbmdzLmNyZWF0ZSh7XG4gICAgICogICAgIGlucHV0OiAnVGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cnLFxuICAgICAqICAgICBtb2RlbDogJ3RleHQtZW1iZWRkaW5nLTMtc21hbGwnLFxuICAgICAqICAgfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgaGFzVXNlclByb3ZpZGVkRW5jb2RpbmdGb3JtYXQgPSAhIWJvZHkuZW5jb2RpbmdfZm9ybWF0O1xuICAgICAgICAvLyBObyBlbmNvZGluZ19mb3JtYXQgc3BlY2lmaWVkLCBkZWZhdWx0aW5nIHRvIGJhc2U2NCBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL29wZW5haS9vcGVuYWktbm9kZS9wdWxsLzEzMTJcbiAgICAgICAgbGV0IGVuY29kaW5nX2Zvcm1hdCA9IGhhc1VzZXJQcm92aWRlZEVuY29kaW5nRm9ybWF0ID8gYm9keS5lbmNvZGluZ19mb3JtYXQgOiAnYmFzZTY0JztcbiAgICAgICAgaWYgKGhhc1VzZXJQcm92aWRlZEVuY29kaW5nRm9ybWF0KSB7XG4gICAgICAgICAgICBsb2dnZXJGb3IodGhpcy5fY2xpZW50KS5kZWJ1ZygnZW1iZWRkaW5ncy91c2VyIGRlZmluZWQgZW5jb2RpbmdfZm9ybWF0OicsIGJvZHkuZW5jb2RpbmdfZm9ybWF0KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMuX2NsaWVudC5wb3N0KCcvZW1iZWRkaW5ncycsIHtcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAuLi5ib2R5LFxuICAgICAgICAgICAgICAgIGVuY29kaW5nX2Zvcm1hdDogZW5jb2RpbmdfZm9ybWF0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBpZiB0aGUgdXNlciBzcGVjaWZpZWQgYW4gZW5jb2RpbmdfZm9ybWF0LCByZXR1cm4gdGhlIHJlc3BvbnNlIGFzLWlzXG4gICAgICAgIGlmIChoYXNVc2VyUHJvdmlkZWRFbmNvZGluZ0Zvcm1hdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGluIHRoaXMgc3RhZ2UsIHdlIGFyZSBzdXJlIHRoZSB1c2VyIGRpZCBub3Qgc3BlY2lmeSBhbiBlbmNvZGluZ19mb3JtYXRcbiAgICAgICAgLy8gYW5kIHdlIGRlZmF1bHRlZCB0byBiYXNlNjQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgICAgICAgLy8gd2UgYXJlIHN1cmUgdGhlbiB0aGF0IHRoZSByZXNwb25zZSBpcyBiYXNlNjQgZW5jb2RlZCwgbGV0J3MgZGVjb2RlIGl0XG4gICAgICAgIC8vIHRoZSByZXR1cm5lZCByZXN1bHQgd2lsbCBiZSBhIGZsb2F0MzIgYXJyYXkgc2luY2UgdGhpcyBpcyBPcGVuQUkgQVBJJ3MgZGVmYXVsdCBlbmNvZGluZ1xuICAgICAgICBsb2dnZXJGb3IodGhpcy5fY2xpZW50KS5kZWJ1ZygnZW1iZWRkaW5ncy9kZWNvZGluZyBiYXNlNjQgZW1iZWRkaW5ncyBmcm9tIGJhc2U2NCcpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuX3RoZW5VbndyYXAoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UuZGF0YSkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEuZm9yRWFjaCgoZW1iZWRkaW5nQmFzZTY0T2JqKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVtYmVkZGluZ0Jhc2U2NFN0ciA9IGVtYmVkZGluZ0Jhc2U2NE9iai5lbWJlZGRpbmc7XG4gICAgICAgICAgICAgICAgICAgIGVtYmVkZGluZ0Jhc2U2NE9iai5lbWJlZGRpbmcgPSB0b0Zsb2F0MzJBcnJheShlbWJlZGRpbmdCYXNlNjRTdHIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbWJlZGRpbmdzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJsb2dnZXJGb3IiLCJ0b0Zsb2F0MzJBcnJheSIsIkVtYmVkZGluZ3MiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsImhhc1VzZXJQcm92aWRlZEVuY29kaW5nRm9ybWF0IiwiZW5jb2RpbmdfZm9ybWF0IiwiX2NsaWVudCIsImRlYnVnIiwicmVzcG9uc2UiLCJwb3N0IiwiX3RoZW5VbndyYXAiLCJkYXRhIiwiZm9yRWFjaCIsImVtYmVkZGluZ0Jhc2U2NE9iaiIsImVtYmVkZGluZ0Jhc2U2NFN0ciIsImVtYmVkZGluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/embeddings.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/evals/evals.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/evals/evals.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Evals: () => (/* binding */ Evals)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./runs/runs.mjs */ \"(rsc)/./node_modules/openai/resources/evals/runs/runs.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass Evals extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.runs = new _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_1__.Runs(this._client);\n    }\n    /**\n     * Create the structure of an evaluation that can be used to test a model's\n     * performance. An evaluation is a set of testing criteria and the config for a\n     * data source, which dictates the schema of the data used in the evaluation. After\n     * creating an evaluation, you can run it on different models and model parameters.\n     * We support several types of graders and datasources. For more information, see\n     * the [Evals guide](https://platform.openai.com/docs/guides/evals).\n     */ create(body, options) {\n        return this._client.post(\"/evals\", {\n            body,\n            ...options\n        });\n    }\n    /**\n     * Get an evaluation by ID.\n     */ retrieve(evalID, options) {\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/evals/${evalID}`, options);\n    }\n    /**\n     * Update certain properties of an evaluation.\n     */ update(evalID, body, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/evals/${evalID}`, {\n            body,\n            ...options\n        });\n    }\n    /**\n     * List evaluations for a project.\n     */ list(query = {}, options) {\n        return this._client.getAPIList(\"/evals\", _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Delete an evaluation.\n     */ delete(evalID, options) {\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/evals/${evalID}`, options);\n    }\n}\nEvals.Runs = _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_1__.Runs; //# sourceMappingURL=evals.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9ldmFscy9ldmFscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDaEM7QUFDWDtBQUNIO0FBQ2U7QUFDRjtBQUM5QyxNQUFNSyxjQUFjTCwyREFBV0E7SUFDbENNLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxJQUFJLEdBQUcsSUFBSVAsZ0RBQVksQ0FBQyxJQUFJLENBQUNRLE9BQU87SUFDN0M7SUFDQTs7Ozs7OztLQU9DLEdBQ0RDLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNJLElBQUksQ0FBQyxVQUFVO1lBQUVGO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQzFEO0lBQ0E7O0tBRUMsR0FDREUsU0FBU0MsTUFBTSxFQUFFSCxPQUFPLEVBQUU7UUFDdEIsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQ08sR0FBRyxDQUFDWiwwREFBSyxDQUFDLE9BQU8sRUFBRVcsT0FBTyxDQUFDLEVBQUVIO0lBQ3JEO0lBQ0E7O0tBRUMsR0FDREssT0FBT0YsTUFBTSxFQUFFSixJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUMxQixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDSSxJQUFJLENBQUNULDBEQUFLLENBQUMsT0FBTyxFQUFFVyxPQUFPLENBQUMsRUFBRTtZQUFFSjtZQUFNLEdBQUdDLE9BQU87UUFBQztJQUN6RTtJQUNBOztLQUVDLEdBQ0RNLEtBQUtDLFFBQVEsQ0FBQyxDQUFDLEVBQUVQLE9BQU8sRUFBRTtRQUN0QixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDVyxVQUFVLENBQUMsVUFBV2pCLDREQUFVQSxFQUFHO1lBQUVnQjtZQUFPLEdBQUdQLE9BQU87UUFBQztJQUMvRTtJQUNBOztLQUVDLEdBQ0RTLE9BQU9OLE1BQU0sRUFBRUgsT0FBTyxFQUFFO1FBQ3BCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNZLE1BQU0sQ0FBQ2pCLDBEQUFLLENBQUMsT0FBTyxFQUFFVyxPQUFPLENBQUMsRUFBRUg7SUFDeEQ7QUFDSjtBQUNBUCxNQUFNSCxJQUFJLEdBQUdBLGdEQUFJQSxFQUNqQixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2V2YWxzL2V2YWxzLm1qcz81YjY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9jb3JlL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgUnVuc0FQSSBmcm9tIFwiLi9ydW5zL3J1bnMubWpzXCI7XG5pbXBvcnQgeyBSdW5zLCB9IGZyb20gXCIuL3J1bnMvcnVucy5tanNcIjtcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tIFwiLi4vLi4vY29yZS9wYWdpbmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gXCIuLi8uLi9pbnRlcm5hbC91dGlscy9wYXRoLm1qc1wiO1xuZXhwb3J0IGNsYXNzIEV2YWxzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnJ1bnMgPSBuZXcgUnVuc0FQSS5SdW5zKHRoaXMuX2NsaWVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgc3RydWN0dXJlIG9mIGFuIGV2YWx1YXRpb24gdGhhdCBjYW4gYmUgdXNlZCB0byB0ZXN0IGEgbW9kZWwnc1xuICAgICAqIHBlcmZvcm1hbmNlLiBBbiBldmFsdWF0aW9uIGlzIGEgc2V0IG9mIHRlc3RpbmcgY3JpdGVyaWEgYW5kIHRoZSBjb25maWcgZm9yIGFcbiAgICAgKiBkYXRhIHNvdXJjZSwgd2hpY2ggZGljdGF0ZXMgdGhlIHNjaGVtYSBvZiB0aGUgZGF0YSB1c2VkIGluIHRoZSBldmFsdWF0aW9uLiBBZnRlclxuICAgICAqIGNyZWF0aW5nIGFuIGV2YWx1YXRpb24sIHlvdSBjYW4gcnVuIGl0IG9uIGRpZmZlcmVudCBtb2RlbHMgYW5kIG1vZGVsIHBhcmFtZXRlcnMuXG4gICAgICogV2Ugc3VwcG9ydCBzZXZlcmFsIHR5cGVzIG9mIGdyYWRlcnMgYW5kIGRhdGFzb3VyY2VzLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4gICAgICogdGhlIFtFdmFscyBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2V2YWxzKS5cbiAgICAgKi9cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9ldmFscycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFuIGV2YWx1YXRpb24gYnkgSUQuXG4gICAgICovXG4gICAgcmV0cmlldmUoZXZhbElELCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KHBhdGggYC9ldmFscy8ke2V2YWxJRH1gLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIGNlcnRhaW4gcHJvcGVydGllcyBvZiBhbiBldmFsdWF0aW9uLlxuICAgICAqL1xuICAgIHVwZGF0ZShldmFsSUQsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KHBhdGggYC9ldmFscy8ke2V2YWxJRH1gLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpc3QgZXZhbHVhdGlvbnMgZm9yIGEgcHJvamVjdC5cbiAgICAgKi9cbiAgICBsaXN0KHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvZXZhbHMnLCAoQ3Vyc29yUGFnZSksIHsgcXVlcnksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbiBldmFsdWF0aW9uLlxuICAgICAqL1xuICAgIGRlbGV0ZShldmFsSUQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUocGF0aCBgL2V2YWxzLyR7ZXZhbElEfWAsIG9wdGlvbnMpO1xuICAgIH1cbn1cbkV2YWxzLlJ1bnMgPSBSdW5zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZhbHMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIlJ1bnNBUEkiLCJSdW5zIiwiQ3Vyc29yUGFnZSIsInBhdGgiLCJFdmFscyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwicnVucyIsIl9jbGllbnQiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsInBvc3QiLCJyZXRyaWV2ZSIsImV2YWxJRCIsImdldCIsInVwZGF0ZSIsImxpc3QiLCJxdWVyeSIsImdldEFQSUxpc3QiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/evals/evals.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/evals/runs/output-items.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/resources/evals/runs/output-items.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OutputItems: () => (/* binding */ OutputItems)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass OutputItems extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Get an evaluation run output item by ID.\n     */ retrieve(outputItemID, params, options) {\n        const { eval_id, run_id } = params;\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/evals/${eval_id}/runs/${run_id}/output_items/${outputItemID}`, options);\n    }\n    /**\n     * Get a list of output items for an evaluation run.\n     */ list(runID, params, options) {\n        const { eval_id, ...query } = params;\n        return this._client.getAPIList(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/evals/${eval_id}/runs/${runID}/output_items`, _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.CursorPage, {\n            query,\n            ...options\n        });\n    }\n} //# sourceMappingURL=output-items.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9ldmFscy9ydW5zL291dHB1dC1pdGVtcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHNGQUFzRjtBQUM3QjtBQUNDO0FBQ0Y7QUFDakQsTUFBTUcsb0JBQW9CSCwyREFBV0E7SUFDeEM7O0tBRUMsR0FDREksU0FBU0MsWUFBWSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUNwQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFLEdBQUdIO1FBQzVCLE9BQU8sSUFBSSxDQUFDSSxPQUFPLENBQUNDLEdBQUcsQ0FBQ1QsMERBQUssQ0FBQyxPQUFPLEVBQUVNLFFBQVEsTUFBTSxFQUFFQyxPQUFPLGNBQWMsRUFBRUosYUFBYSxDQUFDLEVBQUVFO0lBQ2xHO0lBQ0E7O0tBRUMsR0FDREssS0FBS0MsS0FBSyxFQUFFUCxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUN6QixNQUFNLEVBQUVDLE9BQU8sRUFBRSxHQUFHTSxPQUFPLEdBQUdSO1FBQzlCLE9BQU8sSUFBSSxDQUFDSSxPQUFPLENBQUNLLFVBQVUsQ0FBQ2IsMERBQUssQ0FBQyxPQUFPLEVBQUVNLFFBQVEsTUFBTSxFQUFFSyxNQUFNLGFBQWEsQ0FBQyxFQUFHWiw0REFBVUEsRUFBRztZQUFFYTtZQUFPLEdBQUdQLE9BQU87UUFBQztJQUMxSDtBQUNKLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9ldmFscy9ydW5zL291dHB1dC1pdGVtcy5tanM/Nzg3NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9wYWdpbmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcm5hbC91dGlscy9wYXRoLm1qc1wiO1xuZXhwb3J0IGNsYXNzIE91dHB1dEl0ZW1zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIEdldCBhbiBldmFsdWF0aW9uIHJ1biBvdXRwdXQgaXRlbSBieSBJRC5cbiAgICAgKi9cbiAgICByZXRyaWV2ZShvdXRwdXRJdGVtSUQsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGV2YWxfaWQsIHJ1bl9pZCB9ID0gcGFyYW1zO1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChwYXRoIGAvZXZhbHMvJHtldmFsX2lkfS9ydW5zLyR7cnVuX2lkfS9vdXRwdXRfaXRlbXMvJHtvdXRwdXRJdGVtSUR9YCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIGxpc3Qgb2Ygb3V0cHV0IGl0ZW1zIGZvciBhbiBldmFsdWF0aW9uIHJ1bi5cbiAgICAgKi9cbiAgICBsaXN0KHJ1bklELCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBldmFsX2lkLCAuLi5xdWVyeSB9ID0gcGFyYW1zO1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QocGF0aCBgL2V2YWxzLyR7ZXZhbF9pZH0vcnVucy8ke3J1bklEfS9vdXRwdXRfaXRlbXNgLCAoQ3Vyc29yUGFnZSksIHsgcXVlcnksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0cHV0LWl0ZW1zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDdXJzb3JQYWdlIiwicGF0aCIsIk91dHB1dEl0ZW1zIiwicmV0cmlldmUiLCJvdXRwdXRJdGVtSUQiLCJwYXJhbXMiLCJvcHRpb25zIiwiZXZhbF9pZCIsInJ1bl9pZCIsIl9jbGllbnQiLCJnZXQiLCJsaXN0IiwicnVuSUQiLCJxdWVyeSIsImdldEFQSUxpc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/evals/runs/output-items.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/evals/runs/runs.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/openai/resources/evals/runs/runs.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runs: () => (/* binding */ Runs)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _output_items_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./output-items.mjs */ \"(rsc)/./node_modules/openai/resources/evals/runs/output-items.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass Runs extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.outputItems = new _output_items_mjs__WEBPACK_IMPORTED_MODULE_1__.OutputItems(this._client);\n    }\n    /**\n     * Kicks off a new run for a given evaluation, specifying the data source, and what\n     * model configuration to use to test. The datasource will be validated against the\n     * schema specified in the config of the evaluation.\n     */ create(evalID, body, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/evals/${evalID}/runs`, {\n            body,\n            ...options\n        });\n    }\n    /**\n     * Get an evaluation run by ID.\n     */ retrieve(runID, params, options) {\n        const { eval_id } = params;\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/evals/${eval_id}/runs/${runID}`, options);\n    }\n    /**\n     * Get a list of runs for an evaluation.\n     */ list(evalID, query = {}, options) {\n        return this._client.getAPIList(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/evals/${evalID}/runs`, _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Delete an eval run.\n     */ delete(runID, params, options) {\n        const { eval_id } = params;\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/evals/${eval_id}/runs/${runID}`, options);\n    }\n    /**\n     * Cancel an ongoing evaluation run.\n     */ cancel(runID, params, options) {\n        const { eval_id } = params;\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/evals/${eval_id}/runs/${runID}`, options);\n    }\n}\nRuns.OutputItems = _output_items_mjs__WEBPACK_IMPORTED_MODULE_1__.OutputItems; //# sourceMappingURL=runs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9ldmFscy9ydW5zL3J1bnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQzdCO0FBQ0o7QUFDSDtBQUNRO0FBQ0Y7QUFDakQsTUFBTUssYUFBYUwsMkRBQVdBO0lBQ2pDTSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUlQLDBEQUEwQixDQUFDLElBQUksQ0FBQ1EsT0FBTztJQUNsRTtJQUNBOzs7O0tBSUMsR0FDREMsT0FBT0MsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUMxQixPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUFDSyxJQUFJLENBQUNWLDBEQUFLLENBQUMsT0FBTyxFQUFFTyxPQUFPLEtBQUssQ0FBQyxFQUFFO1lBQUVDO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQzlFO0lBQ0E7O0tBRUMsR0FDREUsU0FBU0MsS0FBSyxFQUFFQyxNQUFNLEVBQUVKLE9BQU8sRUFBRTtRQUM3QixNQUFNLEVBQUVLLE9BQU8sRUFBRSxHQUFHRDtRQUNwQixPQUFPLElBQUksQ0FBQ1IsT0FBTyxDQUFDVSxHQUFHLENBQUNmLDBEQUFLLENBQUMsT0FBTyxFQUFFYyxRQUFRLE1BQU0sRUFBRUYsTUFBTSxDQUFDLEVBQUVIO0lBQ3BFO0lBQ0E7O0tBRUMsR0FDRE8sS0FBS1QsTUFBTSxFQUFFVSxRQUFRLENBQUMsQ0FBQyxFQUFFUixPQUFPLEVBQUU7UUFDOUIsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ2EsVUFBVSxDQUFDbEIsMERBQUssQ0FBQyxPQUFPLEVBQUVPLE9BQU8sS0FBSyxDQUFDLEVBQUdSLDREQUFVQSxFQUFHO1lBQ3ZFa0I7WUFDQSxHQUFHUixPQUFPO1FBQ2Q7SUFDSjtJQUNBOztLQUVDLEdBQ0RVLE9BQU9QLEtBQUssRUFBRUMsTUFBTSxFQUFFSixPQUFPLEVBQUU7UUFDM0IsTUFBTSxFQUFFSyxPQUFPLEVBQUUsR0FBR0Q7UUFDcEIsT0FBTyxJQUFJLENBQUNSLE9BQU8sQ0FBQ2MsTUFBTSxDQUFDbkIsMERBQUssQ0FBQyxPQUFPLEVBQUVjLFFBQVEsTUFBTSxFQUFFRixNQUFNLENBQUMsRUFBRUg7SUFDdkU7SUFDQTs7S0FFQyxHQUNEVyxPQUFPUixLQUFLLEVBQUVDLE1BQU0sRUFBRUosT0FBTyxFQUFFO1FBQzNCLE1BQU0sRUFBRUssT0FBTyxFQUFFLEdBQUdEO1FBQ3BCLE9BQU8sSUFBSSxDQUFDUixPQUFPLENBQUNLLElBQUksQ0FBQ1YsMERBQUssQ0FBQyxPQUFPLEVBQUVjLFFBQVEsTUFBTSxFQUFFRixNQUFNLENBQUMsRUFBRUg7SUFDckU7QUFDSjtBQUNBUixLQUFLSCxXQUFXLEdBQUdBLDBEQUFXQSxFQUM5QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2V2YWxzL3J1bnMvcnVucy5tanM/N2QzYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIE91dHB1dEl0ZW1zQVBJIGZyb20gXCIuL291dHB1dC1pdGVtcy5tanNcIjtcbmltcG9ydCB7IE91dHB1dEl0ZW1zLCB9IGZyb20gXCIuL291dHB1dC1pdGVtcy5tanNcIjtcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9wYWdpbmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcm5hbC91dGlscy9wYXRoLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFJ1bnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMub3V0cHV0SXRlbXMgPSBuZXcgT3V0cHV0SXRlbXNBUEkuT3V0cHV0SXRlbXModGhpcy5fY2xpZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogS2lja3Mgb2ZmIGEgbmV3IHJ1biBmb3IgYSBnaXZlbiBldmFsdWF0aW9uLCBzcGVjaWZ5aW5nIHRoZSBkYXRhIHNvdXJjZSwgYW5kIHdoYXRcbiAgICAgKiBtb2RlbCBjb25maWd1cmF0aW9uIHRvIHVzZSB0byB0ZXN0LiBUaGUgZGF0YXNvdXJjZSB3aWxsIGJlIHZhbGlkYXRlZCBhZ2FpbnN0IHRoZVxuICAgICAqIHNjaGVtYSBzcGVjaWZpZWQgaW4gdGhlIGNvbmZpZyBvZiB0aGUgZXZhbHVhdGlvbi5cbiAgICAgKi9cbiAgICBjcmVhdGUoZXZhbElELCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChwYXRoIGAvZXZhbHMvJHtldmFsSUR9L3J1bnNgLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbiBldmFsdWF0aW9uIHJ1biBieSBJRC5cbiAgICAgKi9cbiAgICByZXRyaWV2ZShydW5JRCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgZXZhbF9pZCB9ID0gcGFyYW1zO1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChwYXRoIGAvZXZhbHMvJHtldmFsX2lkfS9ydW5zLyR7cnVuSUR9YCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIGxpc3Qgb2YgcnVucyBmb3IgYW4gZXZhbHVhdGlvbi5cbiAgICAgKi9cbiAgICBsaXN0KGV2YWxJRCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QocGF0aCBgL2V2YWxzLyR7ZXZhbElEfS9ydW5zYCwgKEN1cnNvclBhZ2UpLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYW4gZXZhbCBydW4uXG4gICAgICovXG4gICAgZGVsZXRlKHJ1bklELCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBldmFsX2lkIH0gPSBwYXJhbXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKHBhdGggYC9ldmFscy8ke2V2YWxfaWR9L3J1bnMvJHtydW5JRH1gLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VsIGFuIG9uZ29pbmcgZXZhbHVhdGlvbiBydW4uXG4gICAgICovXG4gICAgY2FuY2VsKHJ1bklELCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBldmFsX2lkIH0gPSBwYXJhbXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChwYXRoIGAvZXZhbHMvJHtldmFsX2lkfS9ydW5zLyR7cnVuSUR9YCwgb3B0aW9ucyk7XG4gICAgfVxufVxuUnVucy5PdXRwdXRJdGVtcyA9IE91dHB1dEl0ZW1zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVucy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiT3V0cHV0SXRlbXNBUEkiLCJPdXRwdXRJdGVtcyIsIkN1cnNvclBhZ2UiLCJwYXRoIiwiUnVucyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwib3V0cHV0SXRlbXMiLCJfY2xpZW50IiwiY3JlYXRlIiwiZXZhbElEIiwiYm9keSIsIm9wdGlvbnMiLCJwb3N0IiwicmV0cmlldmUiLCJydW5JRCIsInBhcmFtcyIsImV2YWxfaWQiLCJnZXQiLCJsaXN0IiwicXVlcnkiLCJnZXRBUElMaXN0IiwiZGVsZXRlIiwiY2FuY2VsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/evals/runs/runs.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/files.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/resources/files.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Files: () => (/* binding */ Files)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_sleep_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/utils/sleep.mjs */ \"(rsc)/./node_modules/openai/internal/utils/sleep.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../internal/uploads.mjs */ \"(rsc)/./node_modules/openai/internal/uploads.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass Files extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Upload a file that can be used across various endpoints. Individual files can be\n     * up to 512 MB, and the size of all files uploaded by one organization can be up\n     * to 100 GB.\n     *\n     * The Assistants API supports files up to 2 million tokens and of specific file\n     * types. See the\n     * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for\n     * details.\n     *\n     * The Fine-tuning API only supports `.jsonl` files. The input also has certain\n     * required formats for fine-tuning\n     * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\n     * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n     * models.\n     *\n     * The Batch API only supports `.jsonl` files up to 200 MB in size. The input also\n     * has a specific required\n     * [format](https://platform.openai.com/docs/api-reference/batch/request-input).\n     *\n     * Please [contact us](https://help.openai.com/) if you need to increase these\n     * storage limits.\n     */ create(body, options) {\n        return this._client.post(\"/files\", (0,_internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_5__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }, this._client));\n    }\n    /**\n     * Returns information about a specific file.\n     */ retrieve(fileID, options) {\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_6__.path`/files/${fileID}`, options);\n    }\n    /**\n     * Returns a list of files.\n     */ list(query = {}, options) {\n        return this._client.getAPIList(\"/files\", _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.CursorPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Delete a file.\n     */ delete(fileID, options) {\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_6__.path`/files/${fileID}`, options);\n    }\n    /**\n     * Returns the contents of the specified file.\n     */ content(fileID, options) {\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_6__.path`/files/${fileID}/content`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    Accept: \"application/binary\"\n                },\n                options?.headers\n            ]),\n            __binaryResponse: true\n        });\n    }\n    /**\n     * Waits for the given file to be processed, default timeout is 30 mins.\n     */ async waitForProcessing(id, { pollInterval = 5000, maxWait = 30 * 60 * 1000 } = {}) {\n        const TERMINAL_STATES = new Set([\n            \"processed\",\n            \"error\",\n            \"deleted\"\n        ]);\n        const start = Date.now();\n        let file = await this.retrieve(id);\n        while(!file.status || !TERMINAL_STATES.has(file.status)){\n            await (0,_internal_utils_sleep_mjs__WEBPACK_IMPORTED_MODULE_3__.sleep)(pollInterval);\n            file = await this.retrieve(id);\n            if (Date.now() - start > maxWait) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_4__.APIConnectionTimeoutError({\n                    message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`\n                });\n            }\n        }\n        return file;\n    }\n} //# sourceMappingURL=files.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maWxlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDbkM7QUFDQztBQUNHO0FBQ0g7QUFDSztBQUNhO0FBQ3BCO0FBQzNDLE1BQU1PLGNBQWNQLDJEQUFXQTtJQUNsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXNCQyxHQUNEUSxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsVUFBVVAsa0ZBQTJCQSxDQUFDO1lBQUVJO1lBQU0sR0FBR0MsT0FBTztRQUFDLEdBQUcsSUFBSSxDQUFDQyxPQUFPO0lBQ3JHO0lBQ0E7O0tBRUMsR0FDREUsU0FBU0MsTUFBTSxFQUFFSixPQUFPLEVBQUU7UUFDdEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0ksR0FBRyxDQUFDVCwwREFBSyxDQUFDLE9BQU8sRUFBRVEsT0FBTyxDQUFDLEVBQUVKO0lBQ3JEO0lBQ0E7O0tBRUMsR0FDRE0sS0FBS0MsUUFBUSxDQUFDLENBQUMsRUFBRVAsT0FBTyxFQUFFO1FBQ3RCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNPLFVBQVUsQ0FBQyxVQUFXakIsNERBQVVBLEVBQUc7WUFBRWdCO1lBQU8sR0FBR1AsT0FBTztRQUFDO0lBQy9FO0lBQ0E7O0tBRUMsR0FDRFMsT0FBT0wsTUFBTSxFQUFFSixPQUFPLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ1EsTUFBTSxDQUFDYiwwREFBSyxDQUFDLE9BQU8sRUFBRVEsT0FBTyxDQUFDLEVBQUVKO0lBQ3hEO0lBQ0E7O0tBRUMsR0FDRFUsUUFBUU4sTUFBTSxFQUFFSixPQUFPLEVBQUU7UUFDckIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0ksR0FBRyxDQUFDVCwwREFBSyxDQUFDLE9BQU8sRUFBRVEsT0FBTyxRQUFRLENBQUMsRUFBRTtZQUNyRCxHQUFHSixPQUFPO1lBQ1ZXLFNBQVNuQixtRUFBWUEsQ0FBQztnQkFBQztvQkFBRW9CLFFBQVE7Z0JBQXFCO2dCQUFHWixTQUFTVzthQUFRO1lBQzFFRSxrQkFBa0I7UUFDdEI7SUFDSjtJQUNBOztLQUVDLEdBQ0QsTUFBTUMsa0JBQWtCQyxFQUFFLEVBQUUsRUFBRUMsZUFBZSxJQUFJLEVBQUVDLFVBQVUsS0FBSyxLQUFLLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQ2hGLE1BQU1DLGtCQUFrQixJQUFJQyxJQUFJO1lBQUM7WUFBYTtZQUFTO1NBQVU7UUFDakUsTUFBTUMsUUFBUUMsS0FBS0MsR0FBRztRQUN0QixJQUFJQyxPQUFPLE1BQU0sSUFBSSxDQUFDcEIsUUFBUSxDQUFDWTtRQUMvQixNQUFPLENBQUNRLEtBQUtDLE1BQU0sSUFBSSxDQUFDTixnQkFBZ0JPLEdBQUcsQ0FBQ0YsS0FBS0MsTUFBTSxFQUFHO1lBQ3RELE1BQU0vQixnRUFBS0EsQ0FBQ3VCO1lBQ1pPLE9BQU8sTUFBTSxJQUFJLENBQUNwQixRQUFRLENBQUNZO1lBQzNCLElBQUlNLEtBQUtDLEdBQUcsS0FBS0YsUUFBUUgsU0FBUztnQkFDOUIsTUFBTSxJQUFJdkIsaUVBQXlCQSxDQUFDO29CQUNoQ2dDLFNBQVMsQ0FBQyw4QkFBOEIsRUFBRVgsR0FBRyw0QkFBNEIsRUFBRUUsUUFBUSxjQUFjLENBQUM7Z0JBQ3RHO1lBQ0o7UUFDSjtRQUNBLE9BQU9NO0lBQ1g7QUFDSixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvZmlsZXMubWpzPzJlNDIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uL2NvcmUvcGFnaW5hdGlvbi5tanNcIjtcbmltcG9ydCB7IGJ1aWxkSGVhZGVycyB9IGZyb20gXCIuLi9pbnRlcm5hbC9oZWFkZXJzLm1qc1wiO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tIFwiLi4vaW50ZXJuYWwvdXRpbHMvc2xlZXAubWpzXCI7XG5pbXBvcnQgeyBBUElDb25uZWN0aW9uVGltZW91dEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yLm1qc1wiO1xuaW1wb3J0IHsgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uL2ludGVybmFsL3VwbG9hZHMubWpzXCI7XG5pbXBvcnQgeyBwYXRoIH0gZnJvbSBcIi4uL2ludGVybmFsL3V0aWxzL3BhdGgubWpzXCI7XG5leHBvcnQgY2xhc3MgRmlsZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogVXBsb2FkIGEgZmlsZSB0aGF0IGNhbiBiZSB1c2VkIGFjcm9zcyB2YXJpb3VzIGVuZHBvaW50cy4gSW5kaXZpZHVhbCBmaWxlcyBjYW4gYmVcbiAgICAgKiB1cCB0byA1MTIgTUIsIGFuZCB0aGUgc2l6ZSBvZiBhbGwgZmlsZXMgdXBsb2FkZWQgYnkgb25lIG9yZ2FuaXphdGlvbiBjYW4gYmUgdXBcbiAgICAgKiB0byAxMDAgR0IuXG4gICAgICpcbiAgICAgKiBUaGUgQXNzaXN0YW50cyBBUEkgc3VwcG9ydHMgZmlsZXMgdXAgdG8gMiBtaWxsaW9uIHRva2VucyBhbmQgb2Ygc3BlY2lmaWMgZmlsZVxuICAgICAqIHR5cGVzLiBTZWUgdGhlXG4gICAgICogW0Fzc2lzdGFudHMgVG9vbHMgZ3VpZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2Fzc2lzdGFudHMvdG9vbHMpIGZvclxuICAgICAqIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBUaGUgRmluZS10dW5pbmcgQVBJIG9ubHkgc3VwcG9ydHMgYC5qc29ubGAgZmlsZXMuIFRoZSBpbnB1dCBhbHNvIGhhcyBjZXJ0YWluXG4gICAgICogcmVxdWlyZWQgZm9ybWF0cyBmb3IgZmluZS10dW5pbmdcbiAgICAgKiBbY2hhdF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maW5lLXR1bmluZy9jaGF0LWlucHV0KSBvclxuICAgICAqIFtjb21wbGV0aW9uc10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maW5lLXR1bmluZy9jb21wbGV0aW9ucy1pbnB1dClcbiAgICAgKiBtb2RlbHMuXG4gICAgICpcbiAgICAgKiBUaGUgQmF0Y2ggQVBJIG9ubHkgc3VwcG9ydHMgYC5qc29ubGAgZmlsZXMgdXAgdG8gMjAwIE1CIGluIHNpemUuIFRoZSBpbnB1dCBhbHNvXG4gICAgICogaGFzIGEgc3BlY2lmaWMgcmVxdWlyZWRcbiAgICAgKiBbZm9ybWF0XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2JhdGNoL3JlcXVlc3QtaW5wdXQpLlxuICAgICAqXG4gICAgICogUGxlYXNlIFtjb250YWN0IHVzXShodHRwczovL2hlbHAub3BlbmFpLmNvbS8pIGlmIHlvdSBuZWVkIHRvIGluY3JlYXNlIHRoZXNlXG4gICAgICogc3RvcmFnZSBsaW1pdHMuXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvZmlsZXMnLCBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zIH0sIHRoaXMuX2NsaWVudCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IGEgc3BlY2lmaWMgZmlsZS5cbiAgICAgKi9cbiAgICByZXRyaWV2ZShmaWxlSUQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQocGF0aCBgL2ZpbGVzLyR7ZmlsZUlEfWAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBmaWxlcy5cbiAgICAgKi9cbiAgICBsaXN0KHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvZmlsZXMnLCAoQ3Vyc29yUGFnZSksIHsgcXVlcnksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIGZpbGUuXG4gICAgICovXG4gICAgZGVsZXRlKGZpbGVJRCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShwYXRoIGAvZmlsZXMvJHtmaWxlSUR9YCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbnRlbnRzIG9mIHRoZSBzcGVjaWZpZWQgZmlsZS5cbiAgICAgKi9cbiAgICBjb250ZW50KGZpbGVJRCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChwYXRoIGAvZmlsZXMvJHtmaWxlSUR9L2NvbnRlbnRgLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFt7IEFjY2VwdDogJ2FwcGxpY2F0aW9uL2JpbmFyeScgfSwgb3B0aW9ucz8uaGVhZGVyc10pLFxuICAgICAgICAgICAgX19iaW5hcnlSZXNwb25zZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdhaXRzIGZvciB0aGUgZ2l2ZW4gZmlsZSB0byBiZSBwcm9jZXNzZWQsIGRlZmF1bHQgdGltZW91dCBpcyAzMCBtaW5zLlxuICAgICAqL1xuICAgIGFzeW5jIHdhaXRGb3JQcm9jZXNzaW5nKGlkLCB7IHBvbGxJbnRlcnZhbCA9IDUwMDAsIG1heFdhaXQgPSAzMCAqIDYwICogMTAwMCB9ID0ge30pIHtcbiAgICAgICAgY29uc3QgVEVSTUlOQUxfU1RBVEVTID0gbmV3IFNldChbJ3Byb2Nlc3NlZCcsICdlcnJvcicsICdkZWxldGVkJ10pO1xuICAgICAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgIGxldCBmaWxlID0gYXdhaXQgdGhpcy5yZXRyaWV2ZShpZCk7XG4gICAgICAgIHdoaWxlICghZmlsZS5zdGF0dXMgfHwgIVRFUk1JTkFMX1NUQVRFUy5oYXMoZmlsZS5zdGF0dXMpKSB7XG4gICAgICAgICAgICBhd2FpdCBzbGVlcChwb2xsSW50ZXJ2YWwpO1xuICAgICAgICAgICAgZmlsZSA9IGF3YWl0IHRoaXMucmV0cmlldmUoaWQpO1xuICAgICAgICAgICAgaWYgKERhdGUubm93KCkgLSBzdGFydCA+IG1heFdhaXQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBHaXZpbmcgdXAgb24gd2FpdGluZyBmb3IgZmlsZSAke2lkfSB0byBmaW5pc2ggcHJvY2Vzc2luZyBhZnRlciAke21heFdhaXR9IG1pbGxpc2Vjb25kcy5gLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWxlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbGVzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDdXJzb3JQYWdlIiwiYnVpbGRIZWFkZXJzIiwic2xlZXAiLCJBUElDb25uZWN0aW9uVGltZW91dEVycm9yIiwibXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zIiwicGF0aCIsIkZpbGVzIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsInJldHJpZXZlIiwiZmlsZUlEIiwiZ2V0IiwibGlzdCIsInF1ZXJ5IiwiZ2V0QVBJTGlzdCIsImRlbGV0ZSIsImNvbnRlbnQiLCJoZWFkZXJzIiwiQWNjZXB0IiwiX19iaW5hcnlSZXNwb25zZSIsIndhaXRGb3JQcm9jZXNzaW5nIiwiaWQiLCJwb2xsSW50ZXJ2YWwiLCJtYXhXYWl0IiwiVEVSTUlOQUxfU1RBVEVTIiwiU2V0Iiwic3RhcnQiLCJEYXRlIiwibm93IiwiZmlsZSIsInN0YXR1cyIsImhhcyIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/files.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/alpha/alpha.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/alpha/alpha.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Alpha: () => (/* binding */ Alpha)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _graders_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./graders.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/alpha/graders.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Alpha extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.graders = new _graders_mjs__WEBPACK_IMPORTED_MODULE_1__.Graders(this._client);\n    }\n}\nAlpha.Graders = _graders_mjs__WEBPACK_IMPORTED_MODULE_1__.Graders; //# sourceMappingURL=alpha.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9hbHBoYS9hbHBoYS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0ZBQXNGO0FBQzdCO0FBQ2I7QUFDSDtBQUNsQyxNQUFNRyxjQUFjSCwyREFBV0E7SUFDbENJLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSUwsaURBQWtCLENBQUMsSUFBSSxDQUFDTSxPQUFPO0lBQ3REO0FBQ0o7QUFDQUosTUFBTUQsT0FBTyxHQUFHQSxpREFBT0EsRUFDdkIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9hbHBoYS9hbHBoYS5tanM/YTNhNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIEdyYWRlcnNBUEkgZnJvbSBcIi4vZ3JhZGVycy5tanNcIjtcbmltcG9ydCB7IEdyYWRlcnMsIH0gZnJvbSBcIi4vZ3JhZGVycy5tanNcIjtcbmV4cG9ydCBjbGFzcyBBbHBoYSBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5ncmFkZXJzID0gbmV3IEdyYWRlcnNBUEkuR3JhZGVycyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbn1cbkFscGhhLkdyYWRlcnMgPSBHcmFkZXJzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWxwaGEubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkdyYWRlcnNBUEkiLCJHcmFkZXJzIiwiQWxwaGEiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImdyYWRlcnMiLCJfY2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/alpha/alpha.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/alpha/graders.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/alpha/graders.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Graders: () => (/* binding */ Graders)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Graders extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Run a grader.\n     *\n     * @example\n     * ```ts\n     * const response = await client.fineTuning.alpha.graders.run({\n     *   grader: {\n     *     input: 'input',\n     *     name: 'name',\n     *     operation: 'eq',\n     *     reference: 'reference',\n     *     type: 'string_check',\n     *   },\n     *   model_sample: 'model_sample',\n     * });\n     * ```\n     */ run(body, options) {\n        return this._client.post(\"/fine_tuning/alpha/graders/run\", {\n            body,\n            ...options\n        });\n    }\n    /**\n     * Validate a grader.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.fineTuning.alpha.graders.validate({\n     *     grader: {\n     *       input: 'input',\n     *       name: 'name',\n     *       operation: 'eq',\n     *       reference: 'reference',\n     *       type: 'string_check',\n     *     },\n     *   });\n     * ```\n     */ validate(body, options) {\n        return this._client.post(\"/fine_tuning/alpha/graders/validate\", {\n            body,\n            ...options\n        });\n    }\n} //# sourceMappingURL=graders.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9hbHBoYS9ncmFkZXJzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNGQUFzRjtBQUM3QjtBQUNsRCxNQUFNQyxnQkFBZ0JELDJEQUFXQTtJQUNwQzs7Ozs7Ozs7Ozs7Ozs7OztLQWdCQyxHQUNERSxJQUFJQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNmLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxrQ0FBa0M7WUFBRUg7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDbEY7SUFDQTs7Ozs7Ozs7Ozs7Ozs7OztLQWdCQyxHQUNERyxTQUFTSixJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNwQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsdUNBQXVDO1lBQUVIO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQ3ZGO0FBQ0osRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2FscGhhL2dyYWRlcnMubWpzPzc3YTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5leHBvcnQgY2xhc3MgR3JhZGVycyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBSdW4gYSBncmFkZXIuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuZmluZVR1bmluZy5hbHBoYS5ncmFkZXJzLnJ1bih7XG4gICAgICogICBncmFkZXI6IHtcbiAgICAgKiAgICAgaW5wdXQ6ICdpbnB1dCcsXG4gICAgICogICAgIG5hbWU6ICduYW1lJyxcbiAgICAgKiAgICAgb3BlcmF0aW9uOiAnZXEnLFxuICAgICAqICAgICByZWZlcmVuY2U6ICdyZWZlcmVuY2UnLFxuICAgICAqICAgICB0eXBlOiAnc3RyaW5nX2NoZWNrJyxcbiAgICAgKiAgIH0sXG4gICAgICogICBtb2RlbF9zYW1wbGU6ICdtb2RlbF9zYW1wbGUnLFxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHJ1bihib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2ZpbmVfdHVuaW5nL2FscGhhL2dyYWRlcnMvcnVuJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSBhIGdyYWRlci5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBjb25zdCByZXNwb25zZSA9XG4gICAgICogICBhd2FpdCBjbGllbnQuZmluZVR1bmluZy5hbHBoYS5ncmFkZXJzLnZhbGlkYXRlKHtcbiAgICAgKiAgICAgZ3JhZGVyOiB7XG4gICAgICogICAgICAgaW5wdXQ6ICdpbnB1dCcsXG4gICAgICogICAgICAgbmFtZTogJ25hbWUnLFxuICAgICAqICAgICAgIG9wZXJhdGlvbjogJ2VxJyxcbiAgICAgKiAgICAgICByZWZlcmVuY2U6ICdyZWZlcmVuY2UnLFxuICAgICAqICAgICAgIHR5cGU6ICdzdHJpbmdfY2hlY2snLFxuICAgICAqICAgICB9LFxuICAgICAqICAgfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgdmFsaWRhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9maW5lX3R1bmluZy9hbHBoYS9ncmFkZXJzL3ZhbGlkYXRlJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyYWRlcnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkdyYWRlcnMiLCJydW4iLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0IiwidmFsaWRhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/alpha/graders.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/checkpoints/checkpoints.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/checkpoints/checkpoints.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Checkpoints: () => (/* binding */ Checkpoints)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _permissions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./permissions.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/checkpoints/permissions.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Checkpoints extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.permissions = new _permissions_mjs__WEBPACK_IMPORTED_MODULE_1__.Permissions(this._client);\n    }\n}\nCheckpoints.Permissions = _permissions_mjs__WEBPACK_IMPORTED_MODULE_1__.Permissions; //# sourceMappingURL=checkpoints.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9jaGVja3BvaW50cy9jaGVja3BvaW50cy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0ZBQXNGO0FBQzdCO0FBQ0w7QUFDSDtBQUMxQyxNQUFNRyxvQkFBb0JILDJEQUFXQTtJQUN4Q0ksYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLFdBQVcsR0FBRyxJQUFJTCx5REFBMEIsQ0FBQyxJQUFJLENBQUNNLE9BQU87SUFDbEU7QUFDSjtBQUNBSixZQUFZRCxXQUFXLEdBQUdBLHlEQUFXQSxFQUNyQyx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2NoZWNrcG9pbnRzL2NoZWNrcG9pbnRzLm1qcz8zOGY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi9jb3JlL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgUGVybWlzc2lvbnNBUEkgZnJvbSBcIi4vcGVybWlzc2lvbnMubWpzXCI7XG5pbXBvcnQgeyBQZXJtaXNzaW9ucywgfSBmcm9tIFwiLi9wZXJtaXNzaW9ucy5tanNcIjtcbmV4cG9ydCBjbGFzcyBDaGVja3BvaW50cyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9ucyA9IG5ldyBQZXJtaXNzaW9uc0FQSS5QZXJtaXNzaW9ucyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbn1cbkNoZWNrcG9pbnRzLlBlcm1pc3Npb25zID0gUGVybWlzc2lvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGVja3BvaW50cy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiUGVybWlzc2lvbnNBUEkiLCJQZXJtaXNzaW9ucyIsIkNoZWNrcG9pbnRzIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJwZXJtaXNzaW9ucyIsIl9jbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/checkpoints/checkpoints.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/checkpoints/permissions.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/checkpoints/permissions.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Permissions: () => (/* binding */ Permissions)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Permissions extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * **NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).\n     *\n     * This enables organization owners to share fine-tuned models with other projects\n     * in their organization.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const permissionCreateResponse of client.fineTuning.checkpoints.permissions.create(\n     *   'ft:gpt-4o-mini-2024-07-18:org:weather:B7R9VjQd',\n     *   { project_ids: ['string'] },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */ create(fineTunedModelCheckpoint, body, options) {\n        return this._client.getAPIList(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/fine_tuning/checkpoints/${fineTunedModelCheckpoint}/permissions`, _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page, {\n            body,\n            method: \"post\",\n            ...options\n        });\n    }\n    /**\n     * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n     *\n     * Organization owners can use this endpoint to view all permissions for a\n     * fine-tuned model checkpoint.\n     *\n     * @example\n     * ```ts\n     * const permission =\n     *   await client.fineTuning.checkpoints.permissions.retrieve(\n     *     'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     *   );\n     * ```\n     */ retrieve(fineTunedModelCheckpoint, query = {}, options) {\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/fine_tuning/checkpoints/${fineTunedModelCheckpoint}/permissions`, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n     *\n     * Organization owners can use this endpoint to delete a permission for a\n     * fine-tuned model checkpoint.\n     *\n     * @example\n     * ```ts\n     * const permission =\n     *   await client.fineTuning.checkpoints.permissions.delete(\n     *     'cp_zc4Q7MP6XxulcVzj4MZdwsAB',\n     *     {\n     *       fine_tuned_model_checkpoint:\n     *         'ft:gpt-4o-mini-2024-07-18:org:weather:B7R9VjQd',\n     *     },\n     *   );\n     * ```\n     */ delete(permissionID, params, options) {\n        const { fine_tuned_model_checkpoint } = params;\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/fine_tuning/checkpoints/${fine_tuned_model_checkpoint}/permissions/${permissionID}`, options);\n    }\n} //# sourceMappingURL=permissions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9jaGVja3BvaW50cy9wZXJtaXNzaW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHNGQUFzRjtBQUM3QjtBQUNMO0FBQ0k7QUFDakQsTUFBTUcsb0JBQW9CSCwyREFBV0E7SUFDeEM7Ozs7Ozs7Ozs7Ozs7Ozs7S0FnQkMsR0FDREksT0FBT0Msd0JBQXdCLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQzVDLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLFVBQVUsQ0FBQ1AsMERBQUssQ0FBQyx5QkFBeUIsRUFBRUcseUJBQXlCLFlBQVksQ0FBQyxFQUFHSixzREFBSUEsRUFBRztZQUFFSztZQUFNSSxRQUFRO1lBQVEsR0FBR0gsT0FBTztRQUFDO0lBQ3ZKO0lBQ0E7Ozs7Ozs7Ozs7Ozs7S0FhQyxHQUNESSxTQUFTTix3QkFBd0IsRUFBRU8sUUFBUSxDQUFDLENBQUMsRUFBRUwsT0FBTyxFQUFFO1FBQ3BELE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNLLEdBQUcsQ0FBQ1gsMERBQUssQ0FBQyx5QkFBeUIsRUFBRUcseUJBQXlCLFlBQVksQ0FBQyxFQUFFO1lBQzdGTztZQUNBLEdBQUdMLE9BQU87UUFDZDtJQUNKO0lBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBaUJDLEdBQ0RPLE9BQU9DLFlBQVksRUFBRUMsTUFBTSxFQUFFVCxPQUFPLEVBQUU7UUFDbEMsTUFBTSxFQUFFVSwyQkFBMkIsRUFBRSxHQUFHRDtRQUN4QyxPQUFPLElBQUksQ0FBQ1IsT0FBTyxDQUFDTSxNQUFNLENBQUNaLDBEQUFLLENBQUMseUJBQXlCLEVBQUVlLDRCQUE0QixhQUFhLEVBQUVGLGFBQWEsQ0FBQyxFQUFFUjtJQUMzSDtBQUNKLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9jaGVja3BvaW50cy9wZXJtaXNzaW9ucy5tanM/MzVkNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9wYWdpbmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcm5hbC91dGlscy9wYXRoLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFBlcm1pc3Npb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqICoqTk9URToqKiBDYWxsaW5nIHRoaXMgZW5kcG9pbnQgcmVxdWlyZXMgYW4gW2FkbWluIEFQSSBrZXldKC4uL2FkbWluLWFwaS1rZXlzKS5cbiAgICAgKlxuICAgICAqIFRoaXMgZW5hYmxlcyBvcmdhbml6YXRpb24gb3duZXJzIHRvIHNoYXJlIGZpbmUtdHVuZWQgbW9kZWxzIHdpdGggb3RoZXIgcHJvamVjdHNcbiAgICAgKiBpbiB0aGVpciBvcmdhbml6YXRpb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogLy8gQXV0b21hdGljYWxseSBmZXRjaGVzIG1vcmUgcGFnZXMgYXMgbmVlZGVkLlxuICAgICAqIGZvciBhd2FpdCAoY29uc3QgcGVybWlzc2lvbkNyZWF0ZVJlc3BvbnNlIG9mIGNsaWVudC5maW5lVHVuaW5nLmNoZWNrcG9pbnRzLnBlcm1pc3Npb25zLmNyZWF0ZShcbiAgICAgKiAgICdmdDpncHQtNG8tbWluaS0yMDI0LTA3LTE4Om9yZzp3ZWF0aGVyOkI3UjlWalFkJyxcbiAgICAgKiAgIHsgcHJvamVjdF9pZHM6IFsnc3RyaW5nJ10gfSxcbiAgICAgKiApKSB7XG4gICAgICogICAvLyAuLi5cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY3JlYXRlKGZpbmVUdW5lZE1vZGVsQ2hlY2twb2ludCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QocGF0aCBgL2ZpbmVfdHVuaW5nL2NoZWNrcG9pbnRzLyR7ZmluZVR1bmVkTW9kZWxDaGVja3BvaW50fS9wZXJtaXNzaW9uc2AsIChQYWdlKSwgeyBib2R5LCBtZXRob2Q6ICdwb3N0JywgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogKipOT1RFOioqIFRoaXMgZW5kcG9pbnQgcmVxdWlyZXMgYW4gW2FkbWluIEFQSSBrZXldKC4uL2FkbWluLWFwaS1rZXlzKS5cbiAgICAgKlxuICAgICAqIE9yZ2FuaXphdGlvbiBvd25lcnMgY2FuIHVzZSB0aGlzIGVuZHBvaW50IHRvIHZpZXcgYWxsIHBlcm1pc3Npb25zIGZvciBhXG4gICAgICogZmluZS10dW5lZCBtb2RlbCBjaGVja3BvaW50LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IHBlcm1pc3Npb24gPVxuICAgICAqICAgYXdhaXQgY2xpZW50LmZpbmVUdW5pbmcuY2hlY2twb2ludHMucGVybWlzc2lvbnMucmV0cmlldmUoXG4gICAgICogICAgICdmdC1BRjFXb1JxZDNhSkFIc3FjOU5ZN2lMOEYnLFxuICAgICAqICAgKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByZXRyaWV2ZShmaW5lVHVuZWRNb2RlbENoZWNrcG9pbnQsIHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQocGF0aCBgL2ZpbmVfdHVuaW5nL2NoZWNrcG9pbnRzLyR7ZmluZVR1bmVkTW9kZWxDaGVja3BvaW50fS9wZXJtaXNzaW9uc2AsIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICoqTk9URToqKiBUaGlzIGVuZHBvaW50IHJlcXVpcmVzIGFuIFthZG1pbiBBUEkga2V5XSguLi9hZG1pbi1hcGkta2V5cykuXG4gICAgICpcbiAgICAgKiBPcmdhbml6YXRpb24gb3duZXJzIGNhbiB1c2UgdGhpcyBlbmRwb2ludCB0byBkZWxldGUgYSBwZXJtaXNzaW9uIGZvciBhXG4gICAgICogZmluZS10dW5lZCBtb2RlbCBjaGVja3BvaW50LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IHBlcm1pc3Npb24gPVxuICAgICAqICAgYXdhaXQgY2xpZW50LmZpbmVUdW5pbmcuY2hlY2twb2ludHMucGVybWlzc2lvbnMuZGVsZXRlKFxuICAgICAqICAgICAnY3BfemM0UTdNUDZYeHVsY1Z6ajRNWmR3c0FCJyxcbiAgICAgKiAgICAge1xuICAgICAqICAgICAgIGZpbmVfdHVuZWRfbW9kZWxfY2hlY2twb2ludDpcbiAgICAgKiAgICAgICAgICdmdDpncHQtNG8tbWluaS0yMDI0LTA3LTE4Om9yZzp3ZWF0aGVyOkI3UjlWalFkJyxcbiAgICAgKiAgICAgfSxcbiAgICAgKiAgICk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZGVsZXRlKHBlcm1pc3Npb25JRCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgZmluZV90dW5lZF9tb2RlbF9jaGVja3BvaW50IH0gPSBwYXJhbXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKHBhdGggYC9maW5lX3R1bmluZy9jaGVja3BvaW50cy8ke2ZpbmVfdHVuZWRfbW9kZWxfY2hlY2twb2ludH0vcGVybWlzc2lvbnMvJHtwZXJtaXNzaW9uSUR9YCwgb3B0aW9ucyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGVybWlzc2lvbnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIlBhZ2UiLCJwYXRoIiwiUGVybWlzc2lvbnMiLCJjcmVhdGUiLCJmaW5lVHVuZWRNb2RlbENoZWNrcG9pbnQiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJnZXRBUElMaXN0IiwibWV0aG9kIiwicmV0cmlldmUiLCJxdWVyeSIsImdldCIsImRlbGV0ZSIsInBlcm1pc3Npb25JRCIsInBhcmFtcyIsImZpbmVfdHVuZWRfbW9kZWxfY2hlY2twb2ludCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/checkpoints/permissions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/fine-tuning.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTuning: () => (/* binding */ FineTuning)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _methods_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./methods.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/methods.mjs\");\n/* harmony import */ var _alpha_alpha_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./alpha/alpha.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/alpha/alpha.mjs\");\n/* harmony import */ var _checkpoints_checkpoints_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./checkpoints/checkpoints.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/checkpoints/checkpoints.mjs\");\n/* harmony import */ var _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./jobs/jobs.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\n\n\nclass FineTuning extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.methods = new _methods_mjs__WEBPACK_IMPORTED_MODULE_1__.Methods(this._client);\n        this.jobs = new _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_4__.Jobs(this._client);\n        this.checkpoints = new _checkpoints_checkpoints_mjs__WEBPACK_IMPORTED_MODULE_3__.Checkpoints(this._client);\n        this.alpha = new _alpha_alpha_mjs__WEBPACK_IMPORTED_MODULE_2__.Alpha(this._client);\n    }\n}\nFineTuning.Methods = _methods_mjs__WEBPACK_IMPORTED_MODULE_1__.Methods;\nFineTuning.Jobs = _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_4__.Jobs;\nFineTuning.Checkpoints = _checkpoints_checkpoints_mjs__WEBPACK_IMPORTED_MODULE_3__.Checkpoints;\nFineTuning.Alpha = _alpha_alpha_mjs__WEBPACK_IMPORTED_MODULE_2__.Alpha; //# sourceMappingURL=fine-tuning.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9maW5lLXR1bmluZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ2hDO0FBQ1Y7QUFDSDtBQUNLO0FBQ0o7QUFDc0I7QUFDSjtBQUNqQjtBQUNIO0FBQ2pDLE1BQU1TLG1CQUFtQlQsMkRBQVdBO0lBQ3ZDVSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlYLGlEQUFrQixDQUFDLElBQUksQ0FBQ1ksT0FBTztRQUNsRCxJQUFJLENBQUNDLElBQUksR0FBRyxJQUFJUCxnREFBWSxDQUFDLElBQUksQ0FBQ00sT0FBTztRQUN6QyxJQUFJLENBQUNFLFdBQVcsR0FBRyxJQUFJVixxRUFBMEIsQ0FBQyxJQUFJLENBQUNRLE9BQU87UUFDOUQsSUFBSSxDQUFDRyxLQUFLLEdBQUcsSUFBSWIsbURBQWMsQ0FBQyxJQUFJLENBQUNVLE9BQU87SUFDaEQ7QUFDSjtBQUNBSixXQUFXUCxPQUFPLEdBQUdBLGlEQUFPQTtBQUM1Qk8sV0FBV0QsSUFBSSxHQUFHQSxnREFBSUE7QUFDdEJDLFdBQVdILFdBQVcsR0FBR0EscUVBQVdBO0FBQ3BDRyxXQUFXTCxLQUFLLEdBQUdBLG1EQUFLQSxFQUN4Qix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2ZpbmUtdHVuaW5nLm1qcz8yNjc3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9jb3JlL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgTWV0aG9kc0FQSSBmcm9tIFwiLi9tZXRob2RzLm1qc1wiO1xuaW1wb3J0IHsgTWV0aG9kcywgfSBmcm9tIFwiLi9tZXRob2RzLm1qc1wiO1xuaW1wb3J0ICogYXMgQWxwaGFBUEkgZnJvbSBcIi4vYWxwaGEvYWxwaGEubWpzXCI7XG5pbXBvcnQgeyBBbHBoYSB9IGZyb20gXCIuL2FscGhhL2FscGhhLm1qc1wiO1xuaW1wb3J0ICogYXMgQ2hlY2twb2ludHNBUEkgZnJvbSBcIi4vY2hlY2twb2ludHMvY2hlY2twb2ludHMubWpzXCI7XG5pbXBvcnQgeyBDaGVja3BvaW50cyB9IGZyb20gXCIuL2NoZWNrcG9pbnRzL2NoZWNrcG9pbnRzLm1qc1wiO1xuaW1wb3J0ICogYXMgSm9ic0FQSSBmcm9tIFwiLi9qb2JzL2pvYnMubWpzXCI7XG5pbXBvcnQgeyBKb2JzLCB9IGZyb20gXCIuL2pvYnMvam9icy5tanNcIjtcbmV4cG9ydCBjbGFzcyBGaW5lVHVuaW5nIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm1ldGhvZHMgPSBuZXcgTWV0aG9kc0FQSS5NZXRob2RzKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMuam9icyA9IG5ldyBKb2JzQVBJLkpvYnModGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy5jaGVja3BvaW50cyA9IG5ldyBDaGVja3BvaW50c0FQSS5DaGVja3BvaW50cyh0aGlzLl9jbGllbnQpO1xuICAgICAgICB0aGlzLmFscGhhID0gbmV3IEFscGhhQVBJLkFscGhhKHRoaXMuX2NsaWVudCk7XG4gICAgfVxufVxuRmluZVR1bmluZy5NZXRob2RzID0gTWV0aG9kcztcbkZpbmVUdW5pbmcuSm9icyA9IEpvYnM7XG5GaW5lVHVuaW5nLkNoZWNrcG9pbnRzID0gQ2hlY2twb2ludHM7XG5GaW5lVHVuaW5nLkFscGhhID0gQWxwaGE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maW5lLXR1bmluZy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiTWV0aG9kc0FQSSIsIk1ldGhvZHMiLCJBbHBoYUFQSSIsIkFscGhhIiwiQ2hlY2twb2ludHNBUEkiLCJDaGVja3BvaW50cyIsIkpvYnNBUEkiLCJKb2JzIiwiRmluZVR1bmluZyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwibWV0aG9kcyIsIl9jbGllbnQiLCJqb2JzIiwiY2hlY2twb2ludHMiLCJhbHBoYSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Checkpoints: () => (/* binding */ Checkpoints)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Checkpoints extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * List checkpoints for a fine-tuning job.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const fineTuningJobCheckpoint of client.fineTuning.jobs.checkpoints.list(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */ list(fineTuningJobID, query = {}, options) {\n        return this._client.getAPIList(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/fine_tuning/jobs/${fineTuningJobID}/checkpoints`, _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.CursorPage, {\n            query,\n            ...options\n        });\n    }\n} //# sourceMappingURL=checkpoints.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9qb2JzL2NoZWNrcG9pbnRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsc0ZBQXNGO0FBQzdCO0FBQ0M7QUFDRjtBQUNqRCxNQUFNRyxvQkFBb0JILDJEQUFXQTtJQUN4Qzs7Ozs7Ozs7Ozs7O0tBWUMsR0FDREksS0FBS0MsZUFBZSxFQUFFQyxRQUFRLENBQUMsQ0FBQyxFQUFFQyxPQUFPLEVBQUU7UUFDdkMsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsVUFBVSxDQUFDUCwwREFBSyxDQUFDLGtCQUFrQixFQUFFRyxnQkFBZ0IsWUFBWSxDQUFDLEVBQUdKLDREQUFVQSxFQUFHO1lBQUVLO1lBQU8sR0FBR0MsT0FBTztRQUFDO0lBQzlIO0FBQ0osRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2pvYnMvY2hlY2twb2ludHMubWpzPzQ2NGUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvcGFnaW5hdGlvbi5tanNcIjtcbmltcG9ydCB7IHBhdGggfSBmcm9tIFwiLi4vLi4vLi4vaW50ZXJuYWwvdXRpbHMvcGF0aC5tanNcIjtcbmV4cG9ydCBjbGFzcyBDaGVja3BvaW50cyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBMaXN0IGNoZWNrcG9pbnRzIGZvciBhIGZpbmUtdHVuaW5nIGpvYi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiAvLyBBdXRvbWF0aWNhbGx5IGZldGNoZXMgbW9yZSBwYWdlcyBhcyBuZWVkZWQuXG4gICAgICogZm9yIGF3YWl0IChjb25zdCBmaW5lVHVuaW5nSm9iQ2hlY2twb2ludCBvZiBjbGllbnQuZmluZVR1bmluZy5qb2JzLmNoZWNrcG9pbnRzLmxpc3QoXG4gICAgICogICAnZnQtQUYxV29ScWQzYUpBSHNxYzlOWTdpTDhGJyxcbiAgICAgKiApKSB7XG4gICAgICogICAvLyAuLi5cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgbGlzdChmaW5lVHVuaW5nSm9iSUQsIHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KHBhdGggYC9maW5lX3R1bmluZy9qb2JzLyR7ZmluZVR1bmluZ0pvYklEfS9jaGVja3BvaW50c2AsIChDdXJzb3JQYWdlKSwgeyBxdWVyeSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGVja3BvaW50cy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ3Vyc29yUGFnZSIsInBhdGgiLCJDaGVja3BvaW50cyIsImxpc3QiLCJmaW5lVHVuaW5nSm9iSUQiLCJxdWVyeSIsIm9wdGlvbnMiLCJfY2xpZW50IiwiZ2V0QVBJTGlzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Jobs: () => (/* binding */ Jobs)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./checkpoints.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass Jobs extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.checkpoints = new _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_1__.Checkpoints(this._client);\n    }\n    /**\n     * Creates a fine-tuning job which begins the process of creating a new model from\n     * a given dataset.\n     *\n     * Response includes details of the enqueued job including job status and the name\n     * of the fine-tuned models once complete.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/model-optimization)\n     *\n     * @example\n     * ```ts\n     * const fineTuningJob = await client.fineTuning.jobs.create({\n     *   model: 'gpt-4o-mini',\n     *   training_file: 'file-abc123',\n     * });\n     * ```\n     */ create(body, options) {\n        return this._client.post(\"/fine_tuning/jobs\", {\n            body,\n            ...options\n        });\n    }\n    /**\n     * Get info about a fine-tuning job.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/model-optimization)\n     *\n     * @example\n     * ```ts\n     * const fineTuningJob = await client.fineTuning.jobs.retrieve(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * );\n     * ```\n     */ retrieve(fineTuningJobID, options) {\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/fine_tuning/jobs/${fineTuningJobID}`, options);\n    }\n    /**\n     * List your organization's fine-tuning jobs\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const fineTuningJob of client.fineTuning.jobs.list()) {\n     *   // ...\n     * }\n     * ```\n     */ list(query = {}, options) {\n        return this._client.getAPIList(\"/fine_tuning/jobs\", _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Immediately cancel a fine-tune job.\n     *\n     * @example\n     * ```ts\n     * const fineTuningJob = await client.fineTuning.jobs.cancel(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * );\n     * ```\n     */ cancel(fineTuningJobID, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/fine_tuning/jobs/${fineTuningJobID}/cancel`, options);\n    }\n    /**\n     * Get status updates for a fine-tuning job.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const fineTuningJobEvent of client.fineTuning.jobs.listEvents(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */ listEvents(fineTuningJobID, query = {}, options) {\n        return this._client.getAPIList(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/fine_tuning/jobs/${fineTuningJobID}/events`, _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Pause a fine-tune job.\n     *\n     * @example\n     * ```ts\n     * const fineTuningJob = await client.fineTuning.jobs.pause(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * );\n     * ```\n     */ pause(fineTuningJobID, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/fine_tuning/jobs/${fineTuningJobID}/pause`, options);\n    }\n    /**\n     * Resume a fine-tune job.\n     *\n     * @example\n     * ```ts\n     * const fineTuningJob = await client.fineTuning.jobs.resume(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * );\n     * ```\n     */ resume(fineTuningJobID, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/fine_tuning/jobs/${fineTuningJobID}/resume`, options);\n    }\n}\nJobs.Checkpoints = _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_1__.Checkpoints; //# sourceMappingURL=jobs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9qb2JzL2pvYnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQzdCO0FBQ0w7QUFDSDtBQUNTO0FBQ0Y7QUFDakQsTUFBTUssYUFBYUwsMkRBQVdBO0lBQ2pDTSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUlQLHlEQUEwQixDQUFDLElBQUksQ0FBQ1EsT0FBTztJQUNsRTtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0tBZ0JDLEdBQ0RDLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNJLElBQUksQ0FBQyxxQkFBcUI7WUFBRUY7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDckU7SUFDQTs7Ozs7Ozs7Ozs7S0FXQyxHQUNERSxTQUFTQyxlQUFlLEVBQUVILE9BQU8sRUFBRTtRQUMvQixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDTyxHQUFHLENBQUNaLDBEQUFLLENBQUMsa0JBQWtCLEVBQUVXLGdCQUFnQixDQUFDLEVBQUVIO0lBQ3pFO0lBQ0E7Ozs7Ozs7Ozs7S0FVQyxHQUNESyxLQUFLQyxRQUFRLENBQUMsQ0FBQyxFQUFFTixPQUFPLEVBQUU7UUFDdEIsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQ1UsVUFBVSxDQUFDLHFCQUFzQmhCLDREQUFVQSxFQUFHO1lBQUVlO1lBQU8sR0FBR04sT0FBTztRQUFDO0lBQzFGO0lBQ0E7Ozs7Ozs7OztLQVNDLEdBQ0RRLE9BQU9MLGVBQWUsRUFBRUgsT0FBTyxFQUFFO1FBQzdCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNJLElBQUksQ0FBQ1QsMERBQUssQ0FBQyxrQkFBa0IsRUFBRVcsZ0JBQWdCLE9BQU8sQ0FBQyxFQUFFSDtJQUNqRjtJQUNBOzs7Ozs7Ozs7Ozs7S0FZQyxHQUNEUyxXQUFXTixlQUFlLEVBQUVHLFFBQVEsQ0FBQyxDQUFDLEVBQUVOLE9BQU8sRUFBRTtRQUM3QyxPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDVSxVQUFVLENBQUNmLDBEQUFLLENBQUMsa0JBQWtCLEVBQUVXLGdCQUFnQixPQUFPLENBQUMsRUFBR1osNERBQVVBLEVBQUc7WUFBRWU7WUFBTyxHQUFHTixPQUFPO1FBQUM7SUFDekg7SUFDQTs7Ozs7Ozs7O0tBU0MsR0FDRFUsTUFBTVAsZUFBZSxFQUFFSCxPQUFPLEVBQUU7UUFDNUIsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQ0ksSUFBSSxDQUFDVCwwREFBSyxDQUFDLGtCQUFrQixFQUFFVyxnQkFBZ0IsTUFBTSxDQUFDLEVBQUVIO0lBQ2hGO0lBQ0E7Ozs7Ozs7OztLQVNDLEdBQ0RXLE9BQU9SLGVBQWUsRUFBRUgsT0FBTyxFQUFFO1FBQzdCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNJLElBQUksQ0FBQ1QsMERBQUssQ0FBQyxrQkFBa0IsRUFBRVcsZ0JBQWdCLE9BQU8sQ0FBQyxFQUFFSDtJQUNqRjtBQUNKO0FBQ0FQLEtBQUtILFdBQVcsR0FBR0EseURBQVdBLEVBQzlCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvZmluZS10dW5pbmcvam9icy9qb2JzLm1qcz85ODE3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi9jb3JlL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgQ2hlY2twb2ludHNBUEkgZnJvbSBcIi4vY2hlY2twb2ludHMubWpzXCI7XG5pbXBvcnQgeyBDaGVja3BvaW50cywgfSBmcm9tIFwiLi9jaGVja3BvaW50cy5tanNcIjtcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9wYWdpbmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcm5hbC91dGlscy9wYXRoLm1qc1wiO1xuZXhwb3J0IGNsYXNzIEpvYnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hlY2twb2ludHMgPSBuZXcgQ2hlY2twb2ludHNBUEkuQ2hlY2twb2ludHModGhpcy5fY2xpZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZpbmUtdHVuaW5nIGpvYiB3aGljaCBiZWdpbnMgdGhlIHByb2Nlc3Mgb2YgY3JlYXRpbmcgYSBuZXcgbW9kZWwgZnJvbVxuICAgICAqIGEgZ2l2ZW4gZGF0YXNldC5cbiAgICAgKlxuICAgICAqIFJlc3BvbnNlIGluY2x1ZGVzIGRldGFpbHMgb2YgdGhlIGVucXVldWVkIGpvYiBpbmNsdWRpbmcgam9iIHN0YXR1cyBhbmQgdGhlIG5hbWVcbiAgICAgKiBvZiB0aGUgZmluZS10dW5lZCBtb2RlbHMgb25jZSBjb21wbGV0ZS5cbiAgICAgKlxuICAgICAqIFtMZWFybiBtb3JlIGFib3V0IGZpbmUtdHVuaW5nXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvbW9kZWwtb3B0aW1pemF0aW9uKVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IGZpbmVUdW5pbmdKb2IgPSBhd2FpdCBjbGllbnQuZmluZVR1bmluZy5qb2JzLmNyZWF0ZSh7XG4gICAgICogICBtb2RlbDogJ2dwdC00by1taW5pJyxcbiAgICAgKiAgIHRyYWluaW5nX2ZpbGU6ICdmaWxlLWFiYzEyMycsXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvZmluZV90dW5pbmcvam9icycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGluZm8gYWJvdXQgYSBmaW5lLXR1bmluZyBqb2IuXG4gICAgICpcbiAgICAgKiBbTGVhcm4gbW9yZSBhYm91dCBmaW5lLXR1bmluZ10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL21vZGVsLW9wdGltaXphdGlvbilcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBjb25zdCBmaW5lVHVuaW5nSm9iID0gYXdhaXQgY2xpZW50LmZpbmVUdW5pbmcuam9icy5yZXRyaWV2ZShcbiAgICAgKiAgICdmdC1BRjFXb1JxZDNhSkFIc3FjOU5ZN2lMOEYnLFxuICAgICAqICk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcmV0cmlldmUoZmluZVR1bmluZ0pvYklELCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KHBhdGggYC9maW5lX3R1bmluZy9qb2JzLyR7ZmluZVR1bmluZ0pvYklEfWAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaXN0IHlvdXIgb3JnYW5pemF0aW9uJ3MgZmluZS10dW5pbmcgam9ic1xuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIC8vIEF1dG9tYXRpY2FsbHkgZmV0Y2hlcyBtb3JlIHBhZ2VzIGFzIG5lZWRlZC5cbiAgICAgKiBmb3IgYXdhaXQgKGNvbnN0IGZpbmVUdW5pbmdKb2Igb2YgY2xpZW50LmZpbmVUdW5pbmcuam9icy5saXN0KCkpIHtcbiAgICAgKiAgIC8vIC4uLlxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBsaXN0KHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvZmluZV90dW5pbmcvam9icycsIChDdXJzb3JQYWdlKSwgeyBxdWVyeSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW1tZWRpYXRlbHkgY2FuY2VsIGEgZmluZS10dW5lIGpvYi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBjb25zdCBmaW5lVHVuaW5nSm9iID0gYXdhaXQgY2xpZW50LmZpbmVUdW5pbmcuam9icy5jYW5jZWwoXG4gICAgICogICAnZnQtQUYxV29ScWQzYUpBSHNxYzlOWTdpTDhGJyxcbiAgICAgKiApO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGNhbmNlbChmaW5lVHVuaW5nSm9iSUQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KHBhdGggYC9maW5lX3R1bmluZy9qb2JzLyR7ZmluZVR1bmluZ0pvYklEfS9jYW5jZWxgLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHN0YXR1cyB1cGRhdGVzIGZvciBhIGZpbmUtdHVuaW5nIGpvYi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiAvLyBBdXRvbWF0aWNhbGx5IGZldGNoZXMgbW9yZSBwYWdlcyBhcyBuZWVkZWQuXG4gICAgICogZm9yIGF3YWl0IChjb25zdCBmaW5lVHVuaW5nSm9iRXZlbnQgb2YgY2xpZW50LmZpbmVUdW5pbmcuam9icy5saXN0RXZlbnRzKFxuICAgICAqICAgJ2Z0LUFGMVdvUnFkM2FKQUhzcWM5Tlk3aUw4RicsXG4gICAgICogKSkge1xuICAgICAqICAgLy8gLi4uXG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGxpc3RFdmVudHMoZmluZVR1bmluZ0pvYklELCBxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdChwYXRoIGAvZmluZV90dW5pbmcvam9icy8ke2ZpbmVUdW5pbmdKb2JJRH0vZXZlbnRzYCwgKEN1cnNvclBhZ2UpLCB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXVzZSBhIGZpbmUtdHVuZSBqb2IuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3QgZmluZVR1bmluZ0pvYiA9IGF3YWl0IGNsaWVudC5maW5lVHVuaW5nLmpvYnMucGF1c2UoXG4gICAgICogICAnZnQtQUYxV29ScWQzYUpBSHNxYzlOWTdpTDhGJyxcbiAgICAgKiApO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHBhdXNlKGZpbmVUdW5pbmdKb2JJRCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QocGF0aCBgL2ZpbmVfdHVuaW5nL2pvYnMvJHtmaW5lVHVuaW5nSm9iSUR9L3BhdXNlYCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc3VtZSBhIGZpbmUtdHVuZSBqb2IuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3QgZmluZVR1bmluZ0pvYiA9IGF3YWl0IGNsaWVudC5maW5lVHVuaW5nLmpvYnMucmVzdW1lKFxuICAgICAqICAgJ2Z0LUFGMVdvUnFkM2FKQUhzcWM5Tlk3aUw4RicsXG4gICAgICogKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByZXN1bWUoZmluZVR1bmluZ0pvYklELCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChwYXRoIGAvZmluZV90dW5pbmcvam9icy8ke2ZpbmVUdW5pbmdKb2JJRH0vcmVzdW1lYCwgb3B0aW9ucyk7XG4gICAgfVxufVxuSm9icy5DaGVja3BvaW50cyA9IENoZWNrcG9pbnRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9am9icy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ2hlY2twb2ludHNBUEkiLCJDaGVja3BvaW50cyIsIkN1cnNvclBhZ2UiLCJwYXRoIiwiSm9icyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiY2hlY2twb2ludHMiLCJfY2xpZW50IiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJwb3N0IiwicmV0cmlldmUiLCJmaW5lVHVuaW5nSm9iSUQiLCJnZXQiLCJsaXN0IiwicXVlcnkiLCJnZXRBUElMaXN0IiwiY2FuY2VsIiwibGlzdEV2ZW50cyIsInBhdXNlIiwicmVzdW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/methods.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/methods.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Methods: () => (/* binding */ Methods)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Methods extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n} //# sourceMappingURL=methods.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9tZXRob2RzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNGQUFzRjtBQUNoQztBQUMvQyxNQUFNQyxnQkFBZ0JELDJEQUFXQTtBQUN4QyxFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvZmluZS10dW5pbmcvbWV0aG9kcy5tanM/YTliMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmV4cG9ydCBjbGFzcyBNZXRob2RzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0aG9kcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiTWV0aG9kcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/methods.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/graders/grader-models.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/graders/grader-models.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GraderModels: () => (/* binding */ GraderModels)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass GraderModels extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n} //# sourceMappingURL=grader-models.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9ncmFkZXJzL2dyYWRlci1tb2RlbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0ZBQXNGO0FBQ2hDO0FBQy9DLE1BQU1DLHFCQUFxQkQsMkRBQVdBO0FBQzdDLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9ncmFkZXJzL2dyYWRlci1tb2RlbHMubWpzPzNjZTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5leHBvcnQgY2xhc3MgR3JhZGVyTW9kZWxzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JhZGVyLW1vZGVscy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiR3JhZGVyTW9kZWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/graders/grader-models.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/graders/graders.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/openai/resources/graders/graders.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Graders: () => (/* binding */ Graders)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _grader_models_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./grader-models.mjs */ \"(rsc)/./node_modules/openai/resources/graders/grader-models.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Graders extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.graderModels = new _grader_models_mjs__WEBPACK_IMPORTED_MODULE_1__.GraderModels(this._client);\n    }\n}\nGraders.GraderModels = _grader_models_mjs__WEBPACK_IMPORTED_MODULE_1__.GraderModels; //# sourceMappingURL=graders.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9ncmFkZXJzL2dyYWRlcnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNGQUFzRjtBQUNoQztBQUNDO0FBQ0g7QUFDN0MsTUFBTUcsZ0JBQWdCSCwyREFBV0E7SUFDcENJLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxZQUFZLEdBQUcsSUFBSUwsNERBQTRCLENBQUMsSUFBSSxDQUFDTSxPQUFPO0lBQ3JFO0FBQ0o7QUFDQUosUUFBUUQsWUFBWSxHQUFHQSw0REFBWUEsRUFDbkMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9ncmFkZXJzL2dyYWRlcnMubWpzP2UzMGIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBHcmFkZXJNb2RlbHNBUEkgZnJvbSBcIi4vZ3JhZGVyLW1vZGVscy5tanNcIjtcbmltcG9ydCB7IEdyYWRlck1vZGVscywgfSBmcm9tIFwiLi9ncmFkZXItbW9kZWxzLm1qc1wiO1xuZXhwb3J0IGNsYXNzIEdyYWRlcnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZ3JhZGVyTW9kZWxzID0gbmV3IEdyYWRlck1vZGVsc0FQSS5HcmFkZXJNb2RlbHModGhpcy5fY2xpZW50KTtcbiAgICB9XG59XG5HcmFkZXJzLkdyYWRlck1vZGVscyA9IEdyYWRlck1vZGVscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyYWRlcnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkdyYWRlck1vZGVsc0FQSSIsIkdyYWRlck1vZGVscyIsIkdyYWRlcnMiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImdyYWRlck1vZGVscyIsIl9jbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/graders/graders.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/images.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/resources/images.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Images: () => (/* binding */ Images)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/uploads.mjs */ \"(rsc)/./node_modules/openai/internal/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Images extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates a variation of a given image. This endpoint only supports `dall-e-2`.\n     *\n     * @example\n     * ```ts\n     * const imagesResponse = await client.images.createVariation({\n     *   image: fs.createReadStream('otter.png'),\n     * });\n     * ```\n     */ createVariation(body, options) {\n        return this._client.post(\"/images/variations\", (0,_internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }, this._client));\n    }\n    edit(body, options) {\n        return this._client.post(\"/images/edits\", (0,_internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options,\n            stream: body.stream ?? false\n        }, this._client));\n    }\n    generate(body, options) {\n        return this._client.post(\"/images/generations\", {\n            body,\n            ...options,\n            stream: body.stream ?? false\n        });\n    }\n} //# sourceMappingURL=images.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9pbWFnZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNGQUFzRjtBQUNuQztBQUNtQjtBQUMvRCxNQUFNRSxlQUFlRiwyREFBV0E7SUFDbkM7Ozs7Ozs7OztLQVNDLEdBQ0RHLGdCQUFnQkMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLHNCQUFzQk4sa0ZBQTJCQSxDQUFDO1lBQUVHO1lBQU0sR0FBR0MsT0FBTztRQUFDLEdBQUcsSUFBSSxDQUFDQyxPQUFPO0lBQ2pIO0lBQ0FFLEtBQUtKLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxpQkFBaUJOLGtGQUEyQkEsQ0FBQztZQUFFRztZQUFNLEdBQUdDLE9BQU87WUFBRUksUUFBUUwsS0FBS0ssTUFBTSxJQUFJO1FBQU0sR0FBRyxJQUFJLENBQUNILE9BQU87SUFDMUk7SUFDQUksU0FBU04sSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLHVCQUF1QjtZQUFFSDtZQUFNLEdBQUdDLE9BQU87WUFBRUksUUFBUUwsS0FBS0ssTUFBTSxJQUFJO1FBQU07SUFDckc7QUFDSixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvaW1hZ2VzLm1qcz82ZjdlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi9jb3JlL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uL2ludGVybmFsL3VwbG9hZHMubWpzXCI7XG5leHBvcnQgY2xhc3MgSW1hZ2VzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB2YXJpYXRpb24gb2YgYSBnaXZlbiBpbWFnZS4gVGhpcyBlbmRwb2ludCBvbmx5IHN1cHBvcnRzIGBkYWxsLWUtMmAuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3QgaW1hZ2VzUmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuaW1hZ2VzLmNyZWF0ZVZhcmlhdGlvbih7XG4gICAgICogICBpbWFnZTogZnMuY3JlYXRlUmVhZFN0cmVhbSgnb3R0ZXIucG5nJyksXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY3JlYXRlVmFyaWF0aW9uKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvaW1hZ2VzL3ZhcmlhdGlvbnMnLCBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zIH0sIHRoaXMuX2NsaWVudCkpO1xuICAgIH1cbiAgICBlZGl0KGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvaW1hZ2VzL2VkaXRzJywgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHsgYm9keSwgLi4ub3B0aW9ucywgc3RyZWFtOiBib2R5LnN0cmVhbSA/PyBmYWxzZSB9LCB0aGlzLl9jbGllbnQpKTtcbiAgICB9XG4gICAgZ2VuZXJhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9pbWFnZXMvZ2VuZXJhdGlvbnMnLCB7IGJvZHksIC4uLm9wdGlvbnMsIHN0cmVhbTogYm9keS5zdHJlYW0gPz8gZmFsc2UgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1hZ2VzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMiLCJJbWFnZXMiLCJjcmVhdGVWYXJpYXRpb24iLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0IiwiZWRpdCIsInN0cmVhbSIsImdlbmVyYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/images.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/index.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/resources/index.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Audio: () => (/* reexport safe */ _audio_audio_mjs__WEBPACK_IMPORTED_MODULE_2__.Audio),\n/* harmony export */   Batches: () => (/* reexport safe */ _batches_mjs__WEBPACK_IMPORTED_MODULE_3__.Batches),\n/* harmony export */   Beta: () => (/* reexport safe */ _beta_beta_mjs__WEBPACK_IMPORTED_MODULE_4__.Beta),\n/* harmony export */   Chat: () => (/* reexport safe */ _chat_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Chat),\n/* harmony export */   Completions: () => (/* reexport safe */ _completions_mjs__WEBPACK_IMPORTED_MODULE_5__.Completions),\n/* harmony export */   Containers: () => (/* reexport safe */ _containers_containers_mjs__WEBPACK_IMPORTED_MODULE_6__.Containers),\n/* harmony export */   Embeddings: () => (/* reexport safe */ _embeddings_mjs__WEBPACK_IMPORTED_MODULE_7__.Embeddings),\n/* harmony export */   Evals: () => (/* reexport safe */ _evals_evals_mjs__WEBPACK_IMPORTED_MODULE_8__.Evals),\n/* harmony export */   Files: () => (/* reexport safe */ _files_mjs__WEBPACK_IMPORTED_MODULE_9__.Files),\n/* harmony export */   FineTuning: () => (/* reexport safe */ _fine_tuning_fine_tuning_mjs__WEBPACK_IMPORTED_MODULE_10__.FineTuning),\n/* harmony export */   Graders: () => (/* reexport safe */ _graders_graders_mjs__WEBPACK_IMPORTED_MODULE_11__.Graders),\n/* harmony export */   Images: () => (/* reexport safe */ _images_mjs__WEBPACK_IMPORTED_MODULE_12__.Images),\n/* harmony export */   Models: () => (/* reexport safe */ _models_mjs__WEBPACK_IMPORTED_MODULE_13__.Models),\n/* harmony export */   Moderations: () => (/* reexport safe */ _moderations_mjs__WEBPACK_IMPORTED_MODULE_14__.Moderations),\n/* harmony export */   Responses: () => (/* reexport safe */ _responses_responses_mjs__WEBPACK_IMPORTED_MODULE_15__.Responses),\n/* harmony export */   Uploads: () => (/* reexport safe */ _uploads_uploads_mjs__WEBPACK_IMPORTED_MODULE_16__.Uploads),\n/* harmony export */   VectorStores: () => (/* reexport safe */ _vector_stores_vector_stores_mjs__WEBPACK_IMPORTED_MODULE_17__.VectorStores),\n/* harmony export */   Webhooks: () => (/* reexport safe */ _webhooks_mjs__WEBPACK_IMPORTED_MODULE_18__.Webhooks)\n/* harmony export */ });\n/* harmony import */ var _chat_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chat/index.mjs */ \"(rsc)/./node_modules/openai/resources/chat/index.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared.mjs */ \"(rsc)/./node_modules/openai/resources/shared.mjs\");\n/* harmony import */ var _audio_audio_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./audio/audio.mjs */ \"(rsc)/./node_modules/openai/resources/audio/audio.mjs\");\n/* harmony import */ var _batches_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./batches.mjs */ \"(rsc)/./node_modules/openai/resources/batches.mjs\");\n/* harmony import */ var _beta_beta_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./beta/beta.mjs */ \"(rsc)/./node_modules/openai/resources/beta/beta.mjs\");\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./completions.mjs */ \"(rsc)/./node_modules/openai/resources/completions.mjs\");\n/* harmony import */ var _containers_containers_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./containers/containers.mjs */ \"(rsc)/./node_modules/openai/resources/containers/containers.mjs\");\n/* harmony import */ var _embeddings_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./embeddings.mjs */ \"(rsc)/./node_modules/openai/resources/embeddings.mjs\");\n/* harmony import */ var _evals_evals_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./evals/evals.mjs */ \"(rsc)/./node_modules/openai/resources/evals/evals.mjs\");\n/* harmony import */ var _files_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./files.mjs */ \"(rsc)/./node_modules/openai/resources/files.mjs\");\n/* harmony import */ var _fine_tuning_fine_tuning_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./fine-tuning/fine-tuning.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs\");\n/* harmony import */ var _graders_graders_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./graders/graders.mjs */ \"(rsc)/./node_modules/openai/resources/graders/graders.mjs\");\n/* harmony import */ var _images_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./images.mjs */ \"(rsc)/./node_modules/openai/resources/images.mjs\");\n/* harmony import */ var _models_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./models.mjs */ \"(rsc)/./node_modules/openai/resources/models.mjs\");\n/* harmony import */ var _moderations_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./moderations.mjs */ \"(rsc)/./node_modules/openai/resources/moderations.mjs\");\n/* harmony import */ var _responses_responses_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./responses/responses.mjs */ \"(rsc)/./node_modules/openai/resources/responses/responses.mjs\");\n/* harmony import */ var _uploads_uploads_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./uploads/uploads.mjs */ \"(rsc)/./node_modules/openai/resources/uploads/uploads.mjs\");\n/* harmony import */ var _vector_stores_vector_stores_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./vector-stores/vector-stores.mjs */ \"(rsc)/./node_modules/openai/resources/vector-stores/vector-stores.mjs\");\n/* harmony import */ var _webhooks_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./webhooks.mjs */ \"(rsc)/./node_modules/openai/resources/webhooks.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHNGQUFzRjtBQUNyRDtBQUNKO0FBQ2E7QUFDRDtBQUNGO0FBQ1U7QUFDUztBQUNYO0FBQ0o7QUFDTjtBQUNzQjtBQUNYO0FBQ1Q7QUFDRDtBQUNXO0FBQ0s7QUFDTjtBQUNrQjtBQUN4QixDQUMxQyxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2luZGV4Lm1qcz9mZDE0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5leHBvcnQgKiBmcm9tIFwiLi9jaGF0L2luZGV4Lm1qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2hhcmVkLm1qc1wiO1xuZXhwb3J0IHsgQXVkaW8gfSBmcm9tIFwiLi9hdWRpby9hdWRpby5tanNcIjtcbmV4cG9ydCB7IEJhdGNoZXMsIH0gZnJvbSBcIi4vYmF0Y2hlcy5tanNcIjtcbmV4cG9ydCB7IEJldGEgfSBmcm9tIFwiLi9iZXRhL2JldGEubWpzXCI7XG5leHBvcnQgeyBDb21wbGV0aW9ucywgfSBmcm9tIFwiLi9jb21wbGV0aW9ucy5tanNcIjtcbmV4cG9ydCB7IENvbnRhaW5lcnMsIH0gZnJvbSBcIi4vY29udGFpbmVycy9jb250YWluZXJzLm1qc1wiO1xuZXhwb3J0IHsgRW1iZWRkaW5ncywgfSBmcm9tIFwiLi9lbWJlZGRpbmdzLm1qc1wiO1xuZXhwb3J0IHsgRXZhbHMsIH0gZnJvbSBcIi4vZXZhbHMvZXZhbHMubWpzXCI7XG5leHBvcnQgeyBGaWxlcywgfSBmcm9tIFwiLi9maWxlcy5tanNcIjtcbmV4cG9ydCB7IEZpbmVUdW5pbmcgfSBmcm9tIFwiLi9maW5lLXR1bmluZy9maW5lLXR1bmluZy5tanNcIjtcbmV4cG9ydCB7IEdyYWRlcnMgfSBmcm9tIFwiLi9ncmFkZXJzL2dyYWRlcnMubWpzXCI7XG5leHBvcnQgeyBJbWFnZXMsIH0gZnJvbSBcIi4vaW1hZ2VzLm1qc1wiO1xuZXhwb3J0IHsgTW9kZWxzIH0gZnJvbSBcIi4vbW9kZWxzLm1qc1wiO1xuZXhwb3J0IHsgTW9kZXJhdGlvbnMsIH0gZnJvbSBcIi4vbW9kZXJhdGlvbnMubWpzXCI7XG5leHBvcnQgeyBSZXNwb25zZXMgfSBmcm9tIFwiLi9yZXNwb25zZXMvcmVzcG9uc2VzLm1qc1wiO1xuZXhwb3J0IHsgVXBsb2FkcyB9IGZyb20gXCIuL3VwbG9hZHMvdXBsb2Fkcy5tanNcIjtcbmV4cG9ydCB7IFZlY3RvclN0b3JlcywgfSBmcm9tIFwiLi92ZWN0b3Itc3RvcmVzL3ZlY3Rvci1zdG9yZXMubWpzXCI7XG5leHBvcnQgeyBXZWJob29rcyB9IGZyb20gXCIuL3dlYmhvb2tzLm1qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6WyJBdWRpbyIsIkJhdGNoZXMiLCJCZXRhIiwiQ29tcGxldGlvbnMiLCJDb250YWluZXJzIiwiRW1iZWRkaW5ncyIsIkV2YWxzIiwiRmlsZXMiLCJGaW5lVHVuaW5nIiwiR3JhZGVycyIsIkltYWdlcyIsIk1vZGVscyIsIk1vZGVyYXRpb25zIiwiUmVzcG9uc2VzIiwiVXBsb2FkcyIsIlZlY3RvclN0b3JlcyIsIldlYmhvb2tzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/models.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/resources/models.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Models: () => (/* binding */ Models)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Models extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Retrieves a model instance, providing basic information about the model such as\n     * the owner and permissioning.\n     */ retrieve(model, options) {\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/models/${model}`, options);\n    }\n    /**\n     * Lists the currently available models, and provides basic information about each\n     * one such as the owner and availability.\n     */ list(options) {\n        return this._client.getAPIList(\"/models\", _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page, options);\n    }\n    /**\n     * Delete a fine-tuned model. You must have the Owner role in your organization to\n     * delete a model.\n     */ delete(model, options) {\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/models/${model}`, options);\n    }\n} //# sourceMappingURL=models.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9tb2RlbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDbkM7QUFDTDtBQUNJO0FBQzNDLE1BQU1HLGVBQWVILDJEQUFXQTtJQUNuQzs7O0tBR0MsR0FDREksU0FBU0MsS0FBSyxFQUFFQyxPQUFPLEVBQUU7UUFDckIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDTiwwREFBSyxDQUFDLFFBQVEsRUFBRUcsTUFBTSxDQUFDLEVBQUVDO0lBQ3JEO0lBQ0E7OztLQUdDLEdBQ0RHLEtBQUtILE9BQU8sRUFBRTtRQUNWLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNHLFVBQVUsQ0FBQyxXQUFZVCxzREFBSUEsRUFBR0s7SUFDdEQ7SUFDQTs7O0tBR0MsR0FDREssT0FBT04sS0FBSyxFQUFFQyxPQUFPLEVBQUU7UUFDbkIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0ksTUFBTSxDQUFDVCwwREFBSyxDQUFDLFFBQVEsRUFBRUcsTUFBTSxDQUFDLEVBQUVDO0lBQ3hEO0FBQ0osRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL21vZGVscy5tanM/ZjdhMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwiLi4vY29yZS9wYWdpbmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gXCIuLi9pbnRlcm5hbC91dGlscy9wYXRoLm1qc1wiO1xuZXhwb3J0IGNsYXNzIE1vZGVscyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSBtb2RlbCBpbnN0YW5jZSwgcHJvdmlkaW5nIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IHRoZSBtb2RlbCBzdWNoIGFzXG4gICAgICogdGhlIG93bmVyIGFuZCBwZXJtaXNzaW9uaW5nLlxuICAgICAqL1xuICAgIHJldHJpZXZlKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KHBhdGggYC9tb2RlbHMvJHttb2RlbH1gLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlzdHMgdGhlIGN1cnJlbnRseSBhdmFpbGFibGUgbW9kZWxzLCBhbmQgcHJvdmlkZXMgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgZWFjaFxuICAgICAqIG9uZSBzdWNoIGFzIHRoZSBvd25lciBhbmQgYXZhaWxhYmlsaXR5LlxuICAgICAqL1xuICAgIGxpc3Qob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoJy9tb2RlbHMnLCAoUGFnZSksIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBmaW5lLXR1bmVkIG1vZGVsLiBZb3UgbXVzdCBoYXZlIHRoZSBPd25lciByb2xlIGluIHlvdXIgb3JnYW5pemF0aW9uIHRvXG4gICAgICogZGVsZXRlIGEgbW9kZWwuXG4gICAgICovXG4gICAgZGVsZXRlKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKHBhdGggYC9tb2RlbHMvJHttb2RlbH1gLCBvcHRpb25zKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlbHMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIlBhZ2UiLCJwYXRoIiwiTW9kZWxzIiwicmV0cmlldmUiLCJtb2RlbCIsIm9wdGlvbnMiLCJfY2xpZW50IiwiZ2V0IiwibGlzdCIsImdldEFQSUxpc3QiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/models.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/moderations.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/moderations.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Moderations: () => (/* binding */ Moderations)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Moderations extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Classifies if text and/or image inputs are potentially harmful. Learn more in\n     * the [moderation guide](https://platform.openai.com/docs/guides/moderation).\n     */ create(body, options) {\n        return this._client.post(\"/moderations\", {\n            body,\n            ...options\n        });\n    }\n} //# sourceMappingURL=moderations.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9tb2RlcmF0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxzRkFBc0Y7QUFDbkM7QUFDNUMsTUFBTUMsb0JBQW9CRCwyREFBV0E7SUFDeEM7OztLQUdDLEdBQ0RFLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxnQkFBZ0I7WUFBRUg7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDaEU7QUFDSixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvbW9kZXJhdGlvbnMubWpzP2FmZTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5leHBvcnQgY2xhc3MgTW9kZXJhdGlvbnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQ2xhc3NpZmllcyBpZiB0ZXh0IGFuZC9vciBpbWFnZSBpbnB1dHMgYXJlIHBvdGVudGlhbGx5IGhhcm1mdWwuIExlYXJuIG1vcmUgaW5cbiAgICAgKiB0aGUgW21vZGVyYXRpb24gZ3VpZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9tb2RlcmF0aW9uKS5cbiAgICAgKi9cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9tb2RlcmF0aW9ucycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlcmF0aW9ucy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiTW9kZXJhdGlvbnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/moderations.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/responses/input-items.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/responses/input-items.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InputItems: () => (/* binding */ InputItems)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass InputItems extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Returns a list of input items for a given response.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const responseItem of client.responses.inputItems.list(\n     *   'response_id',\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */ list(responseID, query = {}, options) {\n        return this._client.getAPIList(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/responses/${responseID}/input_items`, _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.CursorPage, {\n            query,\n            ...options\n        });\n    }\n} //# sourceMappingURL=input-items.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9yZXNwb25zZXMvaW5wdXQtaXRlbXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDaEM7QUFDQztBQUNGO0FBQzlDLE1BQU1HLG1CQUFtQkgsMkRBQVdBO0lBQ3ZDOzs7Ozs7Ozs7Ozs7S0FZQyxHQUNESSxLQUFLQyxVQUFVLEVBQUVDLFFBQVEsQ0FBQyxDQUFDLEVBQUVDLE9BQU8sRUFBRTtRQUNsQyxPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxVQUFVLENBQUNQLDBEQUFLLENBQUMsV0FBVyxFQUFFRyxXQUFXLFlBQVksQ0FBQyxFQUFHSiw0REFBVUEsRUFBRztZQUFFSztZQUFPLEdBQUdDLE9BQU87UUFBQztJQUNsSDtBQUNKLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9yZXNwb25zZXMvaW5wdXQtaXRlbXMubWpzP2M3N2IiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uLy4uL2NvcmUvcGFnaW5hdGlvbi5tanNcIjtcbmltcG9ydCB7IHBhdGggfSBmcm9tIFwiLi4vLi4vaW50ZXJuYWwvdXRpbHMvcGF0aC5tanNcIjtcbmV4cG9ydCBjbGFzcyBJbnB1dEl0ZW1zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGlucHV0IGl0ZW1zIGZvciBhIGdpdmVuIHJlc3BvbnNlLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIC8vIEF1dG9tYXRpY2FsbHkgZmV0Y2hlcyBtb3JlIHBhZ2VzIGFzIG5lZWRlZC5cbiAgICAgKiBmb3IgYXdhaXQgKGNvbnN0IHJlc3BvbnNlSXRlbSBvZiBjbGllbnQucmVzcG9uc2VzLmlucHV0SXRlbXMubGlzdChcbiAgICAgKiAgICdyZXNwb25zZV9pZCcsXG4gICAgICogKSkge1xuICAgICAqICAgLy8gLi4uXG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGxpc3QocmVzcG9uc2VJRCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QocGF0aCBgL3Jlc3BvbnNlcy8ke3Jlc3BvbnNlSUR9L2lucHV0X2l0ZW1zYCwgKEN1cnNvclBhZ2UpLCB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlucHV0LWl0ZW1zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDdXJzb3JQYWdlIiwicGF0aCIsIklucHV0SXRlbXMiLCJsaXN0IiwicmVzcG9uc2VJRCIsInF1ZXJ5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJnZXRBUElMaXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/responses/input-items.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/responses/responses.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/openai/resources/responses/responses.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Responses: () => (/* binding */ Responses)\n/* harmony export */ });\n/* harmony import */ var _lib_ResponsesParser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/ResponsesParser.mjs */ \"(rsc)/./node_modules/openai/lib/ResponsesParser.mjs\");\n/* harmony import */ var _lib_responses_ResponseStream_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/responses/ResponseStream.mjs */ \"(rsc)/./node_modules/openai/lib/responses/ResponseStream.mjs\");\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _input_items_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./input-items.mjs */ \"(rsc)/./node_modules/openai/resources/responses/input-items.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass Responses extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_2__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.inputItems = new _input_items_mjs__WEBPACK_IMPORTED_MODULE_3__.InputItems(this._client);\n    }\n    create(body, options) {\n        return this._client.post(\"/responses\", {\n            body,\n            ...options,\n            stream: body.stream ?? false\n        })._thenUnwrap((rsp)=>{\n            if (\"object\" in rsp && rsp.object === \"response\") {\n                (0,_lib_ResponsesParser_mjs__WEBPACK_IMPORTED_MODULE_0__.addOutputText)(rsp);\n            }\n            return rsp;\n        });\n    }\n    retrieve(responseID, query = {}, options) {\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/responses/${responseID}`, {\n            query,\n            ...options,\n            stream: query?.stream ?? false\n        })._thenUnwrap((rsp)=>{\n            if (\"object\" in rsp && rsp.object === \"response\") {\n                (0,_lib_ResponsesParser_mjs__WEBPACK_IMPORTED_MODULE_0__.addOutputText)(rsp);\n            }\n            return rsp;\n        });\n    }\n    /**\n     * Deletes a model response with the given ID.\n     *\n     * @example\n     * ```ts\n     * await client.responses.delete(\n     *   'resp_677efb5139a88190b512bc3fef8e535d',\n     * );\n     * ```\n     */ delete(responseID, options) {\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/responses/${responseID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_4__.buildHeaders)([\n                {\n                    Accept: \"*/*\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    parse(body, options) {\n        return this._client.responses.create(body, options)._thenUnwrap((response)=>(0,_lib_ResponsesParser_mjs__WEBPACK_IMPORTED_MODULE_0__.parseResponse)(response, body));\n    }\n    /**\n     * Creates a model response stream\n     */ stream(body, options) {\n        return _lib_responses_ResponseStream_mjs__WEBPACK_IMPORTED_MODULE_1__.ResponseStream.createResponse(this._client, body, options);\n    }\n    /**\n     * Cancels a model response with the given ID. Only responses created with the\n     * `background` parameter set to `true` can be cancelled.\n     * [Learn more](https://platform.openai.com/docs/guides/background).\n     *\n     * @example\n     * ```ts\n     * const response = await client.responses.cancel(\n     *   'resp_677efb5139a88190b512bc3fef8e535d',\n     * );\n     * ```\n     */ cancel(responseID, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/responses/${responseID}/cancel`, options);\n    }\n}\nResponses.InputItems = _input_items_mjs__WEBPACK_IMPORTED_MODULE_3__.InputItems; //# sourceMappingURL=responses.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9yZXNwb25zZXMvcmVzcG9uc2VzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ1I7QUFDTjtBQUNsQjtBQUNIO0FBQ0o7QUFDVztBQUNMO0FBQzlDLE1BQU1RLGtCQUFrQkwsMkRBQVdBO0lBQ3RDTSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsVUFBVSxHQUFHLElBQUlQLHdEQUF3QixDQUFDLElBQUksQ0FBQ1EsT0FBTztJQUMvRDtJQUNBQyxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDSSxJQUFJLENBQUMsY0FBYztZQUFFRjtZQUFNLEdBQUdDLE9BQU87WUFBRUUsUUFBUUgsS0FBS0csTUFBTSxJQUFJO1FBQU0sR0FBR0MsV0FBVyxDQUFDLENBQUNDO1lBQ3BHLElBQUksWUFBWUEsT0FBT0EsSUFBSUMsTUFBTSxLQUFLLFlBQVk7Z0JBQzlDbkIsdUVBQWFBLENBQUNrQjtZQUNsQjtZQUNBLE9BQU9BO1FBQ1g7SUFDSjtJQUNBRSxTQUFTQyxVQUFVLEVBQUVDLFFBQVEsQ0FBQyxDQUFDLEVBQUVSLE9BQU8sRUFBRTtRQUN0QyxPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDWSxHQUFHLENBQUNqQiwwREFBSyxDQUFDLFdBQVcsRUFBRWUsV0FBVyxDQUFDLEVBQUU7WUFDckRDO1lBQ0EsR0FBR1IsT0FBTztZQUNWRSxRQUFRTSxPQUFPTixVQUFVO1FBQzdCLEdBQUdDLFdBQVcsQ0FBQyxDQUFDQztZQUNaLElBQUksWUFBWUEsT0FBT0EsSUFBSUMsTUFBTSxLQUFLLFlBQVk7Z0JBQzlDbkIsdUVBQWFBLENBQUNrQjtZQUNsQjtZQUNBLE9BQU9BO1FBQ1g7SUFDSjtJQUNBOzs7Ozs7Ozs7S0FTQyxHQUNETSxPQUFPSCxVQUFVLEVBQUVQLE9BQU8sRUFBRTtRQUN4QixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDYSxNQUFNLENBQUNsQiwwREFBSyxDQUFDLFdBQVcsRUFBRWUsV0FBVyxDQUFDLEVBQUU7WUFDeEQsR0FBR1AsT0FBTztZQUNWVyxTQUFTcEIsbUVBQVlBLENBQUM7Z0JBQUM7b0JBQUVxQixRQUFRO2dCQUFNO2dCQUFHWixTQUFTVzthQUFRO1FBQy9EO0lBQ0o7SUFDQUUsTUFBTWQsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDakIsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQ2lCLFNBQVMsQ0FDeEJoQixNQUFNLENBQUNDLE1BQU1DLFNBQ2JHLFdBQVcsQ0FBQyxDQUFDWSxXQUFhOUIsdUVBQWFBLENBQUM4QixVQUFVaEI7SUFDM0Q7SUFDQTs7S0FFQyxHQUNERyxPQUFPSCxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPYiw2RUFBY0EsQ0FBQzZCLGNBQWMsQ0FBQyxJQUFJLENBQUNuQixPQUFPLEVBQUVFLE1BQU1DO0lBQzdEO0lBQ0E7Ozs7Ozs7Ozs7O0tBV0MsR0FDRGlCLE9BQU9WLFVBQVUsRUFBRVAsT0FBTyxFQUFFO1FBQ3hCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNJLElBQUksQ0FBQ1QsMERBQUssQ0FBQyxXQUFXLEVBQUVlLFdBQVcsT0FBTyxDQUFDLEVBQUVQO0lBQ3JFO0FBQ0o7QUFDQVAsVUFBVUgsVUFBVSxHQUFHQSx3REFBVUEsRUFDakMsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9yZXNwb25zZXMvcmVzcG9uc2VzLm1qcz8zMTg1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBwYXJzZVJlc3BvbnNlLCBhZGRPdXRwdXRUZXh0LCB9IGZyb20gXCIuLi8uLi9saWIvUmVzcG9uc2VzUGFyc2VyLm1qc1wiO1xuaW1wb3J0IHsgUmVzcG9uc2VTdHJlYW0gfSBmcm9tIFwiLi4vLi4vbGliL3Jlc3BvbnNlcy9SZXNwb25zZVN0cmVhbS5tanNcIjtcbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBJbnB1dEl0ZW1zQVBJIGZyb20gXCIuL2lucHV0LWl0ZW1zLm1qc1wiO1xuaW1wb3J0IHsgSW5wdXRJdGVtcyB9IGZyb20gXCIuL2lucHV0LWl0ZW1zLm1qc1wiO1xuaW1wb3J0IHsgYnVpbGRIZWFkZXJzIH0gZnJvbSBcIi4uLy4uL2ludGVybmFsL2hlYWRlcnMubWpzXCI7XG5pbXBvcnQgeyBwYXRoIH0gZnJvbSBcIi4uLy4uL2ludGVybmFsL3V0aWxzL3BhdGgubWpzXCI7XG5leHBvcnQgY2xhc3MgUmVzcG9uc2VzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmlucHV0SXRlbXMgPSBuZXcgSW5wdXRJdGVtc0FQSS5JbnB1dEl0ZW1zKHRoaXMuX2NsaWVudCk7XG4gICAgfVxuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3Jlc3BvbnNlcycsIHsgYm9keSwgLi4ub3B0aW9ucywgc3RyZWFtOiBib2R5LnN0cmVhbSA/PyBmYWxzZSB9KS5fdGhlblVud3JhcCgocnNwKSA9PiB7XG4gICAgICAgICAgICBpZiAoJ29iamVjdCcgaW4gcnNwICYmIHJzcC5vYmplY3QgPT09ICdyZXNwb25zZScpIHtcbiAgICAgICAgICAgICAgICBhZGRPdXRwdXRUZXh0KHJzcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnNwO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0cmlldmUocmVzcG9uc2VJRCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChwYXRoIGAvcmVzcG9uc2VzLyR7cmVzcG9uc2VJRH1gLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBzdHJlYW06IHF1ZXJ5Py5zdHJlYW0gPz8gZmFsc2UsXG4gICAgICAgIH0pLl90aGVuVW53cmFwKChyc3ApID0+IHtcbiAgICAgICAgICAgIGlmICgnb2JqZWN0JyBpbiByc3AgJiYgcnNwLm9iamVjdCA9PT0gJ3Jlc3BvbnNlJykge1xuICAgICAgICAgICAgICAgIGFkZE91dHB1dFRleHQocnNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByc3A7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIGEgbW9kZWwgcmVzcG9uc2Ugd2l0aCB0aGUgZ2l2ZW4gSUQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogYXdhaXQgY2xpZW50LnJlc3BvbnNlcy5kZWxldGUoXG4gICAgICogICAncmVzcF82NzdlZmI1MTM5YTg4MTkwYjUxMmJjM2ZlZjhlNTM1ZCcsXG4gICAgICogKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBkZWxldGUocmVzcG9uc2VJRCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShwYXRoIGAvcmVzcG9uc2VzLyR7cmVzcG9uc2VJRH1gLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFt7IEFjY2VwdDogJyovKicgfSwgb3B0aW9ucz8uaGVhZGVyc10pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcGFyc2UoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnJlc3BvbnNlc1xuICAgICAgICAgICAgLmNyZWF0ZShib2R5LCBvcHRpb25zKVxuICAgICAgICAgICAgLl90aGVuVW53cmFwKChyZXNwb25zZSkgPT4gcGFyc2VSZXNwb25zZShyZXNwb25zZSwgYm9keSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbW9kZWwgcmVzcG9uc2Ugc3RyZWFtXG4gICAgICovXG4gICAgc3RyZWFtKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIFJlc3BvbnNlU3RyZWFtLmNyZWF0ZVJlc3BvbnNlKHRoaXMuX2NsaWVudCwgYm9keSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbmNlbHMgYSBtb2RlbCByZXNwb25zZSB3aXRoIHRoZSBnaXZlbiBJRC4gT25seSByZXNwb25zZXMgY3JlYXRlZCB3aXRoIHRoZVxuICAgICAqIGBiYWNrZ3JvdW5kYCBwYXJhbWV0ZXIgc2V0IHRvIGB0cnVlYCBjYW4gYmUgY2FuY2VsbGVkLlxuICAgICAqIFtMZWFybiBtb3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvYmFja2dyb3VuZCkuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQucmVzcG9uc2VzLmNhbmNlbChcbiAgICAgKiAgICdyZXNwXzY3N2VmYjUxMzlhODgxOTBiNTEyYmMzZmVmOGU1MzVkJyxcbiAgICAgKiApO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGNhbmNlbChyZXNwb25zZUlELCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChwYXRoIGAvcmVzcG9uc2VzLyR7cmVzcG9uc2VJRH0vY2FuY2VsYCwgb3B0aW9ucyk7XG4gICAgfVxufVxuUmVzcG9uc2VzLklucHV0SXRlbXMgPSBJbnB1dEl0ZW1zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzcG9uc2VzLm1qcy5tYXAiXSwibmFtZXMiOlsicGFyc2VSZXNwb25zZSIsImFkZE91dHB1dFRleHQiLCJSZXNwb25zZVN0cmVhbSIsIkFQSVJlc291cmNlIiwiSW5wdXRJdGVtc0FQSSIsIklucHV0SXRlbXMiLCJidWlsZEhlYWRlcnMiLCJwYXRoIiwiUmVzcG9uc2VzIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJpbnB1dEl0ZW1zIiwiX2NsaWVudCIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwicG9zdCIsInN0cmVhbSIsIl90aGVuVW53cmFwIiwicnNwIiwib2JqZWN0IiwicmV0cmlldmUiLCJyZXNwb25zZUlEIiwicXVlcnkiLCJnZXQiLCJkZWxldGUiLCJoZWFkZXJzIiwiQWNjZXB0IiwicGFyc2UiLCJyZXNwb25zZXMiLCJyZXNwb25zZSIsImNyZWF0ZVJlc3BvbnNlIiwiY2FuY2VsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/responses/responses.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/shared.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/resources/shared.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n //# sourceMappingURL=shared.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9zaGFyZWQubWpzIiwibWFwcGluZ3MiOiI7QUFBQSxzRkFBc0Y7QUFDNUUsQ0FDVixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL3NoYXJlZC5tanM/OWNiNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmVkLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/shared.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/uploads/parts.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/openai/resources/uploads/parts.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parts: () => (/* binding */ Parts)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../internal/uploads.mjs */ \"(rsc)/./node_modules/openai/internal/uploads.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Parts extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Adds a\n     * [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an\n     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object.\n     * A Part represents a chunk of bytes from the file you are trying to upload.\n     *\n     * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload\n     * maximum of 8 GB.\n     *\n     * It is possible to add multiple Parts in parallel. You can decide the intended\n     * order of the Parts when you\n     * [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).\n     */ create(uploadID, body, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/uploads/${uploadID}/parts`, (0,_internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }, this._client));\n    }\n} //# sourceMappingURL=parts.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy91cGxvYWRzL3BhcnRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ2hDO0FBQ21CO0FBQ3BCO0FBQzlDLE1BQU1HLGNBQWNILDJEQUFXQTtJQUNsQzs7Ozs7Ozs7Ozs7O0tBWUMsR0FDREksT0FBT0MsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUM1QixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUNQLDBEQUFLLENBQUMsU0FBUyxFQUFFRyxTQUFTLE1BQU0sQ0FBQyxFQUFFSixrRkFBMkJBLENBQUM7WUFBRUs7WUFBTSxHQUFHQyxPQUFPO1FBQUMsR0FBRyxJQUFJLENBQUNDLE9BQU87SUFDOUg7QUFDSixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvdXBsb2Fkcy9wYXJ0cy5tanM/YmQ3OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IG11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCIuLi8uLi9pbnRlcm5hbC91cGxvYWRzLm1qc1wiO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gXCIuLi8uLi9pbnRlcm5hbC91dGlscy9wYXRoLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFBhcnRzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIEFkZHMgYVxuICAgICAqIFtQYXJ0XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3VwbG9hZHMvcGFydC1vYmplY3QpIHRvIGFuXG4gICAgICogW1VwbG9hZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS91cGxvYWRzL29iamVjdCkgb2JqZWN0LlxuICAgICAqIEEgUGFydCByZXByZXNlbnRzIGEgY2h1bmsgb2YgYnl0ZXMgZnJvbSB0aGUgZmlsZSB5b3UgYXJlIHRyeWluZyB0byB1cGxvYWQuXG4gICAgICpcbiAgICAgKiBFYWNoIFBhcnQgY2FuIGJlIGF0IG1vc3QgNjQgTUIsIGFuZCB5b3UgY2FuIGFkZCBQYXJ0cyB1bnRpbCB5b3UgaGl0IHRoZSBVcGxvYWRcbiAgICAgKiBtYXhpbXVtIG9mIDggR0IuXG4gICAgICpcbiAgICAgKiBJdCBpcyBwb3NzaWJsZSB0byBhZGQgbXVsdGlwbGUgUGFydHMgaW4gcGFyYWxsZWwuIFlvdSBjYW4gZGVjaWRlIHRoZSBpbnRlbmRlZFxuICAgICAqIG9yZGVyIG9mIHRoZSBQYXJ0cyB3aGVuIHlvdVxuICAgICAqIFtjb21wbGV0ZSB0aGUgVXBsb2FkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3VwbG9hZHMvY29tcGxldGUpLlxuICAgICAqL1xuICAgIGNyZWF0ZSh1cGxvYWRJRCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QocGF0aCBgL3VwbG9hZHMvJHt1cGxvYWRJRH0vcGFydHNgLCBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zIH0sIHRoaXMuX2NsaWVudCkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnRzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMiLCJwYXRoIiwiUGFydHMiLCJjcmVhdGUiLCJ1cGxvYWRJRCIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/uploads/parts.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/uploads/uploads.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/openai/resources/uploads/uploads.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Uploads: () => (/* binding */ Uploads)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _parts_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parts.mjs */ \"(rsc)/./node_modules/openai/resources/uploads/parts.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\nclass Uploads extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.parts = new _parts_mjs__WEBPACK_IMPORTED_MODULE_1__.Parts(this._client);\n    }\n    /**\n     * Creates an intermediate\n     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object\n     * that you can add\n     * [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.\n     * Currently, an Upload can accept at most 8 GB in total and expires after an hour\n     * after you create it.\n     *\n     * Once you complete the Upload, we will create a\n     * [File](https://platform.openai.com/docs/api-reference/files/object) object that\n     * contains all the parts you uploaded. This File is usable in the rest of our\n     * platform as a regular File object.\n     *\n     * For certain `purpose` values, the correct `mime_type` must be specified. Please\n     * refer to documentation for the\n     * [supported MIME types for your use case](https://platform.openai.com/docs/assistants/tools/file-search#supported-files).\n     *\n     * For guidance on the proper filename extensions for each purpose, please follow\n     * the documentation on\n     * [creating a File](https://platform.openai.com/docs/api-reference/files/create).\n     */ create(body, options) {\n        return this._client.post(\"/uploads\", {\n            body,\n            ...options\n        });\n    }\n    /**\n     * Cancels the Upload. No Parts may be added after an Upload is cancelled.\n     */ cancel(uploadID, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/uploads/${uploadID}/cancel`, options);\n    }\n    /**\n     * Completes the\n     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object).\n     *\n     * Within the returned Upload object, there is a nested\n     * [File](https://platform.openai.com/docs/api-reference/files/object) object that\n     * is ready to use in the rest of the platform.\n     *\n     * You can specify the order of the Parts by passing in an ordered list of the Part\n     * IDs.\n     *\n     * The number of bytes uploaded upon completion must match the number of bytes\n     * initially specified when creating the Upload object. No Parts may be added after\n     * an Upload is completed.\n     */ complete(uploadID, body, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_2__.path`/uploads/${uploadID}/complete`, {\n            body,\n            ...options\n        });\n    }\n}\nUploads.Parts = _parts_mjs__WEBPACK_IMPORTED_MODULE_1__.Parts; //# sourceMappingURL=uploads.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy91cGxvYWRzL3VwbG9hZHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDaEM7QUFDZDtBQUNKO0FBQ2lCO0FBQzlDLE1BQU1JLGdCQUFnQkosMkRBQVdBO0lBQ3BDSyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUlOLDZDQUFjLENBQUMsSUFBSSxDQUFDTyxPQUFPO0lBQ2hEO0lBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBb0JDLEdBQ0RDLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNJLElBQUksQ0FBQyxZQUFZO1lBQUVGO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQzVEO0lBQ0E7O0tBRUMsR0FDREUsT0FBT0MsUUFBUSxFQUFFSCxPQUFPLEVBQUU7UUFDdEIsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQ0ksSUFBSSxDQUFDVCwwREFBSyxDQUFDLFNBQVMsRUFBRVcsU0FBUyxPQUFPLENBQUMsRUFBRUg7SUFDakU7SUFDQTs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNESSxTQUFTRCxRQUFRLEVBQUVKLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQzlCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNJLElBQUksQ0FBQ1QsMERBQUssQ0FBQyxTQUFTLEVBQUVXLFNBQVMsU0FBUyxDQUFDLEVBQUU7WUFBRUo7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDdEY7QUFDSjtBQUNBUCxRQUFRRixLQUFLLEdBQUdBLDZDQUFLQSxFQUNyQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWktZmlyZWJhc2UtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL3VwbG9hZHMvdXBsb2Fkcy5tanM/YzIxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIFBhcnRzQVBJIGZyb20gXCIuL3BhcnRzLm1qc1wiO1xuaW1wb3J0IHsgUGFydHMgfSBmcm9tIFwiLi9wYXJ0cy5tanNcIjtcbmltcG9ydCB7IHBhdGggfSBmcm9tIFwiLi4vLi4vaW50ZXJuYWwvdXRpbHMvcGF0aC5tanNcIjtcbmV4cG9ydCBjbGFzcyBVcGxvYWRzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnBhcnRzID0gbmV3IFBhcnRzQVBJLlBhcnRzKHRoaXMuX2NsaWVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW50ZXJtZWRpYXRlXG4gICAgICogW1VwbG9hZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS91cGxvYWRzL29iamVjdCkgb2JqZWN0XG4gICAgICogdGhhdCB5b3UgY2FuIGFkZFxuICAgICAqIFtQYXJ0c10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS91cGxvYWRzL3BhcnQtb2JqZWN0KSB0by5cbiAgICAgKiBDdXJyZW50bHksIGFuIFVwbG9hZCBjYW4gYWNjZXB0IGF0IG1vc3QgOCBHQiBpbiB0b3RhbCBhbmQgZXhwaXJlcyBhZnRlciBhbiBob3VyXG4gICAgICogYWZ0ZXIgeW91IGNyZWF0ZSBpdC5cbiAgICAgKlxuICAgICAqIE9uY2UgeW91IGNvbXBsZXRlIHRoZSBVcGxvYWQsIHdlIHdpbGwgY3JlYXRlIGFcbiAgICAgKiBbRmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcy9vYmplY3QpIG9iamVjdCB0aGF0XG4gICAgICogY29udGFpbnMgYWxsIHRoZSBwYXJ0cyB5b3UgdXBsb2FkZWQuIFRoaXMgRmlsZSBpcyB1c2FibGUgaW4gdGhlIHJlc3Qgb2Ygb3VyXG4gICAgICogcGxhdGZvcm0gYXMgYSByZWd1bGFyIEZpbGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogRm9yIGNlcnRhaW4gYHB1cnBvc2VgIHZhbHVlcywgdGhlIGNvcnJlY3QgYG1pbWVfdHlwZWAgbXVzdCBiZSBzcGVjaWZpZWQuIFBsZWFzZVxuICAgICAqIHJlZmVyIHRvIGRvY3VtZW50YXRpb24gZm9yIHRoZVxuICAgICAqIFtzdXBwb3J0ZWQgTUlNRSB0eXBlcyBmb3IgeW91ciB1c2UgY2FzZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXNzaXN0YW50cy90b29scy9maWxlLXNlYXJjaCNzdXBwb3J0ZWQtZmlsZXMpLlxuICAgICAqXG4gICAgICogRm9yIGd1aWRhbmNlIG9uIHRoZSBwcm9wZXIgZmlsZW5hbWUgZXh0ZW5zaW9ucyBmb3IgZWFjaCBwdXJwb3NlLCBwbGVhc2UgZm9sbG93XG4gICAgICogdGhlIGRvY3VtZW50YXRpb24gb25cbiAgICAgKiBbY3JlYXRpbmcgYSBGaWxlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbGVzL2NyZWF0ZSkuXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvdXBsb2FkcycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VscyB0aGUgVXBsb2FkLiBObyBQYXJ0cyBtYXkgYmUgYWRkZWQgYWZ0ZXIgYW4gVXBsb2FkIGlzIGNhbmNlbGxlZC5cbiAgICAgKi9cbiAgICBjYW5jZWwodXBsb2FkSUQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KHBhdGggYC91cGxvYWRzLyR7dXBsb2FkSUR9L2NhbmNlbGAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wbGV0ZXMgdGhlXG4gICAgICogW1VwbG9hZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS91cGxvYWRzL29iamVjdCkuXG4gICAgICpcbiAgICAgKiBXaXRoaW4gdGhlIHJldHVybmVkIFVwbG9hZCBvYmplY3QsIHRoZXJlIGlzIGEgbmVzdGVkXG4gICAgICogW0ZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMvb2JqZWN0KSBvYmplY3QgdGhhdFxuICAgICAqIGlzIHJlYWR5IHRvIHVzZSBpbiB0aGUgcmVzdCBvZiB0aGUgcGxhdGZvcm0uXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIHNwZWNpZnkgdGhlIG9yZGVyIG9mIHRoZSBQYXJ0cyBieSBwYXNzaW5nIGluIGFuIG9yZGVyZWQgbGlzdCBvZiB0aGUgUGFydFxuICAgICAqIElEcy5cbiAgICAgKlxuICAgICAqIFRoZSBudW1iZXIgb2YgYnl0ZXMgdXBsb2FkZWQgdXBvbiBjb21wbGV0aW9uIG11c3QgbWF0Y2ggdGhlIG51bWJlciBvZiBieXRlc1xuICAgICAqIGluaXRpYWxseSBzcGVjaWZpZWQgd2hlbiBjcmVhdGluZyB0aGUgVXBsb2FkIG9iamVjdC4gTm8gUGFydHMgbWF5IGJlIGFkZGVkIGFmdGVyXG4gICAgICogYW4gVXBsb2FkIGlzIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBjb21wbGV0ZSh1cGxvYWRJRCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QocGF0aCBgL3VwbG9hZHMvJHt1cGxvYWRJRH0vY29tcGxldGVgLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxufVxuVXBsb2Fkcy5QYXJ0cyA9IFBhcnRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXBsb2Fkcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiUGFydHNBUEkiLCJQYXJ0cyIsInBhdGgiLCJVcGxvYWRzIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJwYXJ0cyIsIl9jbGllbnQiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsInBvc3QiLCJjYW5jZWwiLCJ1cGxvYWRJRCIsImNvbXBsZXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/uploads/uploads.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/vector-stores/file-batches.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/openai/resources/vector-stores/file-batches.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileBatches: () => (/* binding */ FileBatches)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_sleep_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../internal/utils/sleep.mjs */ \"(rsc)/./node_modules/openai/internal/utils/sleep.mjs\");\n/* harmony import */ var _lib_Util_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/Util.mjs */ \"(rsc)/./node_modules/openai/lib/Util.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\nclass FileBatches extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Create a vector store file batch.\n     */ create(vectorStoreID, body, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/vector_stores/${vectorStoreID}/file_batches`, {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Retrieves a vector store file batch.\n     */ retrieve(batchID, params, options) {\n        const { vector_store_id } = params;\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/vector_stores/${vector_store_id}/file_batches/${batchID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Cancel a vector store file batch. This attempts to cancel the processing of\n     * files in this batch as soon as possible.\n     */ cancel(batchID, params, options) {\n        const { vector_store_id } = params;\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/vector_stores/${vector_store_id}/file_batches/${batchID}/cancel`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Create a vector store batch and poll until all files have been processed.\n     */ async createAndPoll(vectorStoreId, body, options) {\n        const batch = await this.create(vectorStoreId, body);\n        return await this.poll(vectorStoreId, batch.id, options);\n    }\n    /**\n     * Returns a list of vector store files in a batch.\n     */ listFiles(batchID, params, options) {\n        const { vector_store_id, ...query } = params;\n        return this._client.getAPIList(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/vector_stores/${vector_store_id}/file_batches/${batchID}/files`, _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.CursorPage, {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Wait for the given file batch to be processed.\n     *\n     * Note: this will return even if one of the files failed to process, you need to\n     * check batch.file_counts.failed_count to handle this case.\n     */ async poll(vectorStoreID, batchID, options) {\n        const headers = (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n            options?.headers,\n            {\n                \"X-Stainless-Poll-Helper\": \"true\",\n                \"X-Stainless-Custom-Poll-Interval\": options?.pollIntervalMs?.toString() ?? undefined\n            }\n        ]);\n        while(true){\n            const { data: batch, response } = await this.retrieve(batchID, {\n                vector_store_id: vectorStoreID\n            }, {\n                ...options,\n                headers\n            }).withResponse();\n            switch(batch.status){\n                case \"in_progress\":\n                    let sleepInterval = 5000;\n                    if (options?.pollIntervalMs) {\n                        sleepInterval = options.pollIntervalMs;\n                    } else {\n                        const headerInterval = response.headers.get(\"openai-poll-after-ms\");\n                        if (headerInterval) {\n                            const headerIntervalMs = parseInt(headerInterval);\n                            if (!isNaN(headerIntervalMs)) {\n                                sleepInterval = headerIntervalMs;\n                            }\n                        }\n                    }\n                    await (0,_internal_utils_sleep_mjs__WEBPACK_IMPORTED_MODULE_3__.sleep)(sleepInterval);\n                    break;\n                case \"failed\":\n                case \"cancelled\":\n                case \"completed\":\n                    return batch;\n            }\n        }\n    }\n    /**\n     * Uploads the given files concurrently and then creates a vector store file batch.\n     *\n     * The concurrency limit is configurable using the `maxConcurrency` parameter.\n     */ async uploadAndPoll(vectorStoreId, { files, fileIds = [] }, options) {\n        if (files == null || files.length == 0) {\n            throw new Error(`No \\`files\\` provided to process. If you've already uploaded files you should use \\`.createAndPoll()\\` instead`);\n        }\n        const configuredConcurrency = options?.maxConcurrency ?? 5;\n        // We cap the number of workers at the number of files (so we don't start any unnecessary workers)\n        const concurrencyLimit = Math.min(configuredConcurrency, files.length);\n        const client = this._client;\n        const fileIterator = files.values();\n        const allFileIds = [\n            ...fileIds\n        ];\n        // This code is based on this design. The libraries don't accommodate our environment limits.\n        // https://stackoverflow.com/questions/40639432/what-is-the-best-way-to-limit-concurrency-when-using-es6s-promise-all\n        async function processFiles(iterator) {\n            for (let item of iterator){\n                const fileObj = await client.files.create({\n                    file: item,\n                    purpose: \"assistants\"\n                }, options);\n                allFileIds.push(fileObj.id);\n            }\n        }\n        // Start workers to process results\n        const workers = Array(concurrencyLimit).fill(fileIterator).map(processFiles);\n        // Wait for all processing to complete.\n        await (0,_lib_Util_mjs__WEBPACK_IMPORTED_MODULE_4__.allSettledWithThrow)(workers);\n        return await this.createAndPoll(vectorStoreId, {\n            file_ids: allFileIds\n        });\n    }\n} //# sourceMappingURL=file-batches.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/vector-stores/file-batches.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/vector-stores/files.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/openai/resources/vector-stores/files.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Files: () => (/* binding */ Files)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../internal/utils.mjs */ \"(rsc)/./node_modules/openai/internal/utils.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass Files extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Create a vector store file by attaching a\n     * [File](https://platform.openai.com/docs/api-reference/files) to a\n     * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).\n     */ create(vectorStoreID, body, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__.path`/vector_stores/${vectorStoreID}/files`, {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Retrieves a vector store file.\n     */ retrieve(fileID, params, options) {\n        const { vector_store_id } = params;\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__.path`/vector_stores/${vector_store_id}/files/${fileID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Update attributes on a vector store file.\n     */ update(fileID, params, options) {\n        const { vector_store_id, ...body } = params;\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__.path`/vector_stores/${vector_store_id}/files/${fileID}`, {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Returns a list of vector store files.\n     */ list(vectorStoreID, query = {}, options) {\n        return this._client.getAPIList(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__.path`/vector_stores/${vectorStoreID}/files`, _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.CursorPage, {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Delete a vector store file. This will remove the file from the vector store but\n     * the file itself will not be deleted. To delete the file, use the\n     * [delete file](https://platform.openai.com/docs/api-reference/files/delete)\n     * endpoint.\n     */ delete(fileID, params, options) {\n        const { vector_store_id } = params;\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__.path`/vector_stores/${vector_store_id}/files/${fileID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Attach a file to the given vector store and wait for it to be processed.\n     */ async createAndPoll(vectorStoreId, body, options) {\n        const file = await this.create(vectorStoreId, body, options);\n        return await this.poll(vectorStoreId, file.id, options);\n    }\n    /**\n     * Wait for the vector store file to finish processing.\n     *\n     * Note: this will return even if the file failed to process, you need to check\n     * file.last_error and file.status to handle these cases\n     */ async poll(vectorStoreID, fileID, options) {\n        const headers = (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n            options?.headers,\n            {\n                \"X-Stainless-Poll-Helper\": \"true\",\n                \"X-Stainless-Custom-Poll-Interval\": options?.pollIntervalMs?.toString() ?? undefined\n            }\n        ]);\n        while(true){\n            const fileResponse = await this.retrieve(fileID, {\n                vector_store_id: vectorStoreID\n            }, {\n                ...options,\n                headers\n            }).withResponse();\n            const file = fileResponse.data;\n            switch(file.status){\n                case \"in_progress\":\n                    let sleepInterval = 5000;\n                    if (options?.pollIntervalMs) {\n                        sleepInterval = options.pollIntervalMs;\n                    } else {\n                        const headerInterval = fileResponse.response.headers.get(\"openai-poll-after-ms\");\n                        if (headerInterval) {\n                            const headerIntervalMs = parseInt(headerInterval);\n                            if (!isNaN(headerIntervalMs)) {\n                                sleepInterval = headerIntervalMs;\n                            }\n                        }\n                    }\n                    await (0,_internal_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.sleep)(sleepInterval);\n                    break;\n                case \"failed\":\n                case \"completed\":\n                    return file;\n            }\n        }\n    }\n    /**\n     * Upload a file to the `files` API and then attach it to the given vector store.\n     *\n     * Note the file will be asynchronously processed (you can use the alternative\n     * polling helper method to wait for processing to complete).\n     */ async upload(vectorStoreId, file, options) {\n        const fileInfo = await this._client.files.create({\n            file: file,\n            purpose: \"assistants\"\n        }, options);\n        return this.create(vectorStoreId, {\n            file_id: fileInfo.id\n        }, options);\n    }\n    /**\n     * Add a file to a vector store and poll until processing is complete.\n     */ async uploadAndPoll(vectorStoreId, file, options) {\n        const fileInfo = await this.upload(vectorStoreId, file, options);\n        return await this.poll(vectorStoreId, fileInfo.id, options);\n    }\n    /**\n     * Retrieve the parsed contents of a vector store file.\n     */ content(fileID, params, options) {\n        const { vector_store_id } = params;\n        return this._client.getAPIList(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__.path`/vector_stores/${vector_store_id}/files/${fileID}/content`, _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n} //# sourceMappingURL=files.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/vector-stores/files.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/vector-stores/vector-stores.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/openai/resources/vector-stores/vector-stores.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VectorStores: () => (/* binding */ VectorStores)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _file_batches_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./file-batches.mjs */ \"(rsc)/./node_modules/openai/resources/vector-stores/file-batches.mjs\");\n/* harmony import */ var _files_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./files.mjs */ \"(rsc)/./node_modules/openai/resources/vector-stores/files.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/pagination.mjs */ \"(rsc)/./node_modules/openai/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/./node_modules/openai/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\n\nclass VectorStores extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.files = new _files_mjs__WEBPACK_IMPORTED_MODULE_2__.Files(this._client);\n        this.fileBatches = new _file_batches_mjs__WEBPACK_IMPORTED_MODULE_1__.FileBatches(this._client);\n    }\n    /**\n     * Create a vector store.\n     */ create(body, options) {\n        return this._client.post(\"/vector_stores\", {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_4__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Retrieves a vector store.\n     */ retrieve(vectorStoreID, options) {\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/vector_stores/${vectorStoreID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_4__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Modifies a vector store.\n     */ update(vectorStoreID, body, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/vector_stores/${vectorStoreID}`, {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_4__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Returns a list of vector stores.\n     */ list(query = {}, options) {\n        return this._client.getAPIList(\"/vector_stores\", _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_3__.CursorPage, {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_4__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Delete a vector store.\n     */ delete(vectorStoreID, options) {\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/vector_stores/${vectorStoreID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_4__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Search a vector store for relevant chunks based on a query and file attributes\n     * filter.\n     */ search(vectorStoreID, body, options) {\n        return this._client.getAPIList(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/vector_stores/${vectorStoreID}/search`, _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_3__.Page, {\n            body,\n            method: \"post\",\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_4__.buildHeaders)([\n                {\n                    \"OpenAI-Beta\": \"assistants=v2\"\n                },\n                options?.headers\n            ])\n        });\n    }\n}\nVectorStores.Files = _files_mjs__WEBPACK_IMPORTED_MODULE_2__.Files;\nVectorStores.FileBatches = _file_batches_mjs__WEBPACK_IMPORTED_MODULE_1__.FileBatches; //# sourceMappingURL=vector-stores.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy92ZWN0b3Itc3RvcmVzL3ZlY3Rvci1zdG9yZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDaEM7QUFDRDtBQUNIO0FBQ1Y7QUFDSDtBQUN3QjtBQUNIO0FBQ0w7QUFDOUMsTUFBTVMscUJBQXFCVCwyREFBV0E7SUFDekNVLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSVQsNkNBQWMsQ0FBQyxJQUFJLENBQUNVLE9BQU87UUFDNUMsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSWIsMERBQTBCLENBQUMsSUFBSSxDQUFDWSxPQUFPO0lBQ2xFO0lBQ0E7O0tBRUMsR0FDREUsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ssSUFBSSxDQUFDLGtCQUFrQjtZQUN2Q0Y7WUFDQSxHQUFHQyxPQUFPO1lBQ1ZFLFNBQVNaLG1FQUFZQSxDQUFDO2dCQUFDO29CQUFFLGVBQWU7Z0JBQWdCO2dCQUFHVSxTQUFTRTthQUFRO1FBQ2hGO0lBQ0o7SUFDQTs7S0FFQyxHQUNEQyxTQUFTQyxhQUFhLEVBQUVKLE9BQU8sRUFBRTtRQUM3QixPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUFDUyxHQUFHLENBQUNkLDBEQUFLLENBQUMsZUFBZSxFQUFFYSxjQUFjLENBQUMsRUFBRTtZQUM1RCxHQUFHSixPQUFPO1lBQ1ZFLFNBQVNaLG1FQUFZQSxDQUFDO2dCQUFDO29CQUFFLGVBQWU7Z0JBQWdCO2dCQUFHVSxTQUFTRTthQUFRO1FBQ2hGO0lBQ0o7SUFDQTs7S0FFQyxHQUNESSxPQUFPRixhQUFhLEVBQUVMLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2pDLE9BQU8sSUFBSSxDQUFDSixPQUFPLENBQUNLLElBQUksQ0FBQ1YsMERBQUssQ0FBQyxlQUFlLEVBQUVhLGNBQWMsQ0FBQyxFQUFFO1lBQzdETDtZQUNBLEdBQUdDLE9BQU87WUFDVkUsU0FBU1osbUVBQVlBLENBQUM7Z0JBQUM7b0JBQUUsZUFBZTtnQkFBZ0I7Z0JBQUdVLFNBQVNFO2FBQVE7UUFDaEY7SUFDSjtJQUNBOztLQUVDLEdBQ0RLLEtBQUtDLFFBQVEsQ0FBQyxDQUFDLEVBQUVSLE9BQU8sRUFBRTtRQUN0QixPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUFDYSxVQUFVLENBQUMsa0JBQW1CckIsNERBQVVBLEVBQUc7WUFDM0RvQjtZQUNBLEdBQUdSLE9BQU87WUFDVkUsU0FBU1osbUVBQVlBLENBQUM7Z0JBQUM7b0JBQUUsZUFBZTtnQkFBZ0I7Z0JBQUdVLFNBQVNFO2FBQVE7UUFDaEY7SUFDSjtJQUNBOztLQUVDLEdBQ0RRLE9BQU9OLGFBQWEsRUFBRUosT0FBTyxFQUFFO1FBQzNCLE9BQU8sSUFBSSxDQUFDSixPQUFPLENBQUNjLE1BQU0sQ0FBQ25CLDBEQUFLLENBQUMsZUFBZSxFQUFFYSxjQUFjLENBQUMsRUFBRTtZQUMvRCxHQUFHSixPQUFPO1lBQ1ZFLFNBQVNaLG1FQUFZQSxDQUFDO2dCQUFDO29CQUFFLGVBQWU7Z0JBQWdCO2dCQUFHVSxTQUFTRTthQUFRO1FBQ2hGO0lBQ0o7SUFDQTs7O0tBR0MsR0FDRFMsT0FBT1AsYUFBYSxFQUFFTCxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNqQyxPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUFDYSxVQUFVLENBQUNsQiwwREFBSyxDQUFDLGVBQWUsRUFBRWEsY0FBYyxPQUFPLENBQUMsRUFBR2Ysc0RBQUlBLEVBQUc7WUFDbEZVO1lBQ0FhLFFBQVE7WUFDUixHQUFHWixPQUFPO1lBQ1ZFLFNBQVNaLG1FQUFZQSxDQUFDO2dCQUFDO29CQUFFLGVBQWU7Z0JBQWdCO2dCQUFHVSxTQUFTRTthQUFRO1FBQ2hGO0lBQ0o7QUFDSjtBQUNBVixhQUFhTCxLQUFLLEdBQUdBLDZDQUFLQTtBQUMxQkssYUFBYVAsV0FBVyxHQUFHQSwwREFBV0EsRUFDdEMsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy92ZWN0b3Itc3RvcmVzL3ZlY3Rvci1zdG9yZXMubWpzP2U0MDciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBGaWxlQmF0Y2hlc0FQSSBmcm9tIFwiLi9maWxlLWJhdGNoZXMubWpzXCI7XG5pbXBvcnQgeyBGaWxlQmF0Y2hlcywgfSBmcm9tIFwiLi9maWxlLWJhdGNoZXMubWpzXCI7XG5pbXBvcnQgKiBhcyBGaWxlc0FQSSBmcm9tIFwiLi9maWxlcy5tanNcIjtcbmltcG9ydCB7IEZpbGVzLCB9IGZyb20gXCIuL2ZpbGVzLm1qc1wiO1xuaW1wb3J0IHsgQ3Vyc29yUGFnZSwgUGFnZSB9IGZyb20gXCIuLi8uLi9jb3JlL3BhZ2luYXRpb24ubWpzXCI7XG5pbXBvcnQgeyBidWlsZEhlYWRlcnMgfSBmcm9tIFwiLi4vLi4vaW50ZXJuYWwvaGVhZGVycy5tanNcIjtcbmltcG9ydCB7IHBhdGggfSBmcm9tIFwiLi4vLi4vaW50ZXJuYWwvdXRpbHMvcGF0aC5tanNcIjtcbmV4cG9ydCBjbGFzcyBWZWN0b3JTdG9yZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmlsZXMgPSBuZXcgRmlsZXNBUEkuRmlsZXModGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy5maWxlQmF0Y2hlcyA9IG5ldyBGaWxlQmF0Y2hlc0FQSS5GaWxlQmF0Y2hlcyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSB2ZWN0b3Igc3RvcmUuXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvdmVjdG9yX3N0b3JlcycsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFt7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJyB9LCBvcHRpb25zPy5oZWFkZXJzXSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSB2ZWN0b3Igc3RvcmUuXG4gICAgICovXG4gICAgcmV0cmlldmUodmVjdG9yU3RvcmVJRCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChwYXRoIGAvdmVjdG9yX3N0b3Jlcy8ke3ZlY3RvclN0b3JlSUR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicgfSwgb3B0aW9ucz8uaGVhZGVyc10pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW9kaWZpZXMgYSB2ZWN0b3Igc3RvcmUuXG4gICAgICovXG4gICAgdXBkYXRlKHZlY3RvclN0b3JlSUQsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KHBhdGggYC92ZWN0b3Jfc3RvcmVzLyR7dmVjdG9yU3RvcmVJRH1gLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicgfSwgb3B0aW9ucz8uaGVhZGVyc10pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgdmVjdG9yIHN0b3Jlcy5cbiAgICAgKi9cbiAgICBsaXN0KHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvdmVjdG9yX3N0b3JlcycsIChDdXJzb3JQYWdlKSwge1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFt7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJyB9LCBvcHRpb25zPy5oZWFkZXJzXSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSB2ZWN0b3Igc3RvcmUuXG4gICAgICovXG4gICAgZGVsZXRlKHZlY3RvclN0b3JlSUQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUocGF0aCBgL3ZlY3Rvcl9zdG9yZXMvJHt2ZWN0b3JTdG9yZUlEfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW3sgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInIH0sIG9wdGlvbnM/LmhlYWRlcnNdKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlYXJjaCBhIHZlY3RvciBzdG9yZSBmb3IgcmVsZXZhbnQgY2h1bmtzIGJhc2VkIG9uIGEgcXVlcnkgYW5kIGZpbGUgYXR0cmlidXRlc1xuICAgICAqIGZpbHRlci5cbiAgICAgKi9cbiAgICBzZWFyY2godmVjdG9yU3RvcmVJRCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QocGF0aCBgL3ZlY3Rvcl9zdG9yZXMvJHt2ZWN0b3JTdG9yZUlEfS9zZWFyY2hgLCAoUGFnZSksIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW3sgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInIH0sIG9wdGlvbnM/LmhlYWRlcnNdKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuVmVjdG9yU3RvcmVzLkZpbGVzID0gRmlsZXM7XG5WZWN0b3JTdG9yZXMuRmlsZUJhdGNoZXMgPSBGaWxlQmF0Y2hlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlY3Rvci1zdG9yZXMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkZpbGVCYXRjaGVzQVBJIiwiRmlsZUJhdGNoZXMiLCJGaWxlc0FQSSIsIkZpbGVzIiwiQ3Vyc29yUGFnZSIsIlBhZ2UiLCJidWlsZEhlYWRlcnMiLCJwYXRoIiwiVmVjdG9yU3RvcmVzIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJmaWxlcyIsIl9jbGllbnQiLCJmaWxlQmF0Y2hlcyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwicG9zdCIsImhlYWRlcnMiLCJyZXRyaWV2ZSIsInZlY3RvclN0b3JlSUQiLCJnZXQiLCJ1cGRhdGUiLCJsaXN0IiwicXVlcnkiLCJnZXRBUElMaXN0IiwiZGVsZXRlIiwic2VhcmNoIiwibWV0aG9kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/vector-stores/vector-stores.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/webhooks.mjs":
/*!****************************************************!*\
  !*** ./node_modules/openai/resources/webhooks.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Webhooks: () => (/* binding */ Webhooks)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/./node_modules/openai/internal/tslib.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/resource.mjs */ \"(rsc)/./node_modules/openai/core/resource.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/headers.mjs */ \"(rsc)/./node_modules/openai/internal/headers.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _Webhooks_instances, _Webhooks_validateSecret, _Webhooks_getRequiredHeader;\n\n\n\n\nclass Webhooks extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_2__.APIResource {\n    constructor(){\n        super(...arguments);\n        _Webhooks_instances.add(this);\n    }\n    /**\n     * Validates that the given payload was sent by OpenAI and parses the payload.\n     */ async unwrap(payload, headers, secret = this._client.webhookSecret, tolerance = 300) {\n        await this.verifySignature(payload, headers, secret, tolerance);\n        return JSON.parse(payload);\n    }\n    /**\n     * Validates whether or not the webhook payload was sent by OpenAI.\n     *\n     * An error will be raised if the webhook payload was not sent by OpenAI.\n     *\n     * @param payload - The webhook payload\n     * @param headers - The webhook headers\n     * @param secret - The webhook secret (optional, will use client secret if not provided)\n     * @param tolerance - Maximum age of the webhook in seconds (default: 300 = 5 minutes)\n     */ async verifySignature(payload, headers, secret = this._client.webhookSecret, tolerance = 300) {\n        if (typeof crypto === \"undefined\" || typeof crypto.subtle.importKey !== \"function\" || typeof crypto.subtle.verify !== \"function\") {\n            throw new Error(\"Webhook signature verification is only supported when the `crypto` global is defined\");\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Webhooks_instances, \"m\", _Webhooks_validateSecret).call(this, secret);\n        const headersObj = (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_3__.buildHeaders)([\n            headers\n        ]).values;\n        const signatureHeader = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Webhooks_instances, \"m\", _Webhooks_getRequiredHeader).call(this, headersObj, \"webhook-signature\");\n        const timestamp = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Webhooks_instances, \"m\", _Webhooks_getRequiredHeader).call(this, headersObj, \"webhook-timestamp\");\n        const webhookId = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Webhooks_instances, \"m\", _Webhooks_getRequiredHeader).call(this, headersObj, \"webhook-id\");\n        // Validate timestamp to prevent replay attacks\n        const timestampSeconds = parseInt(timestamp, 10);\n        if (isNaN(timestampSeconds)) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.InvalidWebhookSignatureError(\"Invalid webhook timestamp format\");\n        }\n        const nowSeconds = Math.floor(Date.now() / 1000);\n        if (nowSeconds - timestampSeconds > tolerance) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.InvalidWebhookSignatureError(\"Webhook timestamp is too old\");\n        }\n        if (timestampSeconds > nowSeconds + tolerance) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.InvalidWebhookSignatureError(\"Webhook timestamp is too new\");\n        }\n        // Extract signatures from v1,<base64> format\n        // The signature header can have multiple values, separated by spaces.\n        // Each value is in the format v1,<base64>. We should accept if any match.\n        const signatures = signatureHeader.split(\" \").map((part)=>part.startsWith(\"v1,\") ? part.substring(3) : part);\n        // Decode the secret if it starts with whsec_\n        const decodedSecret = secret.startsWith(\"whsec_\") ? Buffer.from(secret.replace(\"whsec_\", \"\"), \"base64\") : Buffer.from(secret, \"utf-8\");\n        // Create the signed payload: {webhook_id}.{timestamp}.{payload}\n        const signedPayload = webhookId ? `${webhookId}.${timestamp}.${payload}` : `${timestamp}.${payload}`;\n        // Import the secret as a cryptographic key for HMAC\n        const key = await crypto.subtle.importKey(\"raw\", decodedSecret, {\n            name: \"HMAC\",\n            hash: \"SHA-256\"\n        }, false, [\n            \"verify\"\n        ]);\n        // Check if any signature matches using timing-safe WebCrypto verify\n        for (const signature of signatures){\n            try {\n                const signatureBytes = Buffer.from(signature, \"base64\");\n                const isValid = await crypto.subtle.verify(\"HMAC\", key, signatureBytes, new TextEncoder().encode(signedPayload));\n                if (isValid) {\n                    return; // Valid signature found\n                }\n            } catch  {\n                continue;\n            }\n        }\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.InvalidWebhookSignatureError(\"The given webhook signature does not match the expected signature\");\n    }\n}\n_Webhooks_instances = new WeakSet(), _Webhooks_validateSecret = function _Webhooks_validateSecret(secret) {\n    if (typeof secret !== \"string\" || secret.length === 0) {\n        throw new Error(`The webhook secret must either be set using the env var, OPENAI_WEBHOOK_SECRET, on the client class, OpenAI({ webhookSecret: '123' }), or passed to this function`);\n    }\n}, _Webhooks_getRequiredHeader = function _Webhooks_getRequiredHeader(headers, name) {\n    if (!headers) {\n        throw new Error(`Headers are required`);\n    }\n    const value = headers.get(name);\n    if (value === null || value === undefined) {\n        throw new Error(`Missing required header: ${name}`);\n    }\n    return value;\n}; //# sourceMappingURL=webhooks.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/webhooks.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/streaming.mjs":
/*!*******************************************!*\
  !*** ./node_modules/openai/streaming.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stream: () => (/* reexport safe */ _core_streaming_mjs__WEBPACK_IMPORTED_MODULE_0__.Stream),\n/* harmony export */   _iterSSEMessages: () => (/* reexport safe */ _core_streaming_mjs__WEBPACK_IMPORTED_MODULE_0__._iterSSEMessages)\n/* harmony export */ });\n/* harmony import */ var _core_streaming_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/streaming.mjs */ \"(rsc)/./node_modules/openai/core/streaming.mjs\");\n //# sourceMappingURL=streaming.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3N0cmVhbWluZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFDLENBQ3JDLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haS1maXJlYmFzZS1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL29wZW5haS9zdHJlYW1pbmcubWpzP2E3NzkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vY29yZS9zdHJlYW1pbmcubWpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJlYW1pbmcubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/streaming.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/version.mjs":
/*!*****************************************!*\
  !*** ./node_modules/openai/version.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = \"5.10.1\"; // x-release-please-version\n //# sourceMappingURL=version.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3ZlcnNpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxVQUFVLFNBQVMsQ0FBQywyQkFBMkI7Q0FDNUQsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpLWZpcmViYXNlLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3ZlcnNpb24ubWpzP2RjMmYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnNS4xMC4xJzsgLy8geC1yZWxlYXNlLXBsZWFzZS12ZXJzaW9uXG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLm1qcy5tYXAiXSwibmFtZXMiOlsiVkVSU0lPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/version.mjs\n");

/***/ })

};
;